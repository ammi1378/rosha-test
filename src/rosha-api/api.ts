/* tslint:disable */
/* eslint-disable */
/**
 * DOCUMENTATION
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact-email@something.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface IAboutAboutCardsComponentCardsInnerModel
 */
export interface IAboutAboutCardsComponentCardsInnerModel {
    /**
     * 
     * @type {number}
     * @memberof IAboutAboutCardsComponentCardsInnerModel
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof IAboutAboutCardsComponentCardsInnerModel
     */
    'Title'?: string;
    /**
     * 
     * @type {string}
     * @memberof IAboutAboutCardsComponentCardsInnerModel
     */
    'Description'?: string;
}
/**
 * 
 * @export
 * @interface IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesFilesDataInnerAttributesModel
 */
export interface IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesFilesDataInnerAttributesModel {
    /**
     * 
     * @type {string}
     * @memberof IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesFilesDataInnerAttributesModel
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesFilesDataInnerAttributesModel
     */
    'alternativeText'?: string;
    /**
     * 
     * @type {string}
     * @memberof IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesFilesDataInnerAttributesModel
     */
    'caption'?: string;
    /**
     * 
     * @type {number}
     * @memberof IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesFilesDataInnerAttributesModel
     */
    'width'?: number;
    /**
     * 
     * @type {number}
     * @memberof IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesFilesDataInnerAttributesModel
     */
    'height'?: number;
    /**
     * 
     * @type {any}
     * @memberof IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesFilesDataInnerAttributesModel
     */
    'formats'?: any;
    /**
     * 
     * @type {string}
     * @memberof IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesFilesDataInnerAttributesModel
     */
    'hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesFilesDataInnerAttributesModel
     */
    'ext'?: string;
    /**
     * 
     * @type {string}
     * @memberof IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesFilesDataInnerAttributesModel
     */
    'mime'?: string;
    /**
     * 
     * @type {number}
     * @memberof IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesFilesDataInnerAttributesModel
     */
    'size'?: number;
    /**
     * 
     * @type {string}
     * @memberof IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesFilesDataInnerAttributesModel
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesFilesDataInnerAttributesModel
     */
    'previewUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesFilesDataInnerAttributesModel
     */
    'provider'?: string;
    /**
     * 
     * @type {any}
     * @memberof IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesFilesDataInnerAttributesModel
     */
    'provider_metadata'?: any;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsersModel}
     * @memberof IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesFilesDataInnerAttributesModel
     */
    'related'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsersModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesFilesDataInnerAttributesModel
     */
    'folder'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
    /**
     * 
     * @type {string}
     * @memberof IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesFilesDataInnerAttributesModel
     */
    'folderPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesFilesDataInnerAttributesModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesFilesDataInnerAttributesModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByModel}
     * @memberof IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesFilesDataInnerAttributesModel
     */
    'createdBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesFilesDataInnerAttributesModel
     */
    'updatedBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
}
/**
 * 
 * @export
 * @interface IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesFilesDataInnerModel
 */
export interface IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesFilesDataInnerModel {
    /**
     * 
     * @type {number}
     * @memberof IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesFilesDataInnerModel
     */
    'id'?: number;
    /**
     * 
     * @type {IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesFilesDataInnerAttributesModel}
     * @memberof IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesFilesDataInnerModel
     */
    'attributes'?: IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesFilesDataInnerAttributesModel;
}
/**
 * 
 * @export
 * @interface IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesFilesModel
 */
export interface IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesFilesModel {
    /**
     * 
     * @type {Array<IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesFilesDataInnerModel>}
     * @memberof IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesFilesModel
     */
    'data'?: Array<IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesFilesDataInnerModel>;
}
/**
 * 
 * @export
 * @interface IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesModel
 */
export interface IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesModel {
    /**
     * 
     * @type {string}
     * @memberof IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesModel
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesModel
     */
    'pathId'?: number;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesModel
     */
    'parent'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsersModel}
     * @memberof IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesModel
     */
    'children'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsersModel;
    /**
     * 
     * @type {IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesFilesModel}
     * @memberof IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesModel
     */
    'files'?: IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesFilesModel;
    /**
     * 
     * @type {string}
     * @memberof IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesModel
     */
    'path'?: string;
    /**
     * 
     * @type {string}
     * @memberof IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesModel
     */
    'createdBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesModel
     */
    'updatedBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
}
/**
 * 
 * @export
 * @interface IAboutAboutCardsComponentImageDataAttributesFolderDataModel
 */
export interface IAboutAboutCardsComponentImageDataAttributesFolderDataModel {
    /**
     * 
     * @type {number}
     * @memberof IAboutAboutCardsComponentImageDataAttributesFolderDataModel
     */
    'id'?: number;
    /**
     * 
     * @type {IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesModel}
     * @memberof IAboutAboutCardsComponentImageDataAttributesFolderDataModel
     */
    'attributes'?: IAboutAboutCardsComponentImageDataAttributesFolderDataAttributesModel;
}
/**
 * 
 * @export
 * @interface IAboutAboutCardsComponentImageDataAttributesFolderModel
 */
export interface IAboutAboutCardsComponentImageDataAttributesFolderModel {
    /**
     * 
     * @type {IAboutAboutCardsComponentImageDataAttributesFolderDataModel}
     * @memberof IAboutAboutCardsComponentImageDataAttributesFolderModel
     */
    'data'?: IAboutAboutCardsComponentImageDataAttributesFolderDataModel;
}
/**
 * 
 * @export
 * @interface IAboutAboutCardsComponentImageDataAttributesModel
 */
export interface IAboutAboutCardsComponentImageDataAttributesModel {
    /**
     * 
     * @type {string}
     * @memberof IAboutAboutCardsComponentImageDataAttributesModel
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof IAboutAboutCardsComponentImageDataAttributesModel
     */
    'alternativeText'?: string;
    /**
     * 
     * @type {string}
     * @memberof IAboutAboutCardsComponentImageDataAttributesModel
     */
    'caption'?: string;
    /**
     * 
     * @type {number}
     * @memberof IAboutAboutCardsComponentImageDataAttributesModel
     */
    'width'?: number;
    /**
     * 
     * @type {number}
     * @memberof IAboutAboutCardsComponentImageDataAttributesModel
     */
    'height'?: number;
    /**
     * 
     * @type {any}
     * @memberof IAboutAboutCardsComponentImageDataAttributesModel
     */
    'formats'?: any;
    /**
     * 
     * @type {string}
     * @memberof IAboutAboutCardsComponentImageDataAttributesModel
     */
    'hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof IAboutAboutCardsComponentImageDataAttributesModel
     */
    'ext'?: string;
    /**
     * 
     * @type {string}
     * @memberof IAboutAboutCardsComponentImageDataAttributesModel
     */
    'mime'?: string;
    /**
     * 
     * @type {number}
     * @memberof IAboutAboutCardsComponentImageDataAttributesModel
     */
    'size'?: number;
    /**
     * 
     * @type {string}
     * @memberof IAboutAboutCardsComponentImageDataAttributesModel
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof IAboutAboutCardsComponentImageDataAttributesModel
     */
    'previewUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof IAboutAboutCardsComponentImageDataAttributesModel
     */
    'provider'?: string;
    /**
     * 
     * @type {any}
     * @memberof IAboutAboutCardsComponentImageDataAttributesModel
     */
    'provider_metadata'?: any;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsersModel}
     * @memberof IAboutAboutCardsComponentImageDataAttributesModel
     */
    'related'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsersModel;
    /**
     * 
     * @type {IAboutAboutCardsComponentImageDataAttributesFolderModel}
     * @memberof IAboutAboutCardsComponentImageDataAttributesModel
     */
    'folder'?: IAboutAboutCardsComponentImageDataAttributesFolderModel;
    /**
     * 
     * @type {string}
     * @memberof IAboutAboutCardsComponentImageDataAttributesModel
     */
    'folderPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof IAboutAboutCardsComponentImageDataAttributesModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IAboutAboutCardsComponentImageDataAttributesModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IAboutAboutCardsComponentImageDataAttributesModel
     */
    'createdBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IAboutAboutCardsComponentImageDataAttributesModel
     */
    'updatedBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
}
/**
 * 
 * @export
 * @interface IAboutAboutCardsComponentImageDataModel
 */
export interface IAboutAboutCardsComponentImageDataModel {
    /**
     * 
     * @type {number}
     * @memberof IAboutAboutCardsComponentImageDataModel
     */
    'id'?: number;
    /**
     * 
     * @type {IAboutAboutCardsComponentImageDataAttributesModel}
     * @memberof IAboutAboutCardsComponentImageDataModel
     */
    'attributes'?: IAboutAboutCardsComponentImageDataAttributesModel;
}
/**
 * 
 * @export
 * @interface IAboutAboutCardsComponentImageModel
 */
export interface IAboutAboutCardsComponentImageModel {
    /**
     * 
     * @type {IAboutAboutCardsComponentImageDataModel}
     * @memberof IAboutAboutCardsComponentImageModel
     */
    'data'?: IAboutAboutCardsComponentImageDataModel;
}
/**
 * 
 * @export
 * @interface IAboutAboutCardsComponentModel
 */
export interface IAboutAboutCardsComponentModel {
    /**
     * 
     * @type {number}
     * @memberof IAboutAboutCardsComponentModel
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof IAboutAboutCardsComponentModel
     */
    'Header'?: string;
    /**
     * 
     * @type {Array<IAboutAboutCardsComponentCardsInnerModel>}
     * @memberof IAboutAboutCardsComponentModel
     */
    'Cards'?: Array<IAboutAboutCardsComponentCardsInnerModel>;
    /**
     * 
     * @type {IAboutAboutCardsComponentImageModel}
     * @memberof IAboutAboutCardsComponentModel
     */
    'Image'?: IAboutAboutCardsComponentImageModel;
}
/**
 * 
 * @export
 * @interface IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesModel
 */
export interface IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesModel {
    /**
     * 
     * @type {string}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesModel
     */
    'firstname'?: string;
    /**
     * 
     * @type {string}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesModel
     */
    'lastname'?: string;
    /**
     * 
     * @type {string}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesModel
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesModel
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesModel
     */
    'resetPasswordToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesModel
     */
    'registrationToken'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesModel
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesModel}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesModel
     */
    'roles'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesModel;
    /**
     * 
     * @type {boolean}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesModel
     */
    'blocked'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesModel
     */
    'preferedLanguage'?: string;
    /**
     * 
     * @type {string}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesModel
     */
    'createdBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesModel
     */
    'updatedBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
}
/**
 * 
 * @export
 * @interface IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesModel
 */
export interface IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesModel {
    /**
     * 
     * @type {string}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesModel
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesModel
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesModel
     */
    'description'?: string;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsersModel}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesModel
     */
    'users'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsersModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsModel}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesModel
     */
    'permissions'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsModel;
    /**
     * 
     * @type {string}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesModel
     */
    'createdBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesModel
     */
    'updatedBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
}
/**
 * 
 * @export
 * @interface IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesModel
 */
export interface IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesModel {
    /**
     * 
     * @type {string}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesModel
     */
    'action'?: string;
    /**
     * 
     * @type {string}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesModel
     */
    'subject'?: string;
    /**
     * 
     * @type {any}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesModel
     */
    'properties'?: any;
    /**
     * 
     * @type {any}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesModel
     */
    'conditions'?: any;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesModel
     */
    'role'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
    /**
     * 
     * @type {string}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesModel
     */
    'createdBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesModel
     */
    'updatedBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
}
/**
 * 
 * @export
 * @interface IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel
 */
export interface IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel {
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsersDataInnerModel}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel
     */
    'data'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsersDataInnerModel;
}
/**
 * 
 * @export
 * @interface IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerModel
 */
export interface IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerModel {
    /**
     * 
     * @type {number}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerModel
     */
    'id'?: number;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesModel}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerModel
     */
    'attributes'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesModel;
}
/**
 * 
 * @export
 * @interface IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsModel
 */
export interface IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsModel {
    /**
     * 
     * @type {Array<IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerModel>}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsModel
     */
    'data'?: Array<IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerModel>;
}
/**
 * 
 * @export
 * @interface IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsersDataInnerModel
 */
export interface IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsersDataInnerModel {
    /**
     * 
     * @type {number}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsersDataInnerModel
     */
    'id'?: number;
    /**
     * 
     * @type {object}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsersDataInnerModel
     */
    'attributes'?: object;
}
/**
 * 
 * @export
 * @interface IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsersModel
 */
export interface IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsersModel {
    /**
     * 
     * @type {Array<IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsersDataInnerModel>}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsersModel
     */
    'data'?: Array<IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsersDataInnerModel>;
}
/**
 * 
 * @export
 * @interface IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerModel
 */
export interface IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerModel {
    /**
     * 
     * @type {number}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerModel
     */
    'id'?: number;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesModel}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerModel
     */
    'attributes'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesModel;
}
/**
 * 
 * @export
 * @interface IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesModel
 */
export interface IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesModel {
    /**
     * 
     * @type {Array<IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerModel>}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesModel
     */
    'data'?: Array<IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerModel>;
}
/**
 * 
 * @export
 * @interface IAboutPageDetailListResponseDataItemAttributesCreatedByDataModel
 */
export interface IAboutPageDetailListResponseDataItemAttributesCreatedByDataModel {
    /**
     * 
     * @type {number}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataModel
     */
    'id'?: number;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesModel}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByDataModel
     */
    'attributes'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesModel;
}
/**
 * 
 * @export
 * @interface IAboutPageDetailListResponseDataItemAttributesCreatedByModel
 */
export interface IAboutPageDetailListResponseDataItemAttributesCreatedByModel {
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataModel}
     * @memberof IAboutPageDetailListResponseDataItemAttributesCreatedByModel
     */
    'data'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataModel;
}
/**
 * 
 * @export
 * @interface IAboutPageDetailListResponseDataItemAttributesModel
 */
export interface IAboutPageDetailListResponseDataItemAttributesModel {
    /**
     * 
     * @type {IAboutAboutCardsComponentModel}
     * @memberof IAboutPageDetailListResponseDataItemAttributesModel
     */
    'AboutCards'?: IAboutAboutCardsComponentModel;
    /**
     * 
     * @type {IAboutVisionComponentModel}
     * @memberof IAboutPageDetailListResponseDataItemAttributesModel
     */
    'Vision'?: IAboutVisionComponentModel;
    /**
     * 
     * @type {IAboutTeamComponentModel}
     * @memberof IAboutPageDetailListResponseDataItemAttributesModel
     */
    'Team'?: IAboutTeamComponentModel;
    /**
     * 
     * @type {string}
     * @memberof IAboutPageDetailListResponseDataItemAttributesModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IAboutPageDetailListResponseDataItemAttributesModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IAboutPageDetailListResponseDataItemAttributesModel
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByModel}
     * @memberof IAboutPageDetailListResponseDataItemAttributesModel
     */
    'createdBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IAboutPageDetailListResponseDataItemAttributesModel
     */
    'updatedBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
}
/**
 * 
 * @export
 * @interface IAboutPageDetailListResponseDataItemLocalizedModel
 */
export interface IAboutPageDetailListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IAboutPageDetailListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesModel}
     * @memberof IAboutPageDetailListResponseDataItemLocalizedModel
     */
    'attributes'?: IAboutPageDetailListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IAboutPageDetailListResponseDataItemModel
 */
export interface IAboutPageDetailListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof IAboutPageDetailListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesModel}
     * @memberof IAboutPageDetailListResponseDataItemModel
     */
    'attributes'?: IAboutPageDetailListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IAboutPageDetailListResponseMetaModel
 */
export interface IAboutPageDetailListResponseMetaModel {
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaPaginationModel}
     * @memberof IAboutPageDetailListResponseMetaModel
     */
    'pagination'?: IAboutPageDetailListResponseMetaPaginationModel;
}
/**
 * 
 * @export
 * @interface IAboutPageDetailListResponseMetaPaginationModel
 */
export interface IAboutPageDetailListResponseMetaPaginationModel {
    /**
     * 
     * @type {number}
     * @memberof IAboutPageDetailListResponseMetaPaginationModel
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof IAboutPageDetailListResponseMetaPaginationModel
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof IAboutPageDetailListResponseMetaPaginationModel
     */
    'pageCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof IAboutPageDetailListResponseMetaPaginationModel
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface IAboutPageDetailListResponseModel
 */
export interface IAboutPageDetailListResponseModel {
    /**
     * 
     * @type {Array<IAboutPageDetailListResponseDataItemModel>}
     * @memberof IAboutPageDetailListResponseModel
     */
    'data'?: Array<IAboutPageDetailListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof IAboutPageDetailListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * 
 * @export
 * @interface IAboutPageDetailRequestDataModel
 */
export interface IAboutPageDetailRequestDataModel {
    /**
     * 
     * @type {IAboutAboutCardsComponentModel}
     * @memberof IAboutPageDetailRequestDataModel
     */
    'AboutCards'?: IAboutAboutCardsComponentModel;
    /**
     * 
     * @type {IAboutVisionComponentModel}
     * @memberof IAboutPageDetailRequestDataModel
     */
    'Vision'?: IAboutVisionComponentModel;
    /**
     * 
     * @type {IAboutTeamComponentModel}
     * @memberof IAboutPageDetailRequestDataModel
     */
    'Team'?: IAboutTeamComponentModel;
}
/**
 * 
 * @export
 * @interface IAboutPageDetailRequestModel
 */
export interface IAboutPageDetailRequestModel {
    /**
     * 
     * @type {IAboutPageDetailRequestDataModel}
     * @memberof IAboutPageDetailRequestModel
     */
    'data': IAboutPageDetailRequestDataModel;
}
/**
 * 
 * @export
 * @interface IAboutPageDetailResponseDataObjectLocalizedModel
 */
export interface IAboutPageDetailResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IAboutPageDetailResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesModel}
     * @memberof IAboutPageDetailResponseDataObjectLocalizedModel
     */
    'attributes'?: IAboutPageDetailListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IAboutPageDetailResponseDataObjectModel
 */
export interface IAboutPageDetailResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof IAboutPageDetailResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesModel}
     * @memberof IAboutPageDetailResponseDataObjectModel
     */
    'attributes'?: IAboutPageDetailListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IAboutPageDetailResponseModel
 */
export interface IAboutPageDetailResponseModel {
    /**
     * 
     * @type {IAboutPageDetailResponseDataObjectModel}
     * @memberof IAboutPageDetailResponseModel
     */
    'data'?: IAboutPageDetailResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof IAboutPageDetailResponseModel
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface IAboutTeamComponentModel
 */
export interface IAboutTeamComponentModel {
    /**
     * 
     * @type {number}
     * @memberof IAboutTeamComponentModel
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof IAboutTeamComponentModel
     */
    'Header'?: string;
    /**
     * 
     * @type {string}
     * @memberof IAboutTeamComponentModel
     */
    'SubHeader'?: string;
    /**
     * 
     * @type {Array<IAboutTeamComponentTeamMemberInnerModel>}
     * @memberof IAboutTeamComponentModel
     */
    'TeamMember'?: Array<IAboutTeamComponentTeamMemberInnerModel>;
}
/**
 * 
 * @export
 * @interface IAboutTeamComponentTeamMemberInnerModel
 */
export interface IAboutTeamComponentTeamMemberInnerModel {
    /**
     * 
     * @type {number}
     * @memberof IAboutTeamComponentTeamMemberInnerModel
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof IAboutTeamComponentTeamMemberInnerModel
     */
    'Name'?: string;
    /**
     * 
     * @type {string}
     * @memberof IAboutTeamComponentTeamMemberInnerModel
     */
    'Job'?: string;
    /**
     * 
     * @type {string}
     * @memberof IAboutTeamComponentTeamMemberInnerModel
     */
    'Description'?: string;
    /**
     * 
     * @type {IAboutAboutCardsComponentImageModel}
     * @memberof IAboutTeamComponentTeamMemberInnerModel
     */
    'Image'?: IAboutAboutCardsComponentImageModel;
}
/**
 * 
 * @export
 * @interface IAboutVisionComponentModel
 */
export interface IAboutVisionComponentModel {
    /**
     * 
     * @type {number}
     * @memberof IAboutVisionComponentModel
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof IAboutVisionComponentModel
     */
    'Header'?: string;
    /**
     * 
     * @type {string}
     * @memberof IAboutVisionComponentModel
     */
    'SubHeader'?: string;
    /**
     * 
     * @type {IAboutAboutCardsComponentImageModel}
     * @memberof IAboutVisionComponentModel
     */
    'Image'?: IAboutAboutCardsComponentImageModel;
    /**
     * 
     * @type {Array<IAboutVisionComponentVisionItemInnerModel>}
     * @memberof IAboutVisionComponentModel
     */
    'VisionItem'?: Array<IAboutVisionComponentVisionItemInnerModel>;
}
/**
 * 
 * @export
 * @interface IAboutVisionComponentVisionItemInnerModel
 */
export interface IAboutVisionComponentVisionItemInnerModel {
    /**
     * 
     * @type {number}
     * @memberof IAboutVisionComponentVisionItemInnerModel
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof IAboutVisionComponentVisionItemInnerModel
     */
    'Description'?: string;
}
/**
 * 
 * @export
 * @interface IAirportTransportationServiceListResponseDataItemAttributesGalleryModel
 */
export interface IAirportTransportationServiceListResponseDataItemAttributesGalleryModel {
    /**
     * 
     * @type {Array<IAboutAboutCardsComponentImageDataModel>}
     * @memberof IAirportTransportationServiceListResponseDataItemAttributesGalleryModel
     */
    'data'?: Array<IAboutAboutCardsComponentImageDataModel>;
}
/**
 * 
 * @export
 * @interface IAirportTransportationServiceListResponseDataItemAttributesModel
 */
export interface IAirportTransportationServiceListResponseDataItemAttributesModel {
    /**
     * 
     * @type {string}
     * @memberof IAirportTransportationServiceListResponseDataItemAttributesModel
     */
    'Name'?: string;
    /**
     * 
     * @type {IGeneralInfoPagesFirstGeneralCardsComponentModel}
     * @memberof IAirportTransportationServiceListResponseDataItemAttributesModel
     */
    'Card'?: IGeneralInfoPagesFirstGeneralCardsComponentModel;
    /**
     * 
     * @type {IGeneralInfoPagesOverviewsComponentModel}
     * @memberof IAirportTransportationServiceListResponseDataItemAttributesModel
     */
    'Overview'?: IGeneralInfoPagesOverviewsComponentModel;
    /**
     * 
     * @type {Array<IGeneralInfoPagesReviewsComponentModel>}
     * @memberof IAirportTransportationServiceListResponseDataItemAttributesModel
     */
    'Reviews'?: Array<IGeneralInfoPagesReviewsComponentModel>;
    /**
     * 
     * @type {Array<IGeneralInfoPagesFaQsComponentModel>}
     * @memberof IAirportTransportationServiceListResponseDataItemAttributesModel
     */
    'FAQ'?: Array<IGeneralInfoPagesFaQsComponentModel>;
    /**
     * 
     * @type {IAirportTransportationServiceListResponseDataItemAttributesGalleryModel}
     * @memberof IAirportTransportationServiceListResponseDataItemAttributesModel
     */
    'Gallery'?: IAirportTransportationServiceListResponseDataItemAttributesGalleryModel;
    /**
     * 
     * @type {string}
     * @memberof IAirportTransportationServiceListResponseDataItemAttributesModel
     */
    'Type'?: IAirportTransportationServiceListResponseDataItemAttributesModelTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof IAirportTransportationServiceListResponseDataItemAttributesModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IAirportTransportationServiceListResponseDataItemAttributesModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IAirportTransportationServiceListResponseDataItemAttributesModel
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByModel}
     * @memberof IAirportTransportationServiceListResponseDataItemAttributesModel
     */
    'createdBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IAirportTransportationServiceListResponseDataItemAttributesModel
     */
    'updatedBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
}

export const IAirportTransportationServiceListResponseDataItemAttributesModelTypeEnum = {
    Sedan: 'Sedan'
} as const;

export type IAirportTransportationServiceListResponseDataItemAttributesModelTypeEnum = typeof IAirportTransportationServiceListResponseDataItemAttributesModelTypeEnum[keyof typeof IAirportTransportationServiceListResponseDataItemAttributesModelTypeEnum];

/**
 * 
 * @export
 * @interface IAirportTransportationServiceListResponseDataItemLocalizedModel
 */
export interface IAirportTransportationServiceListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IAirportTransportationServiceListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IAirportTransportationServiceListResponseDataItemAttributesModel}
     * @memberof IAirportTransportationServiceListResponseDataItemLocalizedModel
     */
    'attributes'?: IAirportTransportationServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IAirportTransportationServiceListResponseDataItemModel
 */
export interface IAirportTransportationServiceListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof IAirportTransportationServiceListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {IAirportTransportationServiceListResponseDataItemAttributesModel}
     * @memberof IAirportTransportationServiceListResponseDataItemModel
     */
    'attributes'?: IAirportTransportationServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IAirportTransportationServiceListResponseModel
 */
export interface IAirportTransportationServiceListResponseModel {
    /**
     * 
     * @type {Array<IAirportTransportationServiceListResponseDataItemModel>}
     * @memberof IAirportTransportationServiceListResponseModel
     */
    'data'?: Array<IAirportTransportationServiceListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof IAirportTransportationServiceListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * @type IAirportTransportationServiceRequestDataGalleryInnerModel
 * @export
 */
export type IAirportTransportationServiceRequestDataGalleryInnerModel = number | string;

/**
 * 
 * @export
 * @interface IAirportTransportationServiceRequestDataModel
 */
export interface IAirportTransportationServiceRequestDataModel {
    /**
     * 
     * @type {string}
     * @memberof IAirportTransportationServiceRequestDataModel
     */
    'Name'?: string;
    /**
     * 
     * @type {IGeneralInfoPagesFirstGeneralCardsComponentModel}
     * @memberof IAirportTransportationServiceRequestDataModel
     */
    'Card'?: IGeneralInfoPagesFirstGeneralCardsComponentModel;
    /**
     * 
     * @type {IGeneralInfoPagesOverviewsComponentModel}
     * @memberof IAirportTransportationServiceRequestDataModel
     */
    'Overview'?: IGeneralInfoPagesOverviewsComponentModel;
    /**
     * 
     * @type {Array<IGeneralInfoPagesReviewsComponentModel>}
     * @memberof IAirportTransportationServiceRequestDataModel
     */
    'Reviews'?: Array<IGeneralInfoPagesReviewsComponentModel>;
    /**
     * 
     * @type {Array<IGeneralInfoPagesFaQsComponentModel>}
     * @memberof IAirportTransportationServiceRequestDataModel
     */
    'FAQ'?: Array<IGeneralInfoPagesFaQsComponentModel>;
    /**
     * 
     * @type {Array<IAirportTransportationServiceRequestDataGalleryInnerModel>}
     * @memberof IAirportTransportationServiceRequestDataModel
     */
    'Gallery'?: Array<IAirportTransportationServiceRequestDataGalleryInnerModel>;
    /**
     * 
     * @type {string}
     * @memberof IAirportTransportationServiceRequestDataModel
     */
    'Type'?: IAirportTransportationServiceRequestDataModelTypeEnum;
}

export const IAirportTransportationServiceRequestDataModelTypeEnum = {
    Sedan: 'Sedan'
} as const;

export type IAirportTransportationServiceRequestDataModelTypeEnum = typeof IAirportTransportationServiceRequestDataModelTypeEnum[keyof typeof IAirportTransportationServiceRequestDataModelTypeEnum];

/**
 * 
 * @export
 * @interface IAirportTransportationServiceRequestModel
 */
export interface IAirportTransportationServiceRequestModel {
    /**
     * 
     * @type {IAirportTransportationServiceRequestDataModel}
     * @memberof IAirportTransportationServiceRequestModel
     */
    'data': IAirportTransportationServiceRequestDataModel;
}
/**
 * 
 * @export
 * @interface IAirportTransportationServiceResponseDataObjectLocalizedModel
 */
export interface IAirportTransportationServiceResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IAirportTransportationServiceResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IAirportTransportationServiceListResponseDataItemAttributesModel}
     * @memberof IAirportTransportationServiceResponseDataObjectLocalizedModel
     */
    'attributes'?: IAirportTransportationServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IAirportTransportationServiceResponseDataObjectModel
 */
export interface IAirportTransportationServiceResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof IAirportTransportationServiceResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {IAirportTransportationServiceListResponseDataItemAttributesModel}
     * @memberof IAirportTransportationServiceResponseDataObjectModel
     */
    'attributes'?: IAirportTransportationServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IAirportTransportationServiceResponseModel
 */
export interface IAirportTransportationServiceResponseModel {
    /**
     * 
     * @type {IAirportTransportationServiceResponseDataObjectModel}
     * @memberof IAirportTransportationServiceResponseModel
     */
    'data'?: IAirportTransportationServiceResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof IAirportTransportationServiceResponseModel
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface IBusServiceListResponseDataItemAttributesModel
 */
export interface IBusServiceListResponseDataItemAttributesModel {
    /**
     * 
     * @type {string}
     * @memberof IBusServiceListResponseDataItemAttributesModel
     */
    'Name'?: string;
    /**
     * 
     * @type {IGeneralInfoPagesFirstGeneralCardsComponentModel}
     * @memberof IBusServiceListResponseDataItemAttributesModel
     */
    'Card'?: IGeneralInfoPagesFirstGeneralCardsComponentModel;
    /**
     * 
     * @type {IGeneralInfoPagesOverviewsComponentModel}
     * @memberof IBusServiceListResponseDataItemAttributesModel
     */
    'Overview'?: IGeneralInfoPagesOverviewsComponentModel;
    /**
     * 
     * @type {Array<IGeneralInfoPagesReviewsComponentModel>}
     * @memberof IBusServiceListResponseDataItemAttributesModel
     */
    'Reviews'?: Array<IGeneralInfoPagesReviewsComponentModel>;
    /**
     * 
     * @type {Array<IGeneralInfoPagesFaQsComponentModel>}
     * @memberof IBusServiceListResponseDataItemAttributesModel
     */
    'FAQ'?: Array<IGeneralInfoPagesFaQsComponentModel>;
    /**
     * 
     * @type {IAirportTransportationServiceListResponseDataItemAttributesGalleryModel}
     * @memberof IBusServiceListResponseDataItemAttributesModel
     */
    'Gallery'?: IAirportTransportationServiceListResponseDataItemAttributesGalleryModel;
    /**
     * 
     * @type {string}
     * @memberof IBusServiceListResponseDataItemAttributesModel
     */
    'MoreInfo'?: string;
    /**
     * 
     * @type {string}
     * @memberof IBusServiceListResponseDataItemAttributesModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IBusServiceListResponseDataItemAttributesModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IBusServiceListResponseDataItemAttributesModel
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByModel}
     * @memberof IBusServiceListResponseDataItemAttributesModel
     */
    'createdBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IBusServiceListResponseDataItemAttributesModel
     */
    'updatedBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
}
/**
 * 
 * @export
 * @interface IBusServiceListResponseDataItemLocalizedModel
 */
export interface IBusServiceListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IBusServiceListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IBusServiceListResponseDataItemAttributesModel}
     * @memberof IBusServiceListResponseDataItemLocalizedModel
     */
    'attributes'?: IBusServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IBusServiceListResponseDataItemModel
 */
export interface IBusServiceListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof IBusServiceListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {IBusServiceListResponseDataItemAttributesModel}
     * @memberof IBusServiceListResponseDataItemModel
     */
    'attributes'?: IBusServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IBusServiceListResponseModel
 */
export interface IBusServiceListResponseModel {
    /**
     * 
     * @type {Array<IBusServiceListResponseDataItemModel>}
     * @memberof IBusServiceListResponseModel
     */
    'data'?: Array<IBusServiceListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof IBusServiceListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * 
 * @export
 * @interface IBusServiceRequestDataModel
 */
export interface IBusServiceRequestDataModel {
    /**
     * 
     * @type {string}
     * @memberof IBusServiceRequestDataModel
     */
    'Name'?: string;
    /**
     * 
     * @type {IGeneralInfoPagesFirstGeneralCardsComponentModel}
     * @memberof IBusServiceRequestDataModel
     */
    'Card'?: IGeneralInfoPagesFirstGeneralCardsComponentModel;
    /**
     * 
     * @type {IGeneralInfoPagesOverviewsComponentModel}
     * @memberof IBusServiceRequestDataModel
     */
    'Overview'?: IGeneralInfoPagesOverviewsComponentModel;
    /**
     * 
     * @type {Array<IGeneralInfoPagesReviewsComponentModel>}
     * @memberof IBusServiceRequestDataModel
     */
    'Reviews'?: Array<IGeneralInfoPagesReviewsComponentModel>;
    /**
     * 
     * @type {Array<IGeneralInfoPagesFaQsComponentModel>}
     * @memberof IBusServiceRequestDataModel
     */
    'FAQ'?: Array<IGeneralInfoPagesFaQsComponentModel>;
    /**
     * 
     * @type {Array<IAirportTransportationServiceRequestDataGalleryInnerModel>}
     * @memberof IBusServiceRequestDataModel
     */
    'Gallery'?: Array<IAirportTransportationServiceRequestDataGalleryInnerModel>;
    /**
     * 
     * @type {string}
     * @memberof IBusServiceRequestDataModel
     */
    'MoreInfo'?: string;
}
/**
 * 
 * @export
 * @interface IBusServiceRequestModel
 */
export interface IBusServiceRequestModel {
    /**
     * 
     * @type {IBusServiceRequestDataModel}
     * @memberof IBusServiceRequestModel
     */
    'data': IBusServiceRequestDataModel;
}
/**
 * 
 * @export
 * @interface IBusServiceResponseDataObjectLocalizedModel
 */
export interface IBusServiceResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IBusServiceResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IBusServiceListResponseDataItemAttributesModel}
     * @memberof IBusServiceResponseDataObjectLocalizedModel
     */
    'attributes'?: IBusServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IBusServiceResponseDataObjectModel
 */
export interface IBusServiceResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof IBusServiceResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {IBusServiceListResponseDataItemAttributesModel}
     * @memberof IBusServiceResponseDataObjectModel
     */
    'attributes'?: IBusServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IBusServiceResponseModel
 */
export interface IBusServiceResponseModel {
    /**
     * 
     * @type {IBusServiceResponseDataObjectModel}
     * @memberof IBusServiceResponseModel
     */
    'data'?: IBusServiceResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof IBusServiceResponseModel
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface IBusinessTravelListResponseDataItemAttributesModel
 */
export interface IBusinessTravelListResponseDataItemAttributesModel {
    /**
     * 
     * @type {string}
     * @memberof IBusinessTravelListResponseDataItemAttributesModel
     */
    'Name'?: string;
    /**
     * 
     * @type {string}
     * @memberof IBusinessTravelListResponseDataItemAttributesModel
     */
    'Season'?: IBusinessTravelListResponseDataItemAttributesModelSeasonEnum;
    /**
     * 
     * @type {IAirportTransportationServiceListResponseDataItemAttributesGalleryModel}
     * @memberof IBusinessTravelListResponseDataItemAttributesModel
     */
    'Gallery'?: IAirportTransportationServiceListResponseDataItemAttributesGalleryModel;
    /**
     * 
     * @type {string}
     * @memberof IBusinessTravelListResponseDataItemAttributesModel
     */
    'StartTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof IBusinessTravelListResponseDataItemAttributesModel
     */
    'EndTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof IBusinessTravelListResponseDataItemAttributesModel
     */
    'Description'?: string;
    /**
     * 
     * @type {IGeneralInfoPagesFirstGeneralCardsComponentModel}
     * @memberof IBusinessTravelListResponseDataItemAttributesModel
     */
    'Card'?: IGeneralInfoPagesFirstGeneralCardsComponentModel;
    /**
     * 
     * @type {IGeneralInfoPagesOverviewsComponentModel}
     * @memberof IBusinessTravelListResponseDataItemAttributesModel
     */
    'Overview'?: IGeneralInfoPagesOverviewsComponentModel;
    /**
     * 
     * @type {string}
     * @memberof IBusinessTravelListResponseDataItemAttributesModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IBusinessTravelListResponseDataItemAttributesModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IBusinessTravelListResponseDataItemAttributesModel
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByModel}
     * @memberof IBusinessTravelListResponseDataItemAttributesModel
     */
    'createdBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IBusinessTravelListResponseDataItemAttributesModel
     */
    'updatedBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
}

export const IBusinessTravelListResponseDataItemAttributesModelSeasonEnum = {
    Spring: 'Spring'
} as const;

export type IBusinessTravelListResponseDataItemAttributesModelSeasonEnum = typeof IBusinessTravelListResponseDataItemAttributesModelSeasonEnum[keyof typeof IBusinessTravelListResponseDataItemAttributesModelSeasonEnum];

/**
 * 
 * @export
 * @interface IBusinessTravelListResponseDataItemLocalizedModel
 */
export interface IBusinessTravelListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IBusinessTravelListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IBusinessTravelListResponseDataItemAttributesModel}
     * @memberof IBusinessTravelListResponseDataItemLocalizedModel
     */
    'attributes'?: IBusinessTravelListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IBusinessTravelListResponseDataItemModel
 */
export interface IBusinessTravelListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof IBusinessTravelListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {IBusinessTravelListResponseDataItemAttributesModel}
     * @memberof IBusinessTravelListResponseDataItemModel
     */
    'attributes'?: IBusinessTravelListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IBusinessTravelListResponseModel
 */
export interface IBusinessTravelListResponseModel {
    /**
     * 
     * @type {Array<IBusinessTravelListResponseDataItemModel>}
     * @memberof IBusinessTravelListResponseModel
     */
    'data'?: Array<IBusinessTravelListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof IBusinessTravelListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * 
 * @export
 * @interface IBusinessTravelRequestDataModel
 */
export interface IBusinessTravelRequestDataModel {
    /**
     * 
     * @type {string}
     * @memberof IBusinessTravelRequestDataModel
     */
    'Name'?: string;
    /**
     * 
     * @type {string}
     * @memberof IBusinessTravelRequestDataModel
     */
    'Season'?: IBusinessTravelRequestDataModelSeasonEnum;
    /**
     * 
     * @type {Array<IAirportTransportationServiceRequestDataGalleryInnerModel>}
     * @memberof IBusinessTravelRequestDataModel
     */
    'Gallery'?: Array<IAirportTransportationServiceRequestDataGalleryInnerModel>;
    /**
     * 
     * @type {string}
     * @memberof IBusinessTravelRequestDataModel
     */
    'StartTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof IBusinessTravelRequestDataModel
     */
    'EndTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof IBusinessTravelRequestDataModel
     */
    'Description'?: string;
    /**
     * 
     * @type {IGeneralInfoPagesFirstGeneralCardsComponentModel}
     * @memberof IBusinessTravelRequestDataModel
     */
    'Card'?: IGeneralInfoPagesFirstGeneralCardsComponentModel;
    /**
     * 
     * @type {IGeneralInfoPagesOverviewsComponentModel}
     * @memberof IBusinessTravelRequestDataModel
     */
    'Overview'?: IGeneralInfoPagesOverviewsComponentModel;
}

export const IBusinessTravelRequestDataModelSeasonEnum = {
    Spring: 'Spring'
} as const;

export type IBusinessTravelRequestDataModelSeasonEnum = typeof IBusinessTravelRequestDataModelSeasonEnum[keyof typeof IBusinessTravelRequestDataModelSeasonEnum];

/**
 * 
 * @export
 * @interface IBusinessTravelRequestModel
 */
export interface IBusinessTravelRequestModel {
    /**
     * 
     * @type {IBusinessTravelRequestDataModel}
     * @memberof IBusinessTravelRequestModel
     */
    'data': IBusinessTravelRequestDataModel;
}
/**
 * 
 * @export
 * @interface IBusinessTravelResponseDataObjectLocalizedModel
 */
export interface IBusinessTravelResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IBusinessTravelResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IBusinessTravelListResponseDataItemAttributesModel}
     * @memberof IBusinessTravelResponseDataObjectLocalizedModel
     */
    'attributes'?: IBusinessTravelListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IBusinessTravelResponseDataObjectModel
 */
export interface IBusinessTravelResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof IBusinessTravelResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {IBusinessTravelListResponseDataItemAttributesModel}
     * @memberof IBusinessTravelResponseDataObjectModel
     */
    'attributes'?: IBusinessTravelListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IBusinessTravelResponseModel
 */
export interface IBusinessTravelResponseModel {
    /**
     * 
     * @type {IBusinessTravelResponseDataObjectModel}
     * @memberof IBusinessTravelResponseModel
     */
    'data'?: IBusinessTravelResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof IBusinessTravelResponseModel
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface ICipInternationalAirportServiceListResponseDataItemAttributesModel
 */
export interface ICipInternationalAirportServiceListResponseDataItemAttributesModel {
    /**
     * 
     * @type {string}
     * @memberof ICipInternationalAirportServiceListResponseDataItemAttributesModel
     */
    'Name'?: string;
    /**
     * 
     * @type {IGeneralInfoPagesFirstGeneralCardsComponentModel}
     * @memberof ICipInternationalAirportServiceListResponseDataItemAttributesModel
     */
    'Card'?: IGeneralInfoPagesFirstGeneralCardsComponentModel;
    /**
     * 
     * @type {IGeneralInfoPagesOverviewsComponentModel}
     * @memberof ICipInternationalAirportServiceListResponseDataItemAttributesModel
     */
    'Overview'?: IGeneralInfoPagesOverviewsComponentModel;
    /**
     * 
     * @type {Array<IGeneralInfoPagesReviewsComponentModel>}
     * @memberof ICipInternationalAirportServiceListResponseDataItemAttributesModel
     */
    'Reviews'?: Array<IGeneralInfoPagesReviewsComponentModel>;
    /**
     * 
     * @type {Array<IGeneralInfoPagesFaQsComponentModel>}
     * @memberof ICipInternationalAirportServiceListResponseDataItemAttributesModel
     */
    'FAQ'?: Array<IGeneralInfoPagesFaQsComponentModel>;
    /**
     * 
     * @type {IAirportTransportationServiceListResponseDataItemAttributesGalleryModel}
     * @memberof ICipInternationalAirportServiceListResponseDataItemAttributesModel
     */
    'Gallery'?: IAirportTransportationServiceListResponseDataItemAttributesGalleryModel;
    /**
     * 
     * @type {string}
     * @memberof ICipInternationalAirportServiceListResponseDataItemAttributesModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ICipInternationalAirportServiceListResponseDataItemAttributesModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ICipInternationalAirportServiceListResponseDataItemAttributesModel
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByModel}
     * @memberof ICipInternationalAirportServiceListResponseDataItemAttributesModel
     */
    'createdBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof ICipInternationalAirportServiceListResponseDataItemAttributesModel
     */
    'updatedBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
}
/**
 * 
 * @export
 * @interface ICipInternationalAirportServiceListResponseDataItemLocalizedModel
 */
export interface ICipInternationalAirportServiceListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof ICipInternationalAirportServiceListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {ICipInternationalAirportServiceListResponseDataItemAttributesModel}
     * @memberof ICipInternationalAirportServiceListResponseDataItemLocalizedModel
     */
    'attributes'?: ICipInternationalAirportServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ICipInternationalAirportServiceListResponseDataItemModel
 */
export interface ICipInternationalAirportServiceListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof ICipInternationalAirportServiceListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {ICipInternationalAirportServiceListResponseDataItemAttributesModel}
     * @memberof ICipInternationalAirportServiceListResponseDataItemModel
     */
    'attributes'?: ICipInternationalAirportServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ICipInternationalAirportServiceListResponseModel
 */
export interface ICipInternationalAirportServiceListResponseModel {
    /**
     * 
     * @type {Array<ICipInternationalAirportServiceListResponseDataItemModel>}
     * @memberof ICipInternationalAirportServiceListResponseModel
     */
    'data'?: Array<ICipInternationalAirportServiceListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof ICipInternationalAirportServiceListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * 
 * @export
 * @interface ICipInternationalAirportServiceRequestDataModel
 */
export interface ICipInternationalAirportServiceRequestDataModel {
    /**
     * 
     * @type {string}
     * @memberof ICipInternationalAirportServiceRequestDataModel
     */
    'Name'?: string;
    /**
     * 
     * @type {IGeneralInfoPagesFirstGeneralCardsComponentModel}
     * @memberof ICipInternationalAirportServiceRequestDataModel
     */
    'Card'?: IGeneralInfoPagesFirstGeneralCardsComponentModel;
    /**
     * 
     * @type {IGeneralInfoPagesOverviewsComponentModel}
     * @memberof ICipInternationalAirportServiceRequestDataModel
     */
    'Overview'?: IGeneralInfoPagesOverviewsComponentModel;
    /**
     * 
     * @type {Array<IGeneralInfoPagesReviewsComponentModel>}
     * @memberof ICipInternationalAirportServiceRequestDataModel
     */
    'Reviews'?: Array<IGeneralInfoPagesReviewsComponentModel>;
    /**
     * 
     * @type {Array<IGeneralInfoPagesFaQsComponentModel>}
     * @memberof ICipInternationalAirportServiceRequestDataModel
     */
    'FAQ'?: Array<IGeneralInfoPagesFaQsComponentModel>;
    /**
     * 
     * @type {Array<IAirportTransportationServiceRequestDataGalleryInnerModel>}
     * @memberof ICipInternationalAirportServiceRequestDataModel
     */
    'Gallery'?: Array<IAirportTransportationServiceRequestDataGalleryInnerModel>;
}
/**
 * 
 * @export
 * @interface ICipInternationalAirportServiceRequestModel
 */
export interface ICipInternationalAirportServiceRequestModel {
    /**
     * 
     * @type {ICipInternationalAirportServiceRequestDataModel}
     * @memberof ICipInternationalAirportServiceRequestModel
     */
    'data': ICipInternationalAirportServiceRequestDataModel;
}
/**
 * 
 * @export
 * @interface ICipInternationalAirportServiceResponseDataObjectLocalizedModel
 */
export interface ICipInternationalAirportServiceResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof ICipInternationalAirportServiceResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {ICipInternationalAirportServiceListResponseDataItemAttributesModel}
     * @memberof ICipInternationalAirportServiceResponseDataObjectLocalizedModel
     */
    'attributes'?: ICipInternationalAirportServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ICipInternationalAirportServiceResponseDataObjectModel
 */
export interface ICipInternationalAirportServiceResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof ICipInternationalAirportServiceResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {ICipInternationalAirportServiceListResponseDataItemAttributesModel}
     * @memberof ICipInternationalAirportServiceResponseDataObjectModel
     */
    'attributes'?: ICipInternationalAirportServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ICipInternationalAirportServiceResponseModel
 */
export interface ICipInternationalAirportServiceResponseModel {
    /**
     * 
     * @type {ICipInternationalAirportServiceResponseDataObjectModel}
     * @memberof ICipInternationalAirportServiceResponseModel
     */
    'data'?: ICipInternationalAirportServiceResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof ICipInternationalAirportServiceResponseModel
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface IComponentPagesHighlightAttractionsComponentModel
 */
export interface IComponentPagesHighlightAttractionsComponentModel {
    /**
     * 
     * @type {number}
     * @memberof IComponentPagesHighlightAttractionsComponentModel
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof IComponentPagesHighlightAttractionsComponentModel
     */
    'Title'?: string;
    /**
     * 
     * @type {string}
     * @memberof IComponentPagesHighlightAttractionsComponentModel
     */
    'Description'?: string;
}
/**
 * 
 * @export
 * @interface IComponentPagesTourCitiesComponentModel
 */
export interface IComponentPagesTourCitiesComponentModel {
    /**
     * 
     * @type {number}
     * @memberof IComponentPagesTourCitiesComponentModel
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof IComponentPagesTourCitiesComponentModel
     */
    'CityName'?: string;
}
/**
 * 
 * @export
 * @interface IComponentPagesTourExperiencesComponentModel
 */
export interface IComponentPagesTourExperiencesComponentModel {
    /**
     * 
     * @type {number}
     * @memberof IComponentPagesTourExperiencesComponentModel
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof IComponentPagesTourExperiencesComponentModel
     */
    'Experience'?: string;
}
/**
 * 
 * @export
 * @interface IComponentPagesTourItineraryComponentModel
 */
export interface IComponentPagesTourItineraryComponentModel {
    /**
     * 
     * @type {number}
     * @memberof IComponentPagesTourItineraryComponentModel
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof IComponentPagesTourItineraryComponentModel
     */
    'Day'?: number;
    /**
     * 
     * @type {string}
     * @memberof IComponentPagesTourItineraryComponentModel
     */
    'ExcursionNote'?: string;
    /**
     * 
     * @type {IAirportTransportationServiceListResponseDataItemAttributesGalleryModel}
     * @memberof IComponentPagesTourItineraryComponentModel
     */
    'Picture'?: IAirportTransportationServiceListResponseDataItemAttributesGalleryModel;
}
/**
 * 
 * @export
 * @interface IComponentPagesTourPictureComponentModel
 */
export interface IComponentPagesTourPictureComponentModel {
    /**
     * 
     * @type {number}
     * @memberof IComponentPagesTourPictureComponentModel
     */
    'id'?: number;
    /**
     * 
     * @type {IAboutAboutCardsComponentImageModel}
     * @memberof IComponentPagesTourPictureComponentModel
     */
    'Picure'?: IAboutAboutCardsComponentImageModel;
    /**
     * 
     * @type {string}
     * @memberof IComponentPagesTourPictureComponentModel
     */
    'Description'?: string;
}
/**
 * 
 * @export
 * @interface IComponentPagesTourServicesComponentModel
 */
export interface IComponentPagesTourServicesComponentModel {
    /**
     * 
     * @type {number}
     * @memberof IComponentPagesTourServicesComponentModel
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof IComponentPagesTourServicesComponentModel
     */
    'Service'?: string;
}
/**
 * 
 * @export
 * @interface IDailyTourListResponseDataItemAttributesModel
 */
export interface IDailyTourListResponseDataItemAttributesModel {
    /**
     * 
     * @type {string}
     * @memberof IDailyTourListResponseDataItemAttributesModel
     */
    'Name'?: string;
    /**
     * 
     * @type {string}
     * @memberof IDailyTourListResponseDataItemAttributesModel
     */
    'Destination'?: IDailyTourListResponseDataItemAttributesModelDestinationEnum;
    /**
     * 
     * @type {IGeneralInfoPagesFirstGeneralCardsComponentModel}
     * @memberof IDailyTourListResponseDataItemAttributesModel
     */
    'Card'?: IGeneralInfoPagesFirstGeneralCardsComponentModel;
    /**
     * 
     * @type {IGeneralInfoPagesOverviewsComponentModel}
     * @memberof IDailyTourListResponseDataItemAttributesModel
     */
    'Overview'?: IGeneralInfoPagesOverviewsComponentModel;
    /**
     * 
     * @type {Array<IGeneralInfoPagesReviewsComponentModel>}
     * @memberof IDailyTourListResponseDataItemAttributesModel
     */
    'Reviews'?: Array<IGeneralInfoPagesReviewsComponentModel>;
    /**
     * 
     * @type {string}
     * @memberof IDailyTourListResponseDataItemAttributesModel
     */
    'StartTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof IDailyTourListResponseDataItemAttributesModel
     */
    'EndTime'?: string;
    /**
     * 
     * @type {Array<IComponentPagesTourExperiencesComponentModel>}
     * @memberof IDailyTourListResponseDataItemAttributesModel
     */
    'Experiences'?: Array<IComponentPagesTourExperiencesComponentModel>;
    /**
     * 
     * @type {Array<IComponentPagesTourItineraryComponentModel>}
     * @memberof IDailyTourListResponseDataItemAttributesModel
     */
    'Itinerary'?: Array<IComponentPagesTourItineraryComponentModel>;
    /**
     * 
     * @type {Array<IComponentPagesTourServicesComponentModel>}
     * @memberof IDailyTourListResponseDataItemAttributesModel
     */
    'Services'?: Array<IComponentPagesTourServicesComponentModel>;
    /**
     * 
     * @type {IComponentPagesHighlightAttractionsComponentModel}
     * @memberof IDailyTourListResponseDataItemAttributesModel
     */
    'HighlightAttraction'?: IComponentPagesHighlightAttractionsComponentModel;
    /**
     * 
     * @type {IAirportTransportationServiceListResponseDataItemAttributesGalleryModel}
     * @memberof IDailyTourListResponseDataItemAttributesModel
     */
    'Gallery'?: IAirportTransportationServiceListResponseDataItemAttributesGalleryModel;
    /**
     * 
     * @type {IComponentPagesTourCitiesComponentModel}
     * @memberof IDailyTourListResponseDataItemAttributesModel
     */
    'Cities'?: IComponentPagesTourCitiesComponentModel;
    /**
     * 
     * @type {string}
     * @memberof IDailyTourListResponseDataItemAttributesModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IDailyTourListResponseDataItemAttributesModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IDailyTourListResponseDataItemAttributesModel
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByModel}
     * @memberof IDailyTourListResponseDataItemAttributesModel
     */
    'createdBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IDailyTourListResponseDataItemAttributesModel
     */
    'updatedBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
}

export const IDailyTourListResponseDataItemAttributesModelDestinationEnum = {
    Tehran: 'Tehran'
} as const;

export type IDailyTourListResponseDataItemAttributesModelDestinationEnum = typeof IDailyTourListResponseDataItemAttributesModelDestinationEnum[keyof typeof IDailyTourListResponseDataItemAttributesModelDestinationEnum];

/**
 * 
 * @export
 * @interface IDailyTourListResponseDataItemLocalizedModel
 */
export interface IDailyTourListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IDailyTourListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IDailyTourListResponseDataItemAttributesModel}
     * @memberof IDailyTourListResponseDataItemLocalizedModel
     */
    'attributes'?: IDailyTourListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IDailyTourListResponseDataItemModel
 */
export interface IDailyTourListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof IDailyTourListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {IDailyTourListResponseDataItemAttributesModel}
     * @memberof IDailyTourListResponseDataItemModel
     */
    'attributes'?: IDailyTourListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IDailyTourListResponseModel
 */
export interface IDailyTourListResponseModel {
    /**
     * 
     * @type {Array<IDailyTourListResponseDataItemModel>}
     * @memberof IDailyTourListResponseModel
     */
    'data'?: Array<IDailyTourListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof IDailyTourListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * 
 * @export
 * @interface IDailyTourRequestDataModel
 */
export interface IDailyTourRequestDataModel {
    /**
     * 
     * @type {string}
     * @memberof IDailyTourRequestDataModel
     */
    'Name'?: string;
    /**
     * 
     * @type {string}
     * @memberof IDailyTourRequestDataModel
     */
    'Destination'?: IDailyTourRequestDataModelDestinationEnum;
    /**
     * 
     * @type {IGeneralInfoPagesFirstGeneralCardsComponentModel}
     * @memberof IDailyTourRequestDataModel
     */
    'Card'?: IGeneralInfoPagesFirstGeneralCardsComponentModel;
    /**
     * 
     * @type {IGeneralInfoPagesOverviewsComponentModel}
     * @memberof IDailyTourRequestDataModel
     */
    'Overview'?: IGeneralInfoPagesOverviewsComponentModel;
    /**
     * 
     * @type {Array<IGeneralInfoPagesReviewsComponentModel>}
     * @memberof IDailyTourRequestDataModel
     */
    'Reviews'?: Array<IGeneralInfoPagesReviewsComponentModel>;
    /**
     * 
     * @type {string}
     * @memberof IDailyTourRequestDataModel
     */
    'StartTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof IDailyTourRequestDataModel
     */
    'EndTime'?: string;
    /**
     * 
     * @type {Array<IComponentPagesTourExperiencesComponentModel>}
     * @memberof IDailyTourRequestDataModel
     */
    'Experiences'?: Array<IComponentPagesTourExperiencesComponentModel>;
    /**
     * 
     * @type {Array<IComponentPagesTourItineraryComponentModel>}
     * @memberof IDailyTourRequestDataModel
     */
    'Itinerary'?: Array<IComponentPagesTourItineraryComponentModel>;
    /**
     * 
     * @type {Array<IComponentPagesTourServicesComponentModel>}
     * @memberof IDailyTourRequestDataModel
     */
    'Services'?: Array<IComponentPagesTourServicesComponentModel>;
    /**
     * 
     * @type {IComponentPagesHighlightAttractionsComponentModel}
     * @memberof IDailyTourRequestDataModel
     */
    'HighlightAttraction'?: IComponentPagesHighlightAttractionsComponentModel;
    /**
     * 
     * @type {Array<IAirportTransportationServiceRequestDataGalleryInnerModel>}
     * @memberof IDailyTourRequestDataModel
     */
    'Gallery'?: Array<IAirportTransportationServiceRequestDataGalleryInnerModel>;
    /**
     * 
     * @type {IComponentPagesTourCitiesComponentModel}
     * @memberof IDailyTourRequestDataModel
     */
    'Cities'?: IComponentPagesTourCitiesComponentModel;
}

export const IDailyTourRequestDataModelDestinationEnum = {
    Tehran: 'Tehran'
} as const;

export type IDailyTourRequestDataModelDestinationEnum = typeof IDailyTourRequestDataModelDestinationEnum[keyof typeof IDailyTourRequestDataModelDestinationEnum];

/**
 * 
 * @export
 * @interface IDailyTourRequestModel
 */
export interface IDailyTourRequestModel {
    /**
     * 
     * @type {IDailyTourRequestDataModel}
     * @memberof IDailyTourRequestModel
     */
    'data': IDailyTourRequestDataModel;
}
/**
 * 
 * @export
 * @interface IDailyTourResponseDataObjectLocalizedModel
 */
export interface IDailyTourResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IDailyTourResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IDailyTourListResponseDataItemAttributesModel}
     * @memberof IDailyTourResponseDataObjectLocalizedModel
     */
    'attributes'?: IDailyTourListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IDailyTourResponseDataObjectModel
 */
export interface IDailyTourResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof IDailyTourResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {IDailyTourListResponseDataItemAttributesModel}
     * @memberof IDailyTourResponseDataObjectModel
     */
    'attributes'?: IDailyTourListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IDailyTourResponseModel
 */
export interface IDailyTourResponseModel {
    /**
     * 
     * @type {IDailyTourResponseDataObjectModel}
     * @memberof IDailyTourResponseModel
     */
    'data'?: IDailyTourResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof IDailyTourResponseModel
     */
    'meta'?: object;
}
/**
 * @type IErrorDataModel
 * @export
 */
export type IErrorDataModel = Array | object;

/**
 * 
 * @export
 * @interface IErrorErrorModel
 */
export interface IErrorErrorModel {
    /**
     * 
     * @type {number}
     * @memberof IErrorErrorModel
     */
    'status'?: number;
    /**
     * 
     * @type {string}
     * @memberof IErrorErrorModel
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof IErrorErrorModel
     */
    'message'?: string;
    /**
     * 
     * @type {object}
     * @memberof IErrorErrorModel
     */
    'details'?: object;
}
/**
 * 
 * @export
 * @interface IErrorModel
 */
export interface IErrorModel {
    /**
     * 
     * @type {IErrorDataModel}
     * @memberof IErrorModel
     */
    'data'?: IErrorDataModel | null;
    /**
     * 
     * @type {IErrorErrorModel}
     * @memberof IErrorModel
     */
    'error': IErrorErrorModel;
}
/**
 * 
 * @export
 * @interface IFlightServiceListResponseDataItemAttributesModel
 */
export interface IFlightServiceListResponseDataItemAttributesModel {
    /**
     * 
     * @type {string}
     * @memberof IFlightServiceListResponseDataItemAttributesModel
     */
    'Name'?: string;
    /**
     * 
     * @type {IGeneralInfoPagesFirstGeneralCardsComponentModel}
     * @memberof IFlightServiceListResponseDataItemAttributesModel
     */
    'Card'?: IGeneralInfoPagesFirstGeneralCardsComponentModel;
    /**
     * 
     * @type {IGeneralInfoPagesOverviewsComponentModel}
     * @memberof IFlightServiceListResponseDataItemAttributesModel
     */
    'Overview'?: IGeneralInfoPagesOverviewsComponentModel;
    /**
     * 
     * @type {Array<IGeneralInfoPagesReviewsComponentModel>}
     * @memberof IFlightServiceListResponseDataItemAttributesModel
     */
    'Reviewd'?: Array<IGeneralInfoPagesReviewsComponentModel>;
    /**
     * 
     * @type {Array<IGeneralInfoPagesFaQsComponentModel>}
     * @memberof IFlightServiceListResponseDataItemAttributesModel
     */
    'FAQ'?: Array<IGeneralInfoPagesFaQsComponentModel>;
    /**
     * 
     * @type {IAirportTransportationServiceListResponseDataItemAttributesGalleryModel}
     * @memberof IFlightServiceListResponseDataItemAttributesModel
     */
    'Gallery'?: IAirportTransportationServiceListResponseDataItemAttributesGalleryModel;
    /**
     * 
     * @type {string}
     * @memberof IFlightServiceListResponseDataItemAttributesModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IFlightServiceListResponseDataItemAttributesModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IFlightServiceListResponseDataItemAttributesModel
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByModel}
     * @memberof IFlightServiceListResponseDataItemAttributesModel
     */
    'createdBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IFlightServiceListResponseDataItemAttributesModel
     */
    'updatedBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
}
/**
 * 
 * @export
 * @interface IFlightServiceListResponseDataItemLocalizedModel
 */
export interface IFlightServiceListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IFlightServiceListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IFlightServiceListResponseDataItemAttributesModel}
     * @memberof IFlightServiceListResponseDataItemLocalizedModel
     */
    'attributes'?: IFlightServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IFlightServiceListResponseDataItemModel
 */
export interface IFlightServiceListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof IFlightServiceListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {IFlightServiceListResponseDataItemAttributesModel}
     * @memberof IFlightServiceListResponseDataItemModel
     */
    'attributes'?: IFlightServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IFlightServiceListResponseModel
 */
export interface IFlightServiceListResponseModel {
    /**
     * 
     * @type {Array<IFlightServiceListResponseDataItemModel>}
     * @memberof IFlightServiceListResponseModel
     */
    'data'?: Array<IFlightServiceListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof IFlightServiceListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * 
 * @export
 * @interface IFlightServiceRequestDataModel
 */
export interface IFlightServiceRequestDataModel {
    /**
     * 
     * @type {string}
     * @memberof IFlightServiceRequestDataModel
     */
    'Name'?: string;
    /**
     * 
     * @type {IGeneralInfoPagesFirstGeneralCardsComponentModel}
     * @memberof IFlightServiceRequestDataModel
     */
    'Card'?: IGeneralInfoPagesFirstGeneralCardsComponentModel;
    /**
     * 
     * @type {IGeneralInfoPagesOverviewsComponentModel}
     * @memberof IFlightServiceRequestDataModel
     */
    'Overview'?: IGeneralInfoPagesOverviewsComponentModel;
    /**
     * 
     * @type {Array<IGeneralInfoPagesReviewsComponentModel>}
     * @memberof IFlightServiceRequestDataModel
     */
    'Reviewd'?: Array<IGeneralInfoPagesReviewsComponentModel>;
    /**
     * 
     * @type {Array<IGeneralInfoPagesFaQsComponentModel>}
     * @memberof IFlightServiceRequestDataModel
     */
    'FAQ'?: Array<IGeneralInfoPagesFaQsComponentModel>;
    /**
     * 
     * @type {Array<IAirportTransportationServiceRequestDataGalleryInnerModel>}
     * @memberof IFlightServiceRequestDataModel
     */
    'Gallery'?: Array<IAirportTransportationServiceRequestDataGalleryInnerModel>;
}
/**
 * 
 * @export
 * @interface IFlightServiceRequestModel
 */
export interface IFlightServiceRequestModel {
    /**
     * 
     * @type {IFlightServiceRequestDataModel}
     * @memberof IFlightServiceRequestModel
     */
    'data': IFlightServiceRequestDataModel;
}
/**
 * 
 * @export
 * @interface IFlightServiceResponseDataObjectLocalizedModel
 */
export interface IFlightServiceResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IFlightServiceResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IFlightServiceListResponseDataItemAttributesModel}
     * @memberof IFlightServiceResponseDataObjectLocalizedModel
     */
    'attributes'?: IFlightServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IFlightServiceResponseDataObjectModel
 */
export interface IFlightServiceResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof IFlightServiceResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {IFlightServiceListResponseDataItemAttributesModel}
     * @memberof IFlightServiceResponseDataObjectModel
     */
    'attributes'?: IFlightServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IFlightServiceResponseModel
 */
export interface IFlightServiceResponseModel {
    /**
     * 
     * @type {IFlightServiceResponseDataObjectModel}
     * @memberof IFlightServiceResponseModel
     */
    'data'?: IFlightServiceResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof IFlightServiceResponseModel
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface IGeneralInfoPagesFaQsComponentModel
 */
export interface IGeneralInfoPagesFaQsComponentModel {
    /**
     * 
     * @type {number}
     * @memberof IGeneralInfoPagesFaQsComponentModel
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof IGeneralInfoPagesFaQsComponentModel
     */
    'Question'?: string;
    /**
     * 
     * @type {string}
     * @memberof IGeneralInfoPagesFaQsComponentModel
     */
    'Respose'?: string;
}
/**
 * 
 * @export
 * @interface IGeneralInfoPagesFirstGeneralCardsComponentCardTextInnerModel
 */
export interface IGeneralInfoPagesFirstGeneralCardsComponentCardTextInnerModel {
    /**
     * 
     * @type {number}
     * @memberof IGeneralInfoPagesFirstGeneralCardsComponentCardTextInnerModel
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof IGeneralInfoPagesFirstGeneralCardsComponentCardTextInnerModel
     */
    'Title'?: string;
}
/**
 * 
 * @export
 * @interface IGeneralInfoPagesFirstGeneralCardsComponentModel
 */
export interface IGeneralInfoPagesFirstGeneralCardsComponentModel {
    /**
     * 
     * @type {number}
     * @memberof IGeneralInfoPagesFirstGeneralCardsComponentModel
     */
    'id'?: number;
    /**
     * 
     * @type {IAirportTransportationServiceListResponseDataItemAttributesGalleryModel}
     * @memberof IGeneralInfoPagesFirstGeneralCardsComponentModel
     */
    'CardImage'?: IAirportTransportationServiceListResponseDataItemAttributesGalleryModel;
    /**
     * 
     * @type {string}
     * @memberof IGeneralInfoPagesFirstGeneralCardsComponentModel
     */
    'CardTitle'?: string;
    /**
     * 
     * @type {string}
     * @memberof IGeneralInfoPagesFirstGeneralCardsComponentModel
     */
    'CardDescription'?: string;
    /**
     * 
     * @type {number}
     * @memberof IGeneralInfoPagesFirstGeneralCardsComponentModel
     */
    'CardStar'?: number;
    /**
     * 
     * @type {Array<IGeneralInfoPagesFirstGeneralCardsComponentCardTextInnerModel>}
     * @memberof IGeneralInfoPagesFirstGeneralCardsComponentModel
     */
    'CardText'?: Array<IGeneralInfoPagesFirstGeneralCardsComponentCardTextInnerModel>;
    /**
     * 
     * @type {string}
     * @memberof IGeneralInfoPagesFirstGeneralCardsComponentModel
     */
    'CardSeason'?: string;
}
/**
 * 
 * @export
 * @interface IGeneralInfoPagesGeneralInfoPagesComponentBannerInnerModel
 */
export interface IGeneralInfoPagesGeneralInfoPagesComponentBannerInnerModel {
    /**
     * 
     * @type {number}
     * @memberof IGeneralInfoPagesGeneralInfoPagesComponentBannerInnerModel
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof IGeneralInfoPagesGeneralInfoPagesComponentBannerInnerModel
     */
    'BannerTitle'?: string;
    /**
     * 
     * @type {IAirportTransportationServiceListResponseDataItemAttributesGalleryModel}
     * @memberof IGeneralInfoPagesGeneralInfoPagesComponentBannerInnerModel
     */
    'BannerPicture'?: IAirportTransportationServiceListResponseDataItemAttributesGalleryModel;
    /**
     * 
     * @type {string}
     * @memberof IGeneralInfoPagesGeneralInfoPagesComponentBannerInnerModel
     */
    'BannerDescription'?: string;
}
/**
 * 
 * @export
 * @interface IGeneralInfoPagesGeneralInfoPagesComponentModel
 */
export interface IGeneralInfoPagesGeneralInfoPagesComponentModel {
    /**
     * 
     * @type {number}
     * @memberof IGeneralInfoPagesGeneralInfoPagesComponentModel
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof IGeneralInfoPagesGeneralInfoPagesComponentModel
     */
    'PageTitle'?: string;
    /**
     * 
     * @type {string}
     * @memberof IGeneralInfoPagesGeneralInfoPagesComponentModel
     */
    'MetaDescription'?: string;
    /**
     * 
     * @type {Array<IGeneralInfoPagesGeneralInfoPagesComponentBannerInnerModel>}
     * @memberof IGeneralInfoPagesGeneralInfoPagesComponentModel
     */
    'Banner'?: Array<IGeneralInfoPagesGeneralInfoPagesComponentBannerInnerModel>;
    /**
     * 
     * @type {string}
     * @memberof IGeneralInfoPagesGeneralInfoPagesComponentModel
     */
    'DescritionPage'?: string;
    /**
     * 
     * @type {IAirportTransportationServiceListResponseDataItemAttributesGalleryModel}
     * @memberof IGeneralInfoPagesGeneralInfoPagesComponentModel
     */
    'Gallery'?: IAirportTransportationServiceListResponseDataItemAttributesGalleryModel;
}
/**
 * 
 * @export
 * @interface IGeneralInfoPagesGeneralRequestsComponentModel
 */
export interface IGeneralInfoPagesGeneralRequestsComponentModel {
    /**
     * 
     * @type {number}
     * @memberof IGeneralInfoPagesGeneralRequestsComponentModel
     */
    'id'?: number;
    /**
     * 
     * @type {any}
     * @memberof IGeneralInfoPagesGeneralRequestsComponentModel
     */
    'Identifiers'?: any;
}
/**
 * 
 * @export
 * @interface IGeneralInfoPagesOverviewsComponentModel
 */
export interface IGeneralInfoPagesOverviewsComponentModel {
    /**
     * 
     * @type {number}
     * @memberof IGeneralInfoPagesOverviewsComponentModel
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof IGeneralInfoPagesOverviewsComponentModel
     */
    'OverviewDescription'?: string;
}
/**
 * 
 * @export
 * @interface IGeneralInfoPagesReviewsComponentModel
 */
export interface IGeneralInfoPagesReviewsComponentModel {
    /**
     * 
     * @type {number}
     * @memberof IGeneralInfoPagesReviewsComponentModel
     */
    'id'?: number;
    /**
     * 
     * @type {IAboutAboutCardsComponentImageModel}
     * @memberof IGeneralInfoPagesReviewsComponentModel
     */
    'PictureReviewer'?: IAboutAboutCardsComponentImageModel;
    /**
     * 
     * @type {string}
     * @memberof IGeneralInfoPagesReviewsComponentModel
     */
    'NameReviewer'?: string;
    /**
     * 
     * @type {number}
     * @memberof IGeneralInfoPagesReviewsComponentModel
     */
    'StarsReviewer'?: number;
    /**
     * 
     * @type {string}
     * @memberof IGeneralInfoPagesReviewsComponentModel
     */
    'Title'?: string;
    /**
     * 
     * @type {string}
     * @memberof IGeneralInfoPagesReviewsComponentModel
     */
    'DescriptionReviewer'?: string;
}
/**
 * 
 * @export
 * @interface IHomePageDetailListResponseDataItemAttributesModel
 */
export interface IHomePageDetailListResponseDataItemAttributesModel {
    /**
     * 
     * @type {Array<IHomePageHomeCardBannersComponentModel>}
     * @memberof IHomePageDetailListResponseDataItemAttributesModel
     */
    'HomeCardBanner'?: Array<IHomePageHomeCardBannersComponentModel>;
    /**
     * 
     * @type {string}
     * @memberof IHomePageDetailListResponseDataItemAttributesModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IHomePageDetailListResponseDataItemAttributesModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByModel}
     * @memberof IHomePageDetailListResponseDataItemAttributesModel
     */
    'createdBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IHomePageDetailListResponseDataItemAttributesModel
     */
    'updatedBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
}
/**
 * 
 * @export
 * @interface IHomePageDetailListResponseDataItemLocalizedModel
 */
export interface IHomePageDetailListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IHomePageDetailListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IHomePageDetailListResponseDataItemAttributesModel}
     * @memberof IHomePageDetailListResponseDataItemLocalizedModel
     */
    'attributes'?: IHomePageDetailListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IHomePageDetailListResponseDataItemModel
 */
export interface IHomePageDetailListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof IHomePageDetailListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {IHomePageDetailListResponseDataItemAttributesModel}
     * @memberof IHomePageDetailListResponseDataItemModel
     */
    'attributes'?: IHomePageDetailListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IHomePageDetailListResponseModel
 */
export interface IHomePageDetailListResponseModel {
    /**
     * 
     * @type {Array<IHomePageDetailListResponseDataItemModel>}
     * @memberof IHomePageDetailListResponseModel
     */
    'data'?: Array<IHomePageDetailListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof IHomePageDetailListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * 
 * @export
 * @interface IHomePageDetailRequestDataModel
 */
export interface IHomePageDetailRequestDataModel {
    /**
     * 
     * @type {Array<IHomePageHomeCardBannersComponentModel>}
     * @memberof IHomePageDetailRequestDataModel
     */
    'HomeCardBanner'?: Array<IHomePageHomeCardBannersComponentModel>;
}
/**
 * 
 * @export
 * @interface IHomePageDetailRequestModel
 */
export interface IHomePageDetailRequestModel {
    /**
     * 
     * @type {IHomePageDetailRequestDataModel}
     * @memberof IHomePageDetailRequestModel
     */
    'data': IHomePageDetailRequestDataModel;
}
/**
 * 
 * @export
 * @interface IHomePageDetailResponseDataObjectLocalizedModel
 */
export interface IHomePageDetailResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IHomePageDetailResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IHomePageDetailListResponseDataItemAttributesModel}
     * @memberof IHomePageDetailResponseDataObjectLocalizedModel
     */
    'attributes'?: IHomePageDetailListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IHomePageDetailResponseDataObjectModel
 */
export interface IHomePageDetailResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof IHomePageDetailResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {IHomePageDetailListResponseDataItemAttributesModel}
     * @memberof IHomePageDetailResponseDataObjectModel
     */
    'attributes'?: IHomePageDetailListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IHomePageDetailResponseModel
 */
export interface IHomePageDetailResponseModel {
    /**
     * 
     * @type {IHomePageDetailResponseDataObjectModel}
     * @memberof IHomePageDetailResponseModel
     */
    'data'?: IHomePageDetailResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof IHomePageDetailResponseModel
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface IHomePageHomeCardBannersComponentLinkModel
 */
export interface IHomePageHomeCardBannersComponentLinkModel {
    /**
     * 
     * @type {number}
     * @memberof IHomePageHomeCardBannersComponentLinkModel
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof IHomePageHomeCardBannersComponentLinkModel
     */
    'Text'?: string;
    /**
     * 
     * @type {string}
     * @memberof IHomePageHomeCardBannersComponentLinkModel
     */
    'Link'?: string;
}
/**
 * 
 * @export
 * @interface IHomePageHomeCardBannersComponentModel
 */
export interface IHomePageHomeCardBannersComponentModel {
    /**
     * 
     * @type {number}
     * @memberof IHomePageHomeCardBannersComponentModel
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof IHomePageHomeCardBannersComponentModel
     */
    'Title'?: string;
    /**
     * 
     * @type {string}
     * @memberof IHomePageHomeCardBannersComponentModel
     */
    'SubTitle'?: string;
    /**
     * 
     * @type {string}
     * @memberof IHomePageHomeCardBannersComponentModel
     */
    'Description'?: string;
    /**
     * 
     * @type {IHomePageHomeCardBannersComponentLinkModel}
     * @memberof IHomePageHomeCardBannersComponentModel
     */
    'Link'?: IHomePageHomeCardBannersComponentLinkModel;
    /**
     * 
     * @type {IAboutAboutCardsComponentImageModel}
     * @memberof IHomePageHomeCardBannersComponentModel
     */
    'Banner'?: IAboutAboutCardsComponentImageModel;
}
/**
 * 
 * @export
 * @interface IHotelServiceListResponseDataItemAttributesModel
 */
export interface IHotelServiceListResponseDataItemAttributesModel {
    /**
     * 
     * @type {string}
     * @memberof IHotelServiceListResponseDataItemAttributesModel
     */
    'Name'?: string;
    /**
     * 
     * @type {IGeneralInfoPagesFirstGeneralCardsComponentModel}
     * @memberof IHotelServiceListResponseDataItemAttributesModel
     */
    'Card'?: IGeneralInfoPagesFirstGeneralCardsComponentModel;
    /**
     * 
     * @type {IGeneralInfoPagesOverviewsComponentModel}
     * @memberof IHotelServiceListResponseDataItemAttributesModel
     */
    'Overview'?: IGeneralInfoPagesOverviewsComponentModel;
    /**
     * 
     * @type {Array<IGeneralInfoPagesReviewsComponentModel>}
     * @memberof IHotelServiceListResponseDataItemAttributesModel
     */
    'Reviews'?: Array<IGeneralInfoPagesReviewsComponentModel>;
    /**
     * 
     * @type {Array<IGeneralInfoPagesFaQsComponentModel>}
     * @memberof IHotelServiceListResponseDataItemAttributesModel
     */
    'FAQ'?: Array<IGeneralInfoPagesFaQsComponentModel>;
    /**
     * 
     * @type {boolean}
     * @memberof IHotelServiceListResponseDataItemAttributesModel
     */
    'IsTraditional'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IHotelServiceListResponseDataItemAttributesModel
     */
    'Location'?: string;
    /**
     * 
     * @type {IAirportTransportationServiceListResponseDataItemAttributesGalleryModel}
     * @memberof IHotelServiceListResponseDataItemAttributesModel
     */
    'Gallery'?: IAirportTransportationServiceListResponseDataItemAttributesGalleryModel;
    /**
     * 
     * @type {IComponentPagesTourCitiesComponentModel}
     * @memberof IHotelServiceListResponseDataItemAttributesModel
     */
    'Cities'?: IComponentPagesTourCitiesComponentModel;
    /**
     * 
     * @type {string}
     * @memberof IHotelServiceListResponseDataItemAttributesModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IHotelServiceListResponseDataItemAttributesModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IHotelServiceListResponseDataItemAttributesModel
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByModel}
     * @memberof IHotelServiceListResponseDataItemAttributesModel
     */
    'createdBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IHotelServiceListResponseDataItemAttributesModel
     */
    'updatedBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
}
/**
 * 
 * @export
 * @interface IHotelServiceListResponseDataItemLocalizedModel
 */
export interface IHotelServiceListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IHotelServiceListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IHotelServiceListResponseDataItemAttributesModel}
     * @memberof IHotelServiceListResponseDataItemLocalizedModel
     */
    'attributes'?: IHotelServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IHotelServiceListResponseDataItemModel
 */
export interface IHotelServiceListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof IHotelServiceListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {IHotelServiceListResponseDataItemAttributesModel}
     * @memberof IHotelServiceListResponseDataItemModel
     */
    'attributes'?: IHotelServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IHotelServiceListResponseModel
 */
export interface IHotelServiceListResponseModel {
    /**
     * 
     * @type {Array<IHotelServiceListResponseDataItemModel>}
     * @memberof IHotelServiceListResponseModel
     */
    'data'?: Array<IHotelServiceListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof IHotelServiceListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * 
 * @export
 * @interface IHotelServiceRequestDataModel
 */
export interface IHotelServiceRequestDataModel {
    /**
     * 
     * @type {string}
     * @memberof IHotelServiceRequestDataModel
     */
    'Name'?: string;
    /**
     * 
     * @type {IGeneralInfoPagesFirstGeneralCardsComponentModel}
     * @memberof IHotelServiceRequestDataModel
     */
    'Card'?: IGeneralInfoPagesFirstGeneralCardsComponentModel;
    /**
     * 
     * @type {IGeneralInfoPagesOverviewsComponentModel}
     * @memberof IHotelServiceRequestDataModel
     */
    'Overview'?: IGeneralInfoPagesOverviewsComponentModel;
    /**
     * 
     * @type {Array<IGeneralInfoPagesReviewsComponentModel>}
     * @memberof IHotelServiceRequestDataModel
     */
    'Reviews'?: Array<IGeneralInfoPagesReviewsComponentModel>;
    /**
     * 
     * @type {Array<IGeneralInfoPagesFaQsComponentModel>}
     * @memberof IHotelServiceRequestDataModel
     */
    'FAQ'?: Array<IGeneralInfoPagesFaQsComponentModel>;
    /**
     * 
     * @type {boolean}
     * @memberof IHotelServiceRequestDataModel
     */
    'IsTraditional'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IHotelServiceRequestDataModel
     */
    'Location'?: string;
    /**
     * 
     * @type {Array<IAirportTransportationServiceRequestDataGalleryInnerModel>}
     * @memberof IHotelServiceRequestDataModel
     */
    'Gallery'?: Array<IAirportTransportationServiceRequestDataGalleryInnerModel>;
    /**
     * 
     * @type {IComponentPagesTourCitiesComponentModel}
     * @memberof IHotelServiceRequestDataModel
     */
    'Cities'?: IComponentPagesTourCitiesComponentModel;
}
/**
 * 
 * @export
 * @interface IHotelServiceRequestModel
 */
export interface IHotelServiceRequestModel {
    /**
     * 
     * @type {IHotelServiceRequestDataModel}
     * @memberof IHotelServiceRequestModel
     */
    'data': IHotelServiceRequestDataModel;
}
/**
 * 
 * @export
 * @interface IHotelServiceResponseDataObjectLocalizedModel
 */
export interface IHotelServiceResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IHotelServiceResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IHotelServiceListResponseDataItemAttributesModel}
     * @memberof IHotelServiceResponseDataObjectLocalizedModel
     */
    'attributes'?: IHotelServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IHotelServiceResponseDataObjectModel
 */
export interface IHotelServiceResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof IHotelServiceResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {IHotelServiceListResponseDataItemAttributesModel}
     * @memberof IHotelServiceResponseDataObjectModel
     */
    'attributes'?: IHotelServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IHotelServiceResponseModel
 */
export interface IHotelServiceResponseModel {
    /**
     * 
     * @type {IHotelServiceResponseDataObjectModel}
     * @memberof IHotelServiceResponseModel
     */
    'data'?: IHotelServiceResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof IHotelServiceResponseModel
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface IIranVisaInfoListResponseDataItemAttributesModel
 */
export interface IIranVisaInfoListResponseDataItemAttributesModel {
    /**
     * 
     * @type {IGeneralInfoPagesGeneralInfoPagesComponentModel}
     * @memberof IIranVisaInfoListResponseDataItemAttributesModel
     */
    'InfoPage'?: IGeneralInfoPagesGeneralInfoPagesComponentModel;
    /**
     * 
     * @type {string}
     * @memberof IIranVisaInfoListResponseDataItemAttributesModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IIranVisaInfoListResponseDataItemAttributesModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IIranVisaInfoListResponseDataItemAttributesModel
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByModel}
     * @memberof IIranVisaInfoListResponseDataItemAttributesModel
     */
    'createdBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IIranVisaInfoListResponseDataItemAttributesModel
     */
    'updatedBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
}
/**
 * 
 * @export
 * @interface IIranVisaInfoListResponseDataItemLocalizedModel
 */
export interface IIranVisaInfoListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IIranVisaInfoListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof IIranVisaInfoListResponseDataItemLocalizedModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IIranVisaInfoListResponseDataItemModel
 */
export interface IIranVisaInfoListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof IIranVisaInfoListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof IIranVisaInfoListResponseDataItemModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IIranVisaInfoListResponseModel
 */
export interface IIranVisaInfoListResponseModel {
    /**
     * 
     * @type {Array<IIranVisaInfoListResponseDataItemModel>}
     * @memberof IIranVisaInfoListResponseModel
     */
    'data'?: Array<IIranVisaInfoListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof IIranVisaInfoListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * 
 * @export
 * @interface IIranVisaInfoRequestDataModel
 */
export interface IIranVisaInfoRequestDataModel {
    /**
     * 
     * @type {IGeneralInfoPagesGeneralInfoPagesComponentModel}
     * @memberof IIranVisaInfoRequestDataModel
     */
    'InfoPage'?: IGeneralInfoPagesGeneralInfoPagesComponentModel;
}
/**
 * 
 * @export
 * @interface IIranVisaInfoRequestModel
 */
export interface IIranVisaInfoRequestModel {
    /**
     * 
     * @type {IIranVisaInfoRequestDataModel}
     * @memberof IIranVisaInfoRequestModel
     */
    'data': IIranVisaInfoRequestDataModel;
}
/**
 * 
 * @export
 * @interface IIranVisaInfoResponseDataObjectLocalizedModel
 */
export interface IIranVisaInfoResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IIranVisaInfoResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof IIranVisaInfoResponseDataObjectLocalizedModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IIranVisaInfoResponseDataObjectModel
 */
export interface IIranVisaInfoResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof IIranVisaInfoResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof IIranVisaInfoResponseDataObjectModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IIranVisaInfoResponseModel
 */
export interface IIranVisaInfoResponseModel {
    /**
     * 
     * @type {IIranVisaInfoResponseDataObjectModel}
     * @memberof IIranVisaInfoResponseModel
     */
    'data'?: IIranVisaInfoResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof IIranVisaInfoResponseModel
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface IIranVisaListResponseDataItemAttributesModel
 */
export interface IIranVisaListResponseDataItemAttributesModel {
    /**
     * 
     * @type {string}
     * @memberof IIranVisaListResponseDataItemAttributesModel
     */
    'Name'?: string;
    /**
     * 
     * @type {IGeneralInfoPagesFirstGeneralCardsComponentModel}
     * @memberof IIranVisaListResponseDataItemAttributesModel
     */
    'Card'?: IGeneralInfoPagesFirstGeneralCardsComponentModel;
    /**
     * 
     * @type {string}
     * @memberof IIranVisaListResponseDataItemAttributesModel
     */
    'MoreInfo'?: string;
    /**
     * 
     * @type {string}
     * @memberof IIranVisaListResponseDataItemAttributesModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IIranVisaListResponseDataItemAttributesModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IIranVisaListResponseDataItemAttributesModel
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByModel}
     * @memberof IIranVisaListResponseDataItemAttributesModel
     */
    'createdBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IIranVisaListResponseDataItemAttributesModel
     */
    'updatedBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
}
/**
 * 
 * @export
 * @interface IIranVisaListResponseDataItemLocalizedModel
 */
export interface IIranVisaListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IIranVisaListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaListResponseDataItemAttributesModel}
     * @memberof IIranVisaListResponseDataItemLocalizedModel
     */
    'attributes'?: IIranVisaListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IIranVisaListResponseDataItemModel
 */
export interface IIranVisaListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof IIranVisaListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaListResponseDataItemAttributesModel}
     * @memberof IIranVisaListResponseDataItemModel
     */
    'attributes'?: IIranVisaListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IIranVisaListResponseModel
 */
export interface IIranVisaListResponseModel {
    /**
     * 
     * @type {Array<IIranVisaListResponseDataItemModel>}
     * @memberof IIranVisaListResponseModel
     */
    'data'?: Array<IIranVisaListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof IIranVisaListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * 
 * @export
 * @interface IIranVisaRequestDataModel
 */
export interface IIranVisaRequestDataModel {
    /**
     * 
     * @type {string}
     * @memberof IIranVisaRequestDataModel
     */
    'Name'?: string;
    /**
     * 
     * @type {IGeneralInfoPagesFirstGeneralCardsComponentModel}
     * @memberof IIranVisaRequestDataModel
     */
    'Card'?: IGeneralInfoPagesFirstGeneralCardsComponentModel;
    /**
     * 
     * @type {string}
     * @memberof IIranVisaRequestDataModel
     */
    'MoreInfo'?: string;
}
/**
 * 
 * @export
 * @interface IIranVisaRequestModel
 */
export interface IIranVisaRequestModel {
    /**
     * 
     * @type {IIranVisaRequestDataModel}
     * @memberof IIranVisaRequestModel
     */
    'data': IIranVisaRequestDataModel;
}
/**
 * 
 * @export
 * @interface IIranVisaResponseDataObjectLocalizedModel
 */
export interface IIranVisaResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IIranVisaResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaListResponseDataItemAttributesModel}
     * @memberof IIranVisaResponseDataObjectLocalizedModel
     */
    'attributes'?: IIranVisaListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IIranVisaResponseDataObjectModel
 */
export interface IIranVisaResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof IIranVisaResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaListResponseDataItemAttributesModel}
     * @memberof IIranVisaResponseDataObjectModel
     */
    'attributes'?: IIranVisaListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IIranVisaResponseModel
 */
export interface IIranVisaResponseModel {
    /**
     * 
     * @type {IIranVisaResponseDataObjectModel}
     * @memberof IIranVisaResponseModel
     */
    'data'?: IIranVisaResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof IIranVisaResponseModel
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface IMeetingRoomServiceInfoListResponseDataItemLocalizedModel
 */
export interface IMeetingRoomServiceInfoListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IMeetingRoomServiceInfoListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof IMeetingRoomServiceInfoListResponseDataItemLocalizedModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IMeetingRoomServiceInfoListResponseDataItemModel
 */
export interface IMeetingRoomServiceInfoListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof IMeetingRoomServiceInfoListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof IMeetingRoomServiceInfoListResponseDataItemModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IMeetingRoomServiceInfoListResponseModel
 */
export interface IMeetingRoomServiceInfoListResponseModel {
    /**
     * 
     * @type {Array<IMeetingRoomServiceInfoListResponseDataItemModel>}
     * @memberof IMeetingRoomServiceInfoListResponseModel
     */
    'data'?: Array<IMeetingRoomServiceInfoListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof IMeetingRoomServiceInfoListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * 
 * @export
 * @interface IMeetingRoomServiceInfoRequestModel
 */
export interface IMeetingRoomServiceInfoRequestModel {
    /**
     * 
     * @type {IIranVisaInfoRequestDataModel}
     * @memberof IMeetingRoomServiceInfoRequestModel
     */
    'data': IIranVisaInfoRequestDataModel;
}
/**
 * 
 * @export
 * @interface IMeetingRoomServiceInfoResponseDataObjectLocalizedModel
 */
export interface IMeetingRoomServiceInfoResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IMeetingRoomServiceInfoResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof IMeetingRoomServiceInfoResponseDataObjectLocalizedModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IMeetingRoomServiceInfoResponseDataObjectModel
 */
export interface IMeetingRoomServiceInfoResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof IMeetingRoomServiceInfoResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof IMeetingRoomServiceInfoResponseDataObjectModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IMeetingRoomServiceInfoResponseModel
 */
export interface IMeetingRoomServiceInfoResponseModel {
    /**
     * 
     * @type {IMeetingRoomServiceInfoResponseDataObjectModel}
     * @memberof IMeetingRoomServiceInfoResponseModel
     */
    'data'?: IMeetingRoomServiceInfoResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof IMeetingRoomServiceInfoResponseModel
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface IMeetingRoomServiceListResponseDataItemAttributesModel
 */
export interface IMeetingRoomServiceListResponseDataItemAttributesModel {
    /**
     * 
     * @type {string}
     * @memberof IMeetingRoomServiceListResponseDataItemAttributesModel
     */
    'Name'?: string;
    /**
     * 
     * @type {IGeneralInfoPagesFirstGeneralCardsComponentModel}
     * @memberof IMeetingRoomServiceListResponseDataItemAttributesModel
     */
    'Card'?: IGeneralInfoPagesFirstGeneralCardsComponentModel;
    /**
     * 
     * @type {IGeneralInfoPagesOverviewsComponentModel}
     * @memberof IMeetingRoomServiceListResponseDataItemAttributesModel
     */
    'Overview'?: IGeneralInfoPagesOverviewsComponentModel;
    /**
     * 
     * @type {Array<IGeneralInfoPagesReviewsComponentModel>}
     * @memberof IMeetingRoomServiceListResponseDataItemAttributesModel
     */
    'Reviews'?: Array<IGeneralInfoPagesReviewsComponentModel>;
    /**
     * 
     * @type {Array<IGeneralInfoPagesFaQsComponentModel>}
     * @memberof IMeetingRoomServiceListResponseDataItemAttributesModel
     */
    'FAQ'?: Array<IGeneralInfoPagesFaQsComponentModel>;
    /**
     * 
     * @type {IAirportTransportationServiceListResponseDataItemAttributesGalleryModel}
     * @memberof IMeetingRoomServiceListResponseDataItemAttributesModel
     */
    'Gallery'?: IAirportTransportationServiceListResponseDataItemAttributesGalleryModel;
    /**
     * 
     * @type {IComponentPagesTourCitiesComponentModel}
     * @memberof IMeetingRoomServiceListResponseDataItemAttributesModel
     */
    'Cities'?: IComponentPagesTourCitiesComponentModel;
    /**
     * 
     * @type {string}
     * @memberof IMeetingRoomServiceListResponseDataItemAttributesModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IMeetingRoomServiceListResponseDataItemAttributesModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IMeetingRoomServiceListResponseDataItemAttributesModel
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByModel}
     * @memberof IMeetingRoomServiceListResponseDataItemAttributesModel
     */
    'createdBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IMeetingRoomServiceListResponseDataItemAttributesModel
     */
    'updatedBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
}
/**
 * 
 * @export
 * @interface IMeetingRoomServiceListResponseDataItemLocalizedModel
 */
export interface IMeetingRoomServiceListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IMeetingRoomServiceListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IMeetingRoomServiceListResponseDataItemAttributesModel}
     * @memberof IMeetingRoomServiceListResponseDataItemLocalizedModel
     */
    'attributes'?: IMeetingRoomServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IMeetingRoomServiceListResponseDataItemModel
 */
export interface IMeetingRoomServiceListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof IMeetingRoomServiceListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {IMeetingRoomServiceListResponseDataItemAttributesModel}
     * @memberof IMeetingRoomServiceListResponseDataItemModel
     */
    'attributes'?: IMeetingRoomServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IMeetingRoomServiceListResponseModel
 */
export interface IMeetingRoomServiceListResponseModel {
    /**
     * 
     * @type {Array<IMeetingRoomServiceListResponseDataItemModel>}
     * @memberof IMeetingRoomServiceListResponseModel
     */
    'data'?: Array<IMeetingRoomServiceListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof IMeetingRoomServiceListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * 
 * @export
 * @interface IMeetingRoomServiceRequestDataModel
 */
export interface IMeetingRoomServiceRequestDataModel {
    /**
     * 
     * @type {string}
     * @memberof IMeetingRoomServiceRequestDataModel
     */
    'Name'?: string;
    /**
     * 
     * @type {IGeneralInfoPagesFirstGeneralCardsComponentModel}
     * @memberof IMeetingRoomServiceRequestDataModel
     */
    'Card'?: IGeneralInfoPagesFirstGeneralCardsComponentModel;
    /**
     * 
     * @type {IGeneralInfoPagesOverviewsComponentModel}
     * @memberof IMeetingRoomServiceRequestDataModel
     */
    'Overview'?: IGeneralInfoPagesOverviewsComponentModel;
    /**
     * 
     * @type {Array<IGeneralInfoPagesReviewsComponentModel>}
     * @memberof IMeetingRoomServiceRequestDataModel
     */
    'Reviews'?: Array<IGeneralInfoPagesReviewsComponentModel>;
    /**
     * 
     * @type {Array<IGeneralInfoPagesFaQsComponentModel>}
     * @memberof IMeetingRoomServiceRequestDataModel
     */
    'FAQ'?: Array<IGeneralInfoPagesFaQsComponentModel>;
    /**
     * 
     * @type {Array<IAirportTransportationServiceRequestDataGalleryInnerModel>}
     * @memberof IMeetingRoomServiceRequestDataModel
     */
    'Gallery'?: Array<IAirportTransportationServiceRequestDataGalleryInnerModel>;
    /**
     * 
     * @type {IComponentPagesTourCitiesComponentModel}
     * @memberof IMeetingRoomServiceRequestDataModel
     */
    'Cities'?: IComponentPagesTourCitiesComponentModel;
}
/**
 * 
 * @export
 * @interface IMeetingRoomServiceRequestModel
 */
export interface IMeetingRoomServiceRequestModel {
    /**
     * 
     * @type {IMeetingRoomServiceRequestDataModel}
     * @memberof IMeetingRoomServiceRequestModel
     */
    'data': IMeetingRoomServiceRequestDataModel;
}
/**
 * 
 * @export
 * @interface IMeetingRoomServiceResponseDataObjectLocalizedModel
 */
export interface IMeetingRoomServiceResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IMeetingRoomServiceResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IMeetingRoomServiceListResponseDataItemAttributesModel}
     * @memberof IMeetingRoomServiceResponseDataObjectLocalizedModel
     */
    'attributes'?: IMeetingRoomServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IMeetingRoomServiceResponseDataObjectModel
 */
export interface IMeetingRoomServiceResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof IMeetingRoomServiceResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {IMeetingRoomServiceListResponseDataItemAttributesModel}
     * @memberof IMeetingRoomServiceResponseDataObjectModel
     */
    'attributes'?: IMeetingRoomServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IMeetingRoomServiceResponseModel
 */
export interface IMeetingRoomServiceResponseModel {
    /**
     * 
     * @type {IMeetingRoomServiceResponseDataObjectModel}
     * @memberof IMeetingRoomServiceResponseModel
     */
    'data'?: IMeetingRoomServiceResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof IMeetingRoomServiceResponseModel
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface IPrivateJetServiceInfoListResponseDataItemAttributesModel
 */
export interface IPrivateJetServiceInfoListResponseDataItemAttributesModel {
    /**
     * 
     * @type {Array<IGeneralInfoPagesGeneralInfoPagesComponentModel>}
     * @memberof IPrivateJetServiceInfoListResponseDataItemAttributesModel
     */
    'InfoPage'?: Array<IGeneralInfoPagesGeneralInfoPagesComponentModel>;
    /**
     * 
     * @type {string}
     * @memberof IPrivateJetServiceInfoListResponseDataItemAttributesModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IPrivateJetServiceInfoListResponseDataItemAttributesModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IPrivateJetServiceInfoListResponseDataItemAttributesModel
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByModel}
     * @memberof IPrivateJetServiceInfoListResponseDataItemAttributesModel
     */
    'createdBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IPrivateJetServiceInfoListResponseDataItemAttributesModel
     */
    'updatedBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
}
/**
 * 
 * @export
 * @interface IPrivateJetServiceInfoListResponseDataItemLocalizedModel
 */
export interface IPrivateJetServiceInfoListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IPrivateJetServiceInfoListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IPrivateJetServiceInfoListResponseDataItemAttributesModel}
     * @memberof IPrivateJetServiceInfoListResponseDataItemLocalizedModel
     */
    'attributes'?: IPrivateJetServiceInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IPrivateJetServiceInfoListResponseDataItemModel
 */
export interface IPrivateJetServiceInfoListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof IPrivateJetServiceInfoListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {IPrivateJetServiceInfoListResponseDataItemAttributesModel}
     * @memberof IPrivateJetServiceInfoListResponseDataItemModel
     */
    'attributes'?: IPrivateJetServiceInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IPrivateJetServiceInfoListResponseModel
 */
export interface IPrivateJetServiceInfoListResponseModel {
    /**
     * 
     * @type {Array<IPrivateJetServiceInfoListResponseDataItemModel>}
     * @memberof IPrivateJetServiceInfoListResponseModel
     */
    'data'?: Array<IPrivateJetServiceInfoListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof IPrivateJetServiceInfoListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * 
 * @export
 * @interface IPrivateJetServiceInfoRequestDataModel
 */
export interface IPrivateJetServiceInfoRequestDataModel {
    /**
     * 
     * @type {Array<IGeneralInfoPagesGeneralInfoPagesComponentModel>}
     * @memberof IPrivateJetServiceInfoRequestDataModel
     */
    'InfoPage'?: Array<IGeneralInfoPagesGeneralInfoPagesComponentModel>;
}
/**
 * 
 * @export
 * @interface IPrivateJetServiceInfoRequestModel
 */
export interface IPrivateJetServiceInfoRequestModel {
    /**
     * 
     * @type {IPrivateJetServiceInfoRequestDataModel}
     * @memberof IPrivateJetServiceInfoRequestModel
     */
    'data': IPrivateJetServiceInfoRequestDataModel;
}
/**
 * 
 * @export
 * @interface IPrivateJetServiceInfoResponseDataObjectLocalizedModel
 */
export interface IPrivateJetServiceInfoResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IPrivateJetServiceInfoResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IPrivateJetServiceInfoListResponseDataItemAttributesModel}
     * @memberof IPrivateJetServiceInfoResponseDataObjectLocalizedModel
     */
    'attributes'?: IPrivateJetServiceInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IPrivateJetServiceInfoResponseDataObjectModel
 */
export interface IPrivateJetServiceInfoResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof IPrivateJetServiceInfoResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {IPrivateJetServiceInfoListResponseDataItemAttributesModel}
     * @memberof IPrivateJetServiceInfoResponseDataObjectModel
     */
    'attributes'?: IPrivateJetServiceInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IPrivateJetServiceInfoResponseModel
 */
export interface IPrivateJetServiceInfoResponseModel {
    /**
     * 
     * @type {IPrivateJetServiceInfoResponseDataObjectModel}
     * @memberof IPrivateJetServiceInfoResponseModel
     */
    'data'?: IPrivateJetServiceInfoResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof IPrivateJetServiceInfoResponseModel
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface IPrivateJetServiceListResponseDataItemLocalizedModel
 */
export interface IPrivateJetServiceListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IPrivateJetServiceListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {ICipInternationalAirportServiceListResponseDataItemAttributesModel}
     * @memberof IPrivateJetServiceListResponseDataItemLocalizedModel
     */
    'attributes'?: ICipInternationalAirportServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IPrivateJetServiceListResponseDataItemModel
 */
export interface IPrivateJetServiceListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof IPrivateJetServiceListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {ICipInternationalAirportServiceListResponseDataItemAttributesModel}
     * @memberof IPrivateJetServiceListResponseDataItemModel
     */
    'attributes'?: ICipInternationalAirportServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IPrivateJetServiceListResponseModel
 */
export interface IPrivateJetServiceListResponseModel {
    /**
     * 
     * @type {Array<IPrivateJetServiceListResponseDataItemModel>}
     * @memberof IPrivateJetServiceListResponseModel
     */
    'data'?: Array<IPrivateJetServiceListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof IPrivateJetServiceListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * 
 * @export
 * @interface IPrivateJetServiceRequestModel
 */
export interface IPrivateJetServiceRequestModel {
    /**
     * 
     * @type {ICipInternationalAirportServiceRequestDataModel}
     * @memberof IPrivateJetServiceRequestModel
     */
    'data': ICipInternationalAirportServiceRequestDataModel;
}
/**
 * 
 * @export
 * @interface IPrivateJetServiceResponseDataObjectLocalizedModel
 */
export interface IPrivateJetServiceResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IPrivateJetServiceResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {ICipInternationalAirportServiceListResponseDataItemAttributesModel}
     * @memberof IPrivateJetServiceResponseDataObjectLocalizedModel
     */
    'attributes'?: ICipInternationalAirportServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IPrivateJetServiceResponseDataObjectModel
 */
export interface IPrivateJetServiceResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof IPrivateJetServiceResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {ICipInternationalAirportServiceListResponseDataItemAttributesModel}
     * @memberof IPrivateJetServiceResponseDataObjectModel
     */
    'attributes'?: ICipInternationalAirportServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IPrivateJetServiceResponseModel
 */
export interface IPrivateJetServiceResponseModel {
    /**
     * 
     * @type {IPrivateJetServiceResponseDataObjectModel}
     * @memberof IPrivateJetServiceResponseModel
     */
    'data'?: IPrivateJetServiceResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof IPrivateJetServiceResponseModel
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface IRequestListResponseDataItemAttributesModel
 */
export interface IRequestListResponseDataItemAttributesModel {
    /**
     * 
     * @type {IGeneralInfoPagesGeneralRequestsComponentModel}
     * @memberof IRequestListResponseDataItemAttributesModel
     */
    'GeneralRequests'?: IGeneralInfoPagesGeneralRequestsComponentModel;
    /**
     * 
     * @type {IAirportTransportationServiceListResponseDataItemAttributesGalleryModel}
     * @memberof IRequestListResponseDataItemAttributesModel
     */
    'Attachments'?: IAirportTransportationServiceListResponseDataItemAttributesGalleryModel;
    /**
     * 
     * @type {string}
     * @memberof IRequestListResponseDataItemAttributesModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IRequestListResponseDataItemAttributesModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IRequestListResponseDataItemAttributesModel
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByModel}
     * @memberof IRequestListResponseDataItemAttributesModel
     */
    'createdBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IRequestListResponseDataItemAttributesModel
     */
    'updatedBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
}
/**
 * 
 * @export
 * @interface IRequestListResponseDataItemLocalizedModel
 */
export interface IRequestListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IRequestListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IRequestListResponseDataItemAttributesModel}
     * @memberof IRequestListResponseDataItemLocalizedModel
     */
    'attributes'?: IRequestListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IRequestListResponseDataItemModel
 */
export interface IRequestListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof IRequestListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {IRequestListResponseDataItemAttributesModel}
     * @memberof IRequestListResponseDataItemModel
     */
    'attributes'?: IRequestListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IRequestListResponseModel
 */
export interface IRequestListResponseModel {
    /**
     * 
     * @type {Array<IRequestListResponseDataItemModel>}
     * @memberof IRequestListResponseModel
     */
    'data'?: Array<IRequestListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof IRequestListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * 
 * @export
 * @interface IRequestRequestDataModel
 */
export interface IRequestRequestDataModel {
    /**
     * 
     * @type {IGeneralInfoPagesGeneralRequestsComponentModel}
     * @memberof IRequestRequestDataModel
     */
    'GeneralRequests'?: IGeneralInfoPagesGeneralRequestsComponentModel;
    /**
     * 
     * @type {Array<IAirportTransportationServiceRequestDataGalleryInnerModel>}
     * @memberof IRequestRequestDataModel
     */
    'Attachments'?: Array<IAirportTransportationServiceRequestDataGalleryInnerModel>;
}
/**
 * 
 * @export
 * @interface IRequestRequestModel
 */
export interface IRequestRequestModel {
    /**
     * 
     * @type {IRequestRequestDataModel}
     * @memberof IRequestRequestModel
     */
    'data': IRequestRequestDataModel;
}
/**
 * 
 * @export
 * @interface IRequestResponseDataObjectLocalizedModel
 */
export interface IRequestResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IRequestResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IRequestListResponseDataItemAttributesModel}
     * @memberof IRequestResponseDataObjectLocalizedModel
     */
    'attributes'?: IRequestListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IRequestResponseDataObjectModel
 */
export interface IRequestResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof IRequestResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {IRequestListResponseDataItemAttributesModel}
     * @memberof IRequestResponseDataObjectModel
     */
    'attributes'?: IRequestListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IRequestResponseModel
 */
export interface IRequestResponseModel {
    /**
     * 
     * @type {IRequestResponseDataObjectModel}
     * @memberof IRequestResponseModel
     */
    'data'?: IRequestResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof IRequestResponseModel
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface IRestaurantServiceInfoListResponseDataItemLocalizedModel
 */
export interface IRestaurantServiceInfoListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IRestaurantServiceInfoListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof IRestaurantServiceInfoListResponseDataItemLocalizedModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IRestaurantServiceInfoListResponseDataItemModel
 */
export interface IRestaurantServiceInfoListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof IRestaurantServiceInfoListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof IRestaurantServiceInfoListResponseDataItemModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IRestaurantServiceInfoListResponseModel
 */
export interface IRestaurantServiceInfoListResponseModel {
    /**
     * 
     * @type {Array<IRestaurantServiceInfoListResponseDataItemModel>}
     * @memberof IRestaurantServiceInfoListResponseModel
     */
    'data'?: Array<IRestaurantServiceInfoListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof IRestaurantServiceInfoListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * 
 * @export
 * @interface IRestaurantServiceInfoRequestModel
 */
export interface IRestaurantServiceInfoRequestModel {
    /**
     * 
     * @type {IIranVisaInfoRequestDataModel}
     * @memberof IRestaurantServiceInfoRequestModel
     */
    'data': IIranVisaInfoRequestDataModel;
}
/**
 * 
 * @export
 * @interface IRestaurantServiceInfoResponseDataObjectLocalizedModel
 */
export interface IRestaurantServiceInfoResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IRestaurantServiceInfoResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof IRestaurantServiceInfoResponseDataObjectLocalizedModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IRestaurantServiceInfoResponseDataObjectModel
 */
export interface IRestaurantServiceInfoResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof IRestaurantServiceInfoResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof IRestaurantServiceInfoResponseDataObjectModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IRestaurantServiceInfoResponseModel
 */
export interface IRestaurantServiceInfoResponseModel {
    /**
     * 
     * @type {IRestaurantServiceInfoResponseDataObjectModel}
     * @memberof IRestaurantServiceInfoResponseModel
     */
    'data'?: IRestaurantServiceInfoResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof IRestaurantServiceInfoResponseModel
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface IRestaurantServiceListResponseDataItemLocalizedModel
 */
export interface IRestaurantServiceListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IRestaurantServiceListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IMeetingRoomServiceListResponseDataItemAttributesModel}
     * @memberof IRestaurantServiceListResponseDataItemLocalizedModel
     */
    'attributes'?: IMeetingRoomServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IRestaurantServiceListResponseDataItemModel
 */
export interface IRestaurantServiceListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof IRestaurantServiceListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {IMeetingRoomServiceListResponseDataItemAttributesModel}
     * @memberof IRestaurantServiceListResponseDataItemModel
     */
    'attributes'?: IMeetingRoomServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IRestaurantServiceListResponseModel
 */
export interface IRestaurantServiceListResponseModel {
    /**
     * 
     * @type {Array<IRestaurantServiceListResponseDataItemModel>}
     * @memberof IRestaurantServiceListResponseModel
     */
    'data'?: Array<IRestaurantServiceListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof IRestaurantServiceListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * 
 * @export
 * @interface IRestaurantServiceRequestModel
 */
export interface IRestaurantServiceRequestModel {
    /**
     * 
     * @type {IMeetingRoomServiceRequestDataModel}
     * @memberof IRestaurantServiceRequestModel
     */
    'data': IMeetingRoomServiceRequestDataModel;
}
/**
 * 
 * @export
 * @interface IRestaurantServiceResponseDataObjectLocalizedModel
 */
export interface IRestaurantServiceResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IRestaurantServiceResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IMeetingRoomServiceListResponseDataItemAttributesModel}
     * @memberof IRestaurantServiceResponseDataObjectLocalizedModel
     */
    'attributes'?: IMeetingRoomServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IRestaurantServiceResponseDataObjectModel
 */
export interface IRestaurantServiceResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof IRestaurantServiceResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {IMeetingRoomServiceListResponseDataItemAttributesModel}
     * @memberof IRestaurantServiceResponseDataObjectModel
     */
    'attributes'?: IMeetingRoomServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IRestaurantServiceResponseModel
 */
export interface IRestaurantServiceResponseModel {
    /**
     * 
     * @type {IRestaurantServiceResponseDataObjectModel}
     * @memberof IRestaurantServiceResponseModel
     */
    'data'?: IRestaurantServiceResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof IRestaurantServiceResponseModel
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface IServicesInfoListResponseDataItemAttributesModel
 */
export interface IServicesInfoListResponseDataItemAttributesModel {
    /**
     * 
     * @type {string}
     * @memberof IServicesInfoListResponseDataItemAttributesModel
     */
    'Service'?: string;
    /**
     * 
     * @type {string}
     * @memberof IServicesInfoListResponseDataItemAttributesModel
     */
    'Header'?: string;
    /**
     * 
     * @type {string}
     * @memberof IServicesInfoListResponseDataItemAttributesModel
     */
    'Description'?: string;
    /**
     * 
     * @type {string}
     * @memberof IServicesInfoListResponseDataItemAttributesModel
     */
    'FilterHeader'?: string;
    /**
     * 
     * @type {string}
     * @memberof IServicesInfoListResponseDataItemAttributesModel
     */
    'FilterDescription'?: string;
    /**
     * 
     * @type {IAboutAboutCardsComponentImageModel}
     * @memberof IServicesInfoListResponseDataItemAttributesModel
     */
    'Banner'?: IAboutAboutCardsComponentImageModel;
    /**
     * 
     * @type {string}
     * @memberof IServicesInfoListResponseDataItemAttributesModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IServicesInfoListResponseDataItemAttributesModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IServicesInfoListResponseDataItemAttributesModel
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByModel}
     * @memberof IServicesInfoListResponseDataItemAttributesModel
     */
    'createdBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IServicesInfoListResponseDataItemAttributesModel
     */
    'updatedBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
}
/**
 * 
 * @export
 * @interface IServicesInfoListResponseDataItemLocalizedModel
 */
export interface IServicesInfoListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IServicesInfoListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IServicesInfoListResponseDataItemAttributesModel}
     * @memberof IServicesInfoListResponseDataItemLocalizedModel
     */
    'attributes'?: IServicesInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IServicesInfoListResponseDataItemModel
 */
export interface IServicesInfoListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof IServicesInfoListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {IServicesInfoListResponseDataItemAttributesModel}
     * @memberof IServicesInfoListResponseDataItemModel
     */
    'attributes'?: IServicesInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IServicesInfoListResponseModel
 */
export interface IServicesInfoListResponseModel {
    /**
     * 
     * @type {Array<IServicesInfoListResponseDataItemModel>}
     * @memberof IServicesInfoListResponseModel
     */
    'data'?: Array<IServicesInfoListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof IServicesInfoListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * 
 * @export
 * @interface IServicesInfoRequestDataModel
 */
export interface IServicesInfoRequestDataModel {
    /**
     * 
     * @type {string}
     * @memberof IServicesInfoRequestDataModel
     */
    'Service'?: string;
    /**
     * 
     * @type {string}
     * @memberof IServicesInfoRequestDataModel
     */
    'Header'?: string;
    /**
     * 
     * @type {string}
     * @memberof IServicesInfoRequestDataModel
     */
    'Description'?: string;
    /**
     * 
     * @type {string}
     * @memberof IServicesInfoRequestDataModel
     */
    'FilterHeader'?: string;
    /**
     * 
     * @type {string}
     * @memberof IServicesInfoRequestDataModel
     */
    'FilterDescription'?: string;
    /**
     * 
     * @type {IAirportTransportationServiceRequestDataGalleryInnerModel}
     * @memberof IServicesInfoRequestDataModel
     */
    'Banner'?: IAirportTransportationServiceRequestDataGalleryInnerModel;
}
/**
 * 
 * @export
 * @interface IServicesInfoRequestModel
 */
export interface IServicesInfoRequestModel {
    /**
     * 
     * @type {IServicesInfoRequestDataModel}
     * @memberof IServicesInfoRequestModel
     */
    'data': IServicesInfoRequestDataModel;
}
/**
 * 
 * @export
 * @interface IServicesInfoResponseDataObjectLocalizedModel
 */
export interface IServicesInfoResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IServicesInfoResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IServicesInfoListResponseDataItemAttributesModel}
     * @memberof IServicesInfoResponseDataObjectLocalizedModel
     */
    'attributes'?: IServicesInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IServicesInfoResponseDataObjectModel
 */
export interface IServicesInfoResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof IServicesInfoResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {IServicesInfoListResponseDataItemAttributesModel}
     * @memberof IServicesInfoResponseDataObjectModel
     */
    'attributes'?: IServicesInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IServicesInfoResponseModel
 */
export interface IServicesInfoResponseModel {
    /**
     * 
     * @type {IServicesInfoResponseDataObjectModel}
     * @memberof IServicesInfoResponseModel
     */
    'data'?: IServicesInfoResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof IServicesInfoResponseModel
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface IShoppingServiceInfoListResponseDataItemLocalizedModel
 */
export interface IShoppingServiceInfoListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IShoppingServiceInfoListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof IShoppingServiceInfoListResponseDataItemLocalizedModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IShoppingServiceInfoListResponseDataItemModel
 */
export interface IShoppingServiceInfoListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof IShoppingServiceInfoListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof IShoppingServiceInfoListResponseDataItemModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IShoppingServiceInfoListResponseModel
 */
export interface IShoppingServiceInfoListResponseModel {
    /**
     * 
     * @type {Array<IShoppingServiceInfoListResponseDataItemModel>}
     * @memberof IShoppingServiceInfoListResponseModel
     */
    'data'?: Array<IShoppingServiceInfoListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof IShoppingServiceInfoListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * 
 * @export
 * @interface IShoppingServiceInfoRequestModel
 */
export interface IShoppingServiceInfoRequestModel {
    /**
     * 
     * @type {IIranVisaInfoRequestDataModel}
     * @memberof IShoppingServiceInfoRequestModel
     */
    'data': IIranVisaInfoRequestDataModel;
}
/**
 * 
 * @export
 * @interface IShoppingServiceInfoResponseDataObjectLocalizedModel
 */
export interface IShoppingServiceInfoResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IShoppingServiceInfoResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof IShoppingServiceInfoResponseDataObjectLocalizedModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IShoppingServiceInfoResponseDataObjectModel
 */
export interface IShoppingServiceInfoResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof IShoppingServiceInfoResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof IShoppingServiceInfoResponseDataObjectModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IShoppingServiceInfoResponseModel
 */
export interface IShoppingServiceInfoResponseModel {
    /**
     * 
     * @type {IShoppingServiceInfoResponseDataObjectModel}
     * @memberof IShoppingServiceInfoResponseModel
     */
    'data'?: IShoppingServiceInfoResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof IShoppingServiceInfoResponseModel
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface IShoppingServiceListResponseDataItemLocalizedModel
 */
export interface IShoppingServiceListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IShoppingServiceListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IMeetingRoomServiceListResponseDataItemAttributesModel}
     * @memberof IShoppingServiceListResponseDataItemLocalizedModel
     */
    'attributes'?: IMeetingRoomServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IShoppingServiceListResponseDataItemModel
 */
export interface IShoppingServiceListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof IShoppingServiceListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {IMeetingRoomServiceListResponseDataItemAttributesModel}
     * @memberof IShoppingServiceListResponseDataItemModel
     */
    'attributes'?: IMeetingRoomServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IShoppingServiceListResponseModel
 */
export interface IShoppingServiceListResponseModel {
    /**
     * 
     * @type {Array<IShoppingServiceListResponseDataItemModel>}
     * @memberof IShoppingServiceListResponseModel
     */
    'data'?: Array<IShoppingServiceListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof IShoppingServiceListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * 
 * @export
 * @interface IShoppingServiceRequestModel
 */
export interface IShoppingServiceRequestModel {
    /**
     * 
     * @type {IMeetingRoomServiceRequestDataModel}
     * @memberof IShoppingServiceRequestModel
     */
    'data': IMeetingRoomServiceRequestDataModel;
}
/**
 * 
 * @export
 * @interface IShoppingServiceResponseDataObjectLocalizedModel
 */
export interface IShoppingServiceResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IShoppingServiceResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IMeetingRoomServiceListResponseDataItemAttributesModel}
     * @memberof IShoppingServiceResponseDataObjectLocalizedModel
     */
    'attributes'?: IMeetingRoomServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IShoppingServiceResponseDataObjectModel
 */
export interface IShoppingServiceResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof IShoppingServiceResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {IMeetingRoomServiceListResponseDataItemAttributesModel}
     * @memberof IShoppingServiceResponseDataObjectModel
     */
    'attributes'?: IMeetingRoomServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IShoppingServiceResponseModel
 */
export interface IShoppingServiceResponseModel {
    /**
     * 
     * @type {IShoppingServiceResponseDataObjectModel}
     * @memberof IShoppingServiceResponseModel
     */
    'data'?: IShoppingServiceResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof IShoppingServiceResponseModel
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface ISouvenirListResponseDataItemAttributesModel
 */
export interface ISouvenirListResponseDataItemAttributesModel {
    /**
     * 
     * @type {string}
     * @memberof ISouvenirListResponseDataItemAttributesModel
     */
    'MoreInfo'?: string;
    /**
     * 
     * @type {IGeneralInfoPagesFirstGeneralCardsComponentModel}
     * @memberof ISouvenirListResponseDataItemAttributesModel
     */
    'Card'?: IGeneralInfoPagesFirstGeneralCardsComponentModel;
    /**
     * 
     * @type {string}
     * @memberof ISouvenirListResponseDataItemAttributesModel
     */
    'Name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ISouvenirListResponseDataItemAttributesModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ISouvenirListResponseDataItemAttributesModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ISouvenirListResponseDataItemAttributesModel
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByModel}
     * @memberof ISouvenirListResponseDataItemAttributesModel
     */
    'createdBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof ISouvenirListResponseDataItemAttributesModel
     */
    'updatedBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
}
/**
 * 
 * @export
 * @interface ISouvenirListResponseDataItemLocalizedModel
 */
export interface ISouvenirListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof ISouvenirListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {ISouvenirListResponseDataItemAttributesModel}
     * @memberof ISouvenirListResponseDataItemLocalizedModel
     */
    'attributes'?: ISouvenirListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ISouvenirListResponseDataItemModel
 */
export interface ISouvenirListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof ISouvenirListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {ISouvenirListResponseDataItemAttributesModel}
     * @memberof ISouvenirListResponseDataItemModel
     */
    'attributes'?: ISouvenirListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ISouvenirListResponseModel
 */
export interface ISouvenirListResponseModel {
    /**
     * 
     * @type {Array<ISouvenirListResponseDataItemModel>}
     * @memberof ISouvenirListResponseModel
     */
    'data'?: Array<ISouvenirListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof ISouvenirListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * 
 * @export
 * @interface ISouvenirRequestDataModel
 */
export interface ISouvenirRequestDataModel {
    /**
     * 
     * @type {string}
     * @memberof ISouvenirRequestDataModel
     */
    'MoreInfo'?: string;
    /**
     * 
     * @type {IGeneralInfoPagesFirstGeneralCardsComponentModel}
     * @memberof ISouvenirRequestDataModel
     */
    'Card'?: IGeneralInfoPagesFirstGeneralCardsComponentModel;
    /**
     * 
     * @type {string}
     * @memberof ISouvenirRequestDataModel
     */
    'Name'?: string;
}
/**
 * 
 * @export
 * @interface ISouvenirRequestModel
 */
export interface ISouvenirRequestModel {
    /**
     * 
     * @type {ISouvenirRequestDataModel}
     * @memberof ISouvenirRequestModel
     */
    'data': ISouvenirRequestDataModel;
}
/**
 * 
 * @export
 * @interface ISouvenirResponseDataObjectLocalizedModel
 */
export interface ISouvenirResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof ISouvenirResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {ISouvenirListResponseDataItemAttributesModel}
     * @memberof ISouvenirResponseDataObjectLocalizedModel
     */
    'attributes'?: ISouvenirListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ISouvenirResponseDataObjectModel
 */
export interface ISouvenirResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof ISouvenirResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {ISouvenirListResponseDataItemAttributesModel}
     * @memberof ISouvenirResponseDataObjectModel
     */
    'attributes'?: ISouvenirListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ISouvenirResponseModel
 */
export interface ISouvenirResponseModel {
    /**
     * 
     * @type {ISouvenirResponseDataObjectModel}
     * @memberof ISouvenirResponseModel
     */
    'data'?: ISouvenirResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof ISouvenirResponseModel
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface ITourGuideServiceInfoListResponseDataItemLocalizedModel
 */
export interface ITourGuideServiceInfoListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof ITourGuideServiceInfoListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof ITourGuideServiceInfoListResponseDataItemLocalizedModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ITourGuideServiceInfoListResponseDataItemModel
 */
export interface ITourGuideServiceInfoListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof ITourGuideServiceInfoListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof ITourGuideServiceInfoListResponseDataItemModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ITourGuideServiceInfoListResponseModel
 */
export interface ITourGuideServiceInfoListResponseModel {
    /**
     * 
     * @type {Array<ITourGuideServiceInfoListResponseDataItemModel>}
     * @memberof ITourGuideServiceInfoListResponseModel
     */
    'data'?: Array<ITourGuideServiceInfoListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof ITourGuideServiceInfoListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * 
 * @export
 * @interface ITourGuideServiceInfoRequestModel
 */
export interface ITourGuideServiceInfoRequestModel {
    /**
     * 
     * @type {IIranVisaInfoRequestDataModel}
     * @memberof ITourGuideServiceInfoRequestModel
     */
    'data': IIranVisaInfoRequestDataModel;
}
/**
 * 
 * @export
 * @interface ITourGuideServiceInfoResponseDataObjectLocalizedModel
 */
export interface ITourGuideServiceInfoResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof ITourGuideServiceInfoResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof ITourGuideServiceInfoResponseDataObjectLocalizedModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ITourGuideServiceInfoResponseDataObjectModel
 */
export interface ITourGuideServiceInfoResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof ITourGuideServiceInfoResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof ITourGuideServiceInfoResponseDataObjectModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ITourGuideServiceInfoResponseModel
 */
export interface ITourGuideServiceInfoResponseModel {
    /**
     * 
     * @type {ITourGuideServiceInfoResponseDataObjectModel}
     * @memberof ITourGuideServiceInfoResponseModel
     */
    'data'?: ITourGuideServiceInfoResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof ITourGuideServiceInfoResponseModel
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface ITourGuideServiceListResponseDataItemLocalizedModel
 */
export interface ITourGuideServiceListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof ITourGuideServiceListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {ICipInternationalAirportServiceListResponseDataItemAttributesModel}
     * @memberof ITourGuideServiceListResponseDataItemLocalizedModel
     */
    'attributes'?: ICipInternationalAirportServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ITourGuideServiceListResponseDataItemModel
 */
export interface ITourGuideServiceListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof ITourGuideServiceListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {ICipInternationalAirportServiceListResponseDataItemAttributesModel}
     * @memberof ITourGuideServiceListResponseDataItemModel
     */
    'attributes'?: ICipInternationalAirportServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ITourGuideServiceListResponseModel
 */
export interface ITourGuideServiceListResponseModel {
    /**
     * 
     * @type {Array<ITourGuideServiceListResponseDataItemModel>}
     * @memberof ITourGuideServiceListResponseModel
     */
    'data'?: Array<ITourGuideServiceListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof ITourGuideServiceListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * 
 * @export
 * @interface ITourGuideServiceRequestModel
 */
export interface ITourGuideServiceRequestModel {
    /**
     * 
     * @type {ICipInternationalAirportServiceRequestDataModel}
     * @memberof ITourGuideServiceRequestModel
     */
    'data': ICipInternationalAirportServiceRequestDataModel;
}
/**
 * 
 * @export
 * @interface ITourGuideServiceResponseDataObjectLocalizedModel
 */
export interface ITourGuideServiceResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof ITourGuideServiceResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {ICipInternationalAirportServiceListResponseDataItemAttributesModel}
     * @memberof ITourGuideServiceResponseDataObjectLocalizedModel
     */
    'attributes'?: ICipInternationalAirportServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ITourGuideServiceResponseDataObjectModel
 */
export interface ITourGuideServiceResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof ITourGuideServiceResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {ICipInternationalAirportServiceListResponseDataItemAttributesModel}
     * @memberof ITourGuideServiceResponseDataObjectModel
     */
    'attributes'?: ICipInternationalAirportServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ITourGuideServiceResponseModel
 */
export interface ITourGuideServiceResponseModel {
    /**
     * 
     * @type {ITourGuideServiceResponseDataObjectModel}
     * @memberof ITourGuideServiceResponseModel
     */
    'data'?: ITourGuideServiceResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof ITourGuideServiceResponseModel
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface ITourInfoListResponseDataItemLocalizedModel
 */
export interface ITourInfoListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof ITourInfoListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof ITourInfoListResponseDataItemLocalizedModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ITourInfoListResponseDataItemModel
 */
export interface ITourInfoListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof ITourInfoListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof ITourInfoListResponseDataItemModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ITourInfoListResponseModel
 */
export interface ITourInfoListResponseModel {
    /**
     * 
     * @type {Array<ITourInfoListResponseDataItemModel>}
     * @memberof ITourInfoListResponseModel
     */
    'data'?: Array<ITourInfoListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof ITourInfoListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * 
 * @export
 * @interface ITourInfoRequestModel
 */
export interface ITourInfoRequestModel {
    /**
     * 
     * @type {IIranVisaInfoRequestDataModel}
     * @memberof ITourInfoRequestModel
     */
    'data': IIranVisaInfoRequestDataModel;
}
/**
 * 
 * @export
 * @interface ITourInfoResponseDataObjectLocalizedModel
 */
export interface ITourInfoResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof ITourInfoResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof ITourInfoResponseDataObjectLocalizedModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ITourInfoResponseDataObjectModel
 */
export interface ITourInfoResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof ITourInfoResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof ITourInfoResponseDataObjectModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ITourInfoResponseModel
 */
export interface ITourInfoResponseModel {
    /**
     * 
     * @type {ITourInfoResponseDataObjectModel}
     * @memberof ITourInfoResponseModel
     */
    'data'?: ITourInfoResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof ITourInfoResponseModel
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface ITourListResponseDataItemAttributesModel
 */
export interface ITourListResponseDataItemAttributesModel {
    /**
     * 
     * @type {string}
     * @memberof ITourListResponseDataItemAttributesModel
     */
    'Type'?: ITourListResponseDataItemAttributesModelTypeEnum;
    /**
     * 
     * @type {IGeneralInfoPagesFirstGeneralCardsComponentModel}
     * @memberof ITourListResponseDataItemAttributesModel
     */
    'Card'?: IGeneralInfoPagesFirstGeneralCardsComponentModel;
    /**
     * 
     * @type {IGeneralInfoPagesOverviewsComponentModel}
     * @memberof ITourListResponseDataItemAttributesModel
     */
    'Overview'?: IGeneralInfoPagesOverviewsComponentModel;
    /**
     * 
     * @type {Array<IGeneralInfoPagesReviewsComponentModel>}
     * @memberof ITourListResponseDataItemAttributesModel
     */
    'Reviews'?: Array<IGeneralInfoPagesReviewsComponentModel>;
    /**
     * 
     * @type {string}
     * @memberof ITourListResponseDataItemAttributesModel
     */
    'Name'?: string;
    /**
     * 
     * @type {number}
     * @memberof ITourListResponseDataItemAttributesModel
     */
    'Duration'?: number;
    /**
     * 
     * @type {IComponentPagesTourCitiesComponentModel}
     * @memberof ITourListResponseDataItemAttributesModel
     */
    'Cities'?: IComponentPagesTourCitiesComponentModel;
    /**
     * 
     * @type {Array<IComponentPagesTourExperiencesComponentModel>}
     * @memberof ITourListResponseDataItemAttributesModel
     */
    'Experiences'?: Array<IComponentPagesTourExperiencesComponentModel>;
    /**
     * 
     * @type {Array<IComponentPagesTourPictureComponentModel>}
     * @memberof ITourListResponseDataItemAttributesModel
     */
    'Picture'?: Array<IComponentPagesTourPictureComponentModel>;
    /**
     * 
     * @type {Array<IComponentPagesTourItineraryComponentModel>}
     * @memberof ITourListResponseDataItemAttributesModel
     */
    'Itinerary'?: Array<IComponentPagesTourItineraryComponentModel>;
    /**
     * 
     * @type {Array<IComponentPagesTourServicesComponentModel>}
     * @memberof ITourListResponseDataItemAttributesModel
     */
    'Services'?: Array<IComponentPagesTourServicesComponentModel>;
    /**
     * 
     * @type {IComponentPagesHighlightAttractionsComponentModel}
     * @memberof ITourListResponseDataItemAttributesModel
     */
    'HighlightAttraction'?: IComponentPagesHighlightAttractionsComponentModel;
    /**
     * 
     * @type {IAirportTransportationServiceListResponseDataItemAttributesGalleryModel}
     * @memberof ITourListResponseDataItemAttributesModel
     */
    'Gallery'?: IAirportTransportationServiceListResponseDataItemAttributesGalleryModel;
    /**
     * 
     * @type {string}
     * @memberof ITourListResponseDataItemAttributesModel
     */
    'Destinations'?: ITourListResponseDataItemAttributesModelDestinationsEnum;
    /**
     * 
     * @type {boolean}
     * @memberof ITourListResponseDataItemAttributesModel
     */
    'TopSelling'?: boolean;
    /**
     * 
     * @type {Array<IGeneralInfoPagesFaQsComponentModel>}
     * @memberof ITourListResponseDataItemAttributesModel
     */
    'FAQ'?: Array<IGeneralInfoPagesFaQsComponentModel>;
    /**
     * 
     * @type {string}
     * @memberof ITourListResponseDataItemAttributesModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ITourListResponseDataItemAttributesModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ITourListResponseDataItemAttributesModel
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByModel}
     * @memberof ITourListResponseDataItemAttributesModel
     */
    'createdBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof ITourListResponseDataItemAttributesModel
     */
    'updatedBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
}

export const ITourListResponseDataItemAttributesModelTypeEnum = {
    WildlifeTours: 'Wildlife Tours'
} as const;

export type ITourListResponseDataItemAttributesModelTypeEnum = typeof ITourListResponseDataItemAttributesModelTypeEnum[keyof typeof ITourListResponseDataItemAttributesModelTypeEnum];
export const ITourListResponseDataItemAttributesModelDestinationsEnum = {
    Tehran: 'Tehran'
} as const;

export type ITourListResponseDataItemAttributesModelDestinationsEnum = typeof ITourListResponseDataItemAttributesModelDestinationsEnum[keyof typeof ITourListResponseDataItemAttributesModelDestinationsEnum];

/**
 * 
 * @export
 * @interface ITourListResponseDataItemLocalizedModel
 */
export interface ITourListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof ITourListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {ITourListResponseDataItemAttributesModel}
     * @memberof ITourListResponseDataItemLocalizedModel
     */
    'attributes'?: ITourListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ITourListResponseDataItemModel
 */
export interface ITourListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof ITourListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {ITourListResponseDataItemAttributesModel}
     * @memberof ITourListResponseDataItemModel
     */
    'attributes'?: ITourListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ITourListResponseModel
 */
export interface ITourListResponseModel {
    /**
     * 
     * @type {Array<ITourListResponseDataItemModel>}
     * @memberof ITourListResponseModel
     */
    'data'?: Array<ITourListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof ITourListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * 
 * @export
 * @interface ITourRequestDataModel
 */
export interface ITourRequestDataModel {
    /**
     * 
     * @type {string}
     * @memberof ITourRequestDataModel
     */
    'Type'?: ITourRequestDataModelTypeEnum;
    /**
     * 
     * @type {IGeneralInfoPagesFirstGeneralCardsComponentModel}
     * @memberof ITourRequestDataModel
     */
    'Card'?: IGeneralInfoPagesFirstGeneralCardsComponentModel;
    /**
     * 
     * @type {IGeneralInfoPagesOverviewsComponentModel}
     * @memberof ITourRequestDataModel
     */
    'Overview'?: IGeneralInfoPagesOverviewsComponentModel;
    /**
     * 
     * @type {Array<IGeneralInfoPagesReviewsComponentModel>}
     * @memberof ITourRequestDataModel
     */
    'Reviews'?: Array<IGeneralInfoPagesReviewsComponentModel>;
    /**
     * 
     * @type {string}
     * @memberof ITourRequestDataModel
     */
    'Name'?: string;
    /**
     * 
     * @type {number}
     * @memberof ITourRequestDataModel
     */
    'Duration'?: number;
    /**
     * 
     * @type {IComponentPagesTourCitiesComponentModel}
     * @memberof ITourRequestDataModel
     */
    'Cities'?: IComponentPagesTourCitiesComponentModel;
    /**
     * 
     * @type {Array<IComponentPagesTourExperiencesComponentModel>}
     * @memberof ITourRequestDataModel
     */
    'Experiences'?: Array<IComponentPagesTourExperiencesComponentModel>;
    /**
     * 
     * @type {Array<IComponentPagesTourPictureComponentModel>}
     * @memberof ITourRequestDataModel
     */
    'Picture'?: Array<IComponentPagesTourPictureComponentModel>;
    /**
     * 
     * @type {Array<IComponentPagesTourItineraryComponentModel>}
     * @memberof ITourRequestDataModel
     */
    'Itinerary'?: Array<IComponentPagesTourItineraryComponentModel>;
    /**
     * 
     * @type {Array<IComponentPagesTourServicesComponentModel>}
     * @memberof ITourRequestDataModel
     */
    'Services'?: Array<IComponentPagesTourServicesComponentModel>;
    /**
     * 
     * @type {IComponentPagesHighlightAttractionsComponentModel}
     * @memberof ITourRequestDataModel
     */
    'HighlightAttraction'?: IComponentPagesHighlightAttractionsComponentModel;
    /**
     * 
     * @type {Array<IAirportTransportationServiceRequestDataGalleryInnerModel>}
     * @memberof ITourRequestDataModel
     */
    'Gallery'?: Array<IAirportTransportationServiceRequestDataGalleryInnerModel>;
    /**
     * 
     * @type {string}
     * @memberof ITourRequestDataModel
     */
    'Destinations'?: ITourRequestDataModelDestinationsEnum;
    /**
     * 
     * @type {boolean}
     * @memberof ITourRequestDataModel
     */
    'TopSelling': boolean;
    /**
     * 
     * @type {Array<IGeneralInfoPagesFaQsComponentModel>}
     * @memberof ITourRequestDataModel
     */
    'FAQ'?: Array<IGeneralInfoPagesFaQsComponentModel>;
}

export const ITourRequestDataModelTypeEnum = {
    WildlifeTours: 'Wildlife Tours'
} as const;

export type ITourRequestDataModelTypeEnum = typeof ITourRequestDataModelTypeEnum[keyof typeof ITourRequestDataModelTypeEnum];
export const ITourRequestDataModelDestinationsEnum = {
    Tehran: 'Tehran'
} as const;

export type ITourRequestDataModelDestinationsEnum = typeof ITourRequestDataModelDestinationsEnum[keyof typeof ITourRequestDataModelDestinationsEnum];

/**
 * 
 * @export
 * @interface ITourRequestModel
 */
export interface ITourRequestModel {
    /**
     * 
     * @type {ITourRequestDataModel}
     * @memberof ITourRequestModel
     */
    'data': ITourRequestDataModel;
}
/**
 * 
 * @export
 * @interface ITourResponseDataObjectLocalizedModel
 */
export interface ITourResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof ITourResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {ITourListResponseDataItemAttributesModel}
     * @memberof ITourResponseDataObjectLocalizedModel
     */
    'attributes'?: ITourListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ITourResponseDataObjectModel
 */
export interface ITourResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof ITourResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {ITourListResponseDataItemAttributesModel}
     * @memberof ITourResponseDataObjectModel
     */
    'attributes'?: ITourListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ITourResponseModel
 */
export interface ITourResponseModel {
    /**
     * 
     * @type {ITourResponseDataObjectModel}
     * @memberof ITourResponseModel
     */
    'data'?: ITourResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof ITourResponseModel
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface ITrainServiceInfoListResponseDataItemLocalizedModel
 */
export interface ITrainServiceInfoListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof ITrainServiceInfoListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof ITrainServiceInfoListResponseDataItemLocalizedModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ITrainServiceInfoListResponseDataItemModel
 */
export interface ITrainServiceInfoListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof ITrainServiceInfoListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof ITrainServiceInfoListResponseDataItemModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ITrainServiceInfoListResponseModel
 */
export interface ITrainServiceInfoListResponseModel {
    /**
     * 
     * @type {Array<ITrainServiceInfoListResponseDataItemModel>}
     * @memberof ITrainServiceInfoListResponseModel
     */
    'data'?: Array<ITrainServiceInfoListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof ITrainServiceInfoListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * 
 * @export
 * @interface ITrainServiceInfoRequestModel
 */
export interface ITrainServiceInfoRequestModel {
    /**
     * 
     * @type {IIranVisaInfoRequestDataModel}
     * @memberof ITrainServiceInfoRequestModel
     */
    'data': IIranVisaInfoRequestDataModel;
}
/**
 * 
 * @export
 * @interface ITrainServiceInfoResponseDataObjectLocalizedModel
 */
export interface ITrainServiceInfoResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof ITrainServiceInfoResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof ITrainServiceInfoResponseDataObjectLocalizedModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ITrainServiceInfoResponseDataObjectModel
 */
export interface ITrainServiceInfoResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof ITrainServiceInfoResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof ITrainServiceInfoResponseDataObjectModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ITrainServiceInfoResponseModel
 */
export interface ITrainServiceInfoResponseModel {
    /**
     * 
     * @type {ITrainServiceInfoResponseDataObjectModel}
     * @memberof ITrainServiceInfoResponseModel
     */
    'data'?: ITrainServiceInfoResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof ITrainServiceInfoResponseModel
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface ITrainServiceListResponseDataItemAttributesModel
 */
export interface ITrainServiceListResponseDataItemAttributesModel {
    /**
     * 
     * @type {string}
     * @memberof ITrainServiceListResponseDataItemAttributesModel
     */
    'Name'?: string;
    /**
     * 
     * @type {IGeneralInfoPagesFirstGeneralCardsComponentModel}
     * @memberof ITrainServiceListResponseDataItemAttributesModel
     */
    'Card'?: IGeneralInfoPagesFirstGeneralCardsComponentModel;
    /**
     * 
     * @type {IGeneralInfoPagesOverviewsComponentModel}
     * @memberof ITrainServiceListResponseDataItemAttributesModel
     */
    'Overview'?: IGeneralInfoPagesOverviewsComponentModel;
    /**
     * 
     * @type {Array<IGeneralInfoPagesReviewsComponentModel>}
     * @memberof ITrainServiceListResponseDataItemAttributesModel
     */
    'Reviews'?: Array<IGeneralInfoPagesReviewsComponentModel>;
    /**
     * 
     * @type {Array<IGeneralInfoPagesFaQsComponentModel>}
     * @memberof ITrainServiceListResponseDataItemAttributesModel
     */
    'FAQ'?: Array<IGeneralInfoPagesFaQsComponentModel>;
    /**
     * 
     * @type {string}
     * @memberof ITrainServiceListResponseDataItemAttributesModel
     */
    'Origin'?: ITrainServiceListResponseDataItemAttributesModelOriginEnum;
    /**
     * 
     * @type {string}
     * @memberof ITrainServiceListResponseDataItemAttributesModel
     */
    'Destination'?: ITrainServiceListResponseDataItemAttributesModelDestinationEnum;
    /**
     * 
     * @type {IAirportTransportationServiceListResponseDataItemAttributesGalleryModel}
     * @memberof ITrainServiceListResponseDataItemAttributesModel
     */
    'Gallery'?: IAirportTransportationServiceListResponseDataItemAttributesGalleryModel;
    /**
     * 
     * @type {string}
     * @memberof ITrainServiceListResponseDataItemAttributesModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ITrainServiceListResponseDataItemAttributesModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ITrainServiceListResponseDataItemAttributesModel
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByModel}
     * @memberof ITrainServiceListResponseDataItemAttributesModel
     */
    'createdBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof ITrainServiceListResponseDataItemAttributesModel
     */
    'updatedBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
}

export const ITrainServiceListResponseDataItemAttributesModelOriginEnum = {
    Tehran: 'Tehran'
} as const;

export type ITrainServiceListResponseDataItemAttributesModelOriginEnum = typeof ITrainServiceListResponseDataItemAttributesModelOriginEnum[keyof typeof ITrainServiceListResponseDataItemAttributesModelOriginEnum];
export const ITrainServiceListResponseDataItemAttributesModelDestinationEnum = {
    Tehran: 'Tehran'
} as const;

export type ITrainServiceListResponseDataItemAttributesModelDestinationEnum = typeof ITrainServiceListResponseDataItemAttributesModelDestinationEnum[keyof typeof ITrainServiceListResponseDataItemAttributesModelDestinationEnum];

/**
 * 
 * @export
 * @interface ITrainServiceListResponseDataItemLocalizedModel
 */
export interface ITrainServiceListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof ITrainServiceListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {ITrainServiceListResponseDataItemAttributesModel}
     * @memberof ITrainServiceListResponseDataItemLocalizedModel
     */
    'attributes'?: ITrainServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ITrainServiceListResponseDataItemModel
 */
export interface ITrainServiceListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof ITrainServiceListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {ITrainServiceListResponseDataItemAttributesModel}
     * @memberof ITrainServiceListResponseDataItemModel
     */
    'attributes'?: ITrainServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ITrainServiceListResponseModel
 */
export interface ITrainServiceListResponseModel {
    /**
     * 
     * @type {Array<ITrainServiceListResponseDataItemModel>}
     * @memberof ITrainServiceListResponseModel
     */
    'data'?: Array<ITrainServiceListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof ITrainServiceListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * 
 * @export
 * @interface ITrainServiceRequestDataModel
 */
export interface ITrainServiceRequestDataModel {
    /**
     * 
     * @type {string}
     * @memberof ITrainServiceRequestDataModel
     */
    'Name'?: string;
    /**
     * 
     * @type {IGeneralInfoPagesFirstGeneralCardsComponentModel}
     * @memberof ITrainServiceRequestDataModel
     */
    'Card'?: IGeneralInfoPagesFirstGeneralCardsComponentModel;
    /**
     * 
     * @type {IGeneralInfoPagesOverviewsComponentModel}
     * @memberof ITrainServiceRequestDataModel
     */
    'Overview'?: IGeneralInfoPagesOverviewsComponentModel;
    /**
     * 
     * @type {Array<IGeneralInfoPagesReviewsComponentModel>}
     * @memberof ITrainServiceRequestDataModel
     */
    'Reviews'?: Array<IGeneralInfoPagesReviewsComponentModel>;
    /**
     * 
     * @type {Array<IGeneralInfoPagesFaQsComponentModel>}
     * @memberof ITrainServiceRequestDataModel
     */
    'FAQ'?: Array<IGeneralInfoPagesFaQsComponentModel>;
    /**
     * 
     * @type {string}
     * @memberof ITrainServiceRequestDataModel
     */
    'Origin'?: ITrainServiceRequestDataModelOriginEnum;
    /**
     * 
     * @type {string}
     * @memberof ITrainServiceRequestDataModel
     */
    'Destination'?: ITrainServiceRequestDataModelDestinationEnum;
    /**
     * 
     * @type {Array<IAirportTransportationServiceRequestDataGalleryInnerModel>}
     * @memberof ITrainServiceRequestDataModel
     */
    'Gallery'?: Array<IAirportTransportationServiceRequestDataGalleryInnerModel>;
}

export const ITrainServiceRequestDataModelOriginEnum = {
    Tehran: 'Tehran'
} as const;

export type ITrainServiceRequestDataModelOriginEnum = typeof ITrainServiceRequestDataModelOriginEnum[keyof typeof ITrainServiceRequestDataModelOriginEnum];
export const ITrainServiceRequestDataModelDestinationEnum = {
    Tehran: 'Tehran'
} as const;

export type ITrainServiceRequestDataModelDestinationEnum = typeof ITrainServiceRequestDataModelDestinationEnum[keyof typeof ITrainServiceRequestDataModelDestinationEnum];

/**
 * 
 * @export
 * @interface ITrainServiceRequestModel
 */
export interface ITrainServiceRequestModel {
    /**
     * 
     * @type {ITrainServiceRequestDataModel}
     * @memberof ITrainServiceRequestModel
     */
    'data': ITrainServiceRequestDataModel;
}
/**
 * 
 * @export
 * @interface ITrainServiceResponseDataObjectLocalizedModel
 */
export interface ITrainServiceResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof ITrainServiceResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {ITrainServiceListResponseDataItemAttributesModel}
     * @memberof ITrainServiceResponseDataObjectLocalizedModel
     */
    'attributes'?: ITrainServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ITrainServiceResponseDataObjectModel
 */
export interface ITrainServiceResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof ITrainServiceResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {ITrainServiceListResponseDataItemAttributesModel}
     * @memberof ITrainServiceResponseDataObjectModel
     */
    'attributes'?: ITrainServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ITrainServiceResponseModel
 */
export interface ITrainServiceResponseModel {
    /**
     * 
     * @type {ITrainServiceResponseDataObjectModel}
     * @memberof ITrainServiceResponseModel
     */
    'data'?: ITrainServiceResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof ITrainServiceResponseModel
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface ITranslatingAndInterpretingServiceInfoListResponseDataItemLocalizedModel
 */
export interface ITranslatingAndInterpretingServiceInfoListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof ITranslatingAndInterpretingServiceInfoListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof ITranslatingAndInterpretingServiceInfoListResponseDataItemLocalizedModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ITranslatingAndInterpretingServiceInfoListResponseDataItemModel
 */
export interface ITranslatingAndInterpretingServiceInfoListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof ITranslatingAndInterpretingServiceInfoListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof ITranslatingAndInterpretingServiceInfoListResponseDataItemModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ITranslatingAndInterpretingServiceInfoListResponseModel
 */
export interface ITranslatingAndInterpretingServiceInfoListResponseModel {
    /**
     * 
     * @type {Array<ITranslatingAndInterpretingServiceInfoListResponseDataItemModel>}
     * @memberof ITranslatingAndInterpretingServiceInfoListResponseModel
     */
    'data'?: Array<ITranslatingAndInterpretingServiceInfoListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof ITranslatingAndInterpretingServiceInfoListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * 
 * @export
 * @interface ITranslatingAndInterpretingServiceInfoRequestModel
 */
export interface ITranslatingAndInterpretingServiceInfoRequestModel {
    /**
     * 
     * @type {IIranVisaInfoRequestDataModel}
     * @memberof ITranslatingAndInterpretingServiceInfoRequestModel
     */
    'data': IIranVisaInfoRequestDataModel;
}
/**
 * 
 * @export
 * @interface ITranslatingAndInterpretingServiceInfoResponseDataObjectLocalizedModel
 */
export interface ITranslatingAndInterpretingServiceInfoResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof ITranslatingAndInterpretingServiceInfoResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof ITranslatingAndInterpretingServiceInfoResponseDataObjectLocalizedModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ITranslatingAndInterpretingServiceInfoResponseDataObjectModel
 */
export interface ITranslatingAndInterpretingServiceInfoResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof ITranslatingAndInterpretingServiceInfoResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof ITranslatingAndInterpretingServiceInfoResponseDataObjectModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ITranslatingAndInterpretingServiceInfoResponseModel
 */
export interface ITranslatingAndInterpretingServiceInfoResponseModel {
    /**
     * 
     * @type {ITranslatingAndInterpretingServiceInfoResponseDataObjectModel}
     * @memberof ITranslatingAndInterpretingServiceInfoResponseModel
     */
    'data'?: ITranslatingAndInterpretingServiceInfoResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof ITranslatingAndInterpretingServiceInfoResponseModel
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface ITranslatingInterpretingServiceListResponseDataItemLocalizedModel
 */
export interface ITranslatingInterpretingServiceListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof ITranslatingInterpretingServiceListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {ICipInternationalAirportServiceListResponseDataItemAttributesModel}
     * @memberof ITranslatingInterpretingServiceListResponseDataItemLocalizedModel
     */
    'attributes'?: ICipInternationalAirportServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ITranslatingInterpretingServiceListResponseDataItemModel
 */
export interface ITranslatingInterpretingServiceListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof ITranslatingInterpretingServiceListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {ICipInternationalAirportServiceListResponseDataItemAttributesModel}
     * @memberof ITranslatingInterpretingServiceListResponseDataItemModel
     */
    'attributes'?: ICipInternationalAirportServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ITranslatingInterpretingServiceListResponseModel
 */
export interface ITranslatingInterpretingServiceListResponseModel {
    /**
     * 
     * @type {Array<ITranslatingInterpretingServiceListResponseDataItemModel>}
     * @memberof ITranslatingInterpretingServiceListResponseModel
     */
    'data'?: Array<ITranslatingInterpretingServiceListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof ITranslatingInterpretingServiceListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * 
 * @export
 * @interface ITranslatingInterpretingServiceRequestModel
 */
export interface ITranslatingInterpretingServiceRequestModel {
    /**
     * 
     * @type {ICipInternationalAirportServiceRequestDataModel}
     * @memberof ITranslatingInterpretingServiceRequestModel
     */
    'data': ICipInternationalAirportServiceRequestDataModel;
}
/**
 * 
 * @export
 * @interface ITranslatingInterpretingServiceResponseDataObjectLocalizedModel
 */
export interface ITranslatingInterpretingServiceResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof ITranslatingInterpretingServiceResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {ICipInternationalAirportServiceListResponseDataItemAttributesModel}
     * @memberof ITranslatingInterpretingServiceResponseDataObjectLocalizedModel
     */
    'attributes'?: ICipInternationalAirportServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ITranslatingInterpretingServiceResponseDataObjectModel
 */
export interface ITranslatingInterpretingServiceResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof ITranslatingInterpretingServiceResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {ICipInternationalAirportServiceListResponseDataItemAttributesModel}
     * @memberof ITranslatingInterpretingServiceResponseDataObjectModel
     */
    'attributes'?: ICipInternationalAirportServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ITranslatingInterpretingServiceResponseModel
 */
export interface ITranslatingInterpretingServiceResponseModel {
    /**
     * 
     * @type {ITranslatingInterpretingServiceResponseDataObjectModel}
     * @memberof ITranslatingInterpretingServiceResponseModel
     */
    'data'?: ITranslatingInterpretingServiceResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof ITranslatingInterpretingServiceResponseModel
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface ITravelInsuranceServiceInfoListResponseDataItemLocalizedModel
 */
export interface ITravelInsuranceServiceInfoListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof ITravelInsuranceServiceInfoListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof ITravelInsuranceServiceInfoListResponseDataItemLocalizedModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ITravelInsuranceServiceInfoListResponseDataItemModel
 */
export interface ITravelInsuranceServiceInfoListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof ITravelInsuranceServiceInfoListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof ITravelInsuranceServiceInfoListResponseDataItemModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ITravelInsuranceServiceInfoListResponseModel
 */
export interface ITravelInsuranceServiceInfoListResponseModel {
    /**
     * 
     * @type {Array<ITravelInsuranceServiceInfoListResponseDataItemModel>}
     * @memberof ITravelInsuranceServiceInfoListResponseModel
     */
    'data'?: Array<ITravelInsuranceServiceInfoListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof ITravelInsuranceServiceInfoListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * 
 * @export
 * @interface ITravelInsuranceServiceInfoRequestModel
 */
export interface ITravelInsuranceServiceInfoRequestModel {
    /**
     * 
     * @type {IIranVisaInfoRequestDataModel}
     * @memberof ITravelInsuranceServiceInfoRequestModel
     */
    'data': IIranVisaInfoRequestDataModel;
}
/**
 * 
 * @export
 * @interface ITravelInsuranceServiceInfoResponseDataObjectLocalizedModel
 */
export interface ITravelInsuranceServiceInfoResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof ITravelInsuranceServiceInfoResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof ITravelInsuranceServiceInfoResponseDataObjectLocalizedModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ITravelInsuranceServiceInfoResponseDataObjectModel
 */
export interface ITravelInsuranceServiceInfoResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof ITravelInsuranceServiceInfoResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof ITravelInsuranceServiceInfoResponseDataObjectModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ITravelInsuranceServiceInfoResponseModel
 */
export interface ITravelInsuranceServiceInfoResponseModel {
    /**
     * 
     * @type {ITravelInsuranceServiceInfoResponseDataObjectModel}
     * @memberof ITravelInsuranceServiceInfoResponseModel
     */
    'data'?: ITravelInsuranceServiceInfoResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof ITravelInsuranceServiceInfoResponseModel
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface ITravelInsuranceServiceListResponseDataItemLocalizedModel
 */
export interface ITravelInsuranceServiceListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof ITravelInsuranceServiceListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {ICipInternationalAirportServiceListResponseDataItemAttributesModel}
     * @memberof ITravelInsuranceServiceListResponseDataItemLocalizedModel
     */
    'attributes'?: ICipInternationalAirportServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ITravelInsuranceServiceListResponseDataItemModel
 */
export interface ITravelInsuranceServiceListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof ITravelInsuranceServiceListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {ICipInternationalAirportServiceListResponseDataItemAttributesModel}
     * @memberof ITravelInsuranceServiceListResponseDataItemModel
     */
    'attributes'?: ICipInternationalAirportServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ITravelInsuranceServiceListResponseModel
 */
export interface ITravelInsuranceServiceListResponseModel {
    /**
     * 
     * @type {Array<ITravelInsuranceServiceListResponseDataItemModel>}
     * @memberof ITravelInsuranceServiceListResponseModel
     */
    'data'?: Array<ITravelInsuranceServiceListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof ITravelInsuranceServiceListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * 
 * @export
 * @interface ITravelInsuranceServiceRequestModel
 */
export interface ITravelInsuranceServiceRequestModel {
    /**
     * 
     * @type {ICipInternationalAirportServiceRequestDataModel}
     * @memberof ITravelInsuranceServiceRequestModel
     */
    'data': ICipInternationalAirportServiceRequestDataModel;
}
/**
 * 
 * @export
 * @interface ITravelInsuranceServiceResponseDataObjectLocalizedModel
 */
export interface ITravelInsuranceServiceResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof ITravelInsuranceServiceResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {ICipInternationalAirportServiceListResponseDataItemAttributesModel}
     * @memberof ITravelInsuranceServiceResponseDataObjectLocalizedModel
     */
    'attributes'?: ICipInternationalAirportServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ITravelInsuranceServiceResponseDataObjectModel
 */
export interface ITravelInsuranceServiceResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof ITravelInsuranceServiceResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {ICipInternationalAirportServiceListResponseDataItemAttributesModel}
     * @memberof ITravelInsuranceServiceResponseDataObjectModel
     */
    'attributes'?: ICipInternationalAirportServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface ITravelInsuranceServiceResponseModel
 */
export interface ITravelInsuranceServiceResponseModel {
    /**
     * 
     * @type {ITravelInsuranceServiceResponseDataObjectModel}
     * @memberof ITravelInsuranceServiceResponseModel
     */
    'data'?: ITravelInsuranceServiceResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof ITravelInsuranceServiceResponseModel
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface IUnescoInfoListResponseDataItemLocalizedModel
 */
export interface IUnescoInfoListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IUnescoInfoListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof IUnescoInfoListResponseDataItemLocalizedModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IUnescoInfoListResponseDataItemModel
 */
export interface IUnescoInfoListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof IUnescoInfoListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof IUnescoInfoListResponseDataItemModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IUnescoInfoListResponseModel
 */
export interface IUnescoInfoListResponseModel {
    /**
     * 
     * @type {Array<IUnescoInfoListResponseDataItemModel>}
     * @memberof IUnescoInfoListResponseModel
     */
    'data'?: Array<IUnescoInfoListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof IUnescoInfoListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * 
 * @export
 * @interface IUnescoInfoRequestModel
 */
export interface IUnescoInfoRequestModel {
    /**
     * 
     * @type {IIranVisaInfoRequestDataModel}
     * @memberof IUnescoInfoRequestModel
     */
    'data': IIranVisaInfoRequestDataModel;
}
/**
 * 
 * @export
 * @interface IUnescoInfoResponseDataObjectLocalizedModel
 */
export interface IUnescoInfoResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IUnescoInfoResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof IUnescoInfoResponseDataObjectLocalizedModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IUnescoInfoResponseDataObjectModel
 */
export interface IUnescoInfoResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof IUnescoInfoResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof IUnescoInfoResponseDataObjectModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IUnescoInfoResponseModel
 */
export interface IUnescoInfoResponseModel {
    /**
     * 
     * @type {IUnescoInfoResponseDataObjectModel}
     * @memberof IUnescoInfoResponseModel
     */
    'data'?: IUnescoInfoResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof IUnescoInfoResponseModel
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface IUnescoListResponseDataItemAttributesModel
 */
export interface IUnescoListResponseDataItemAttributesModel {
    /**
     * 
     * @type {string}
     * @memberof IUnescoListResponseDataItemAttributesModel
     */
    'Name'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUnescoListResponseDataItemAttributesModel
     */
    'Type'?: IUnescoListResponseDataItemAttributesModelTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof IUnescoListResponseDataItemAttributesModel
     */
    'Description'?: string;
    /**
     * 
     * @type {IGeneralInfoPagesFirstGeneralCardsComponentModel}
     * @memberof IUnescoListResponseDataItemAttributesModel
     */
    'Card'?: IGeneralInfoPagesFirstGeneralCardsComponentModel;
    /**
     * 
     * @type {string}
     * @memberof IUnescoListResponseDataItemAttributesModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUnescoListResponseDataItemAttributesModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUnescoListResponseDataItemAttributesModel
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByModel}
     * @memberof IUnescoListResponseDataItemAttributesModel
     */
    'createdBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IUnescoListResponseDataItemAttributesModel
     */
    'updatedBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
}

export const IUnescoListResponseDataItemAttributesModelTypeEnum = {
    NatureHistorical: 'Nature Historical'
} as const;

export type IUnescoListResponseDataItemAttributesModelTypeEnum = typeof IUnescoListResponseDataItemAttributesModelTypeEnum[keyof typeof IUnescoListResponseDataItemAttributesModelTypeEnum];

/**
 * 
 * @export
 * @interface IUnescoListResponseDataItemLocalizedModel
 */
export interface IUnescoListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IUnescoListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IUnescoListResponseDataItemAttributesModel}
     * @memberof IUnescoListResponseDataItemLocalizedModel
     */
    'attributes'?: IUnescoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IUnescoListResponseDataItemModel
 */
export interface IUnescoListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof IUnescoListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {IUnescoListResponseDataItemAttributesModel}
     * @memberof IUnescoListResponseDataItemModel
     */
    'attributes'?: IUnescoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IUnescoListResponseModel
 */
export interface IUnescoListResponseModel {
    /**
     * 
     * @type {Array<IUnescoListResponseDataItemModel>}
     * @memberof IUnescoListResponseModel
     */
    'data'?: Array<IUnescoListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof IUnescoListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * 
 * @export
 * @interface IUnescoRequestDataModel
 */
export interface IUnescoRequestDataModel {
    /**
     * 
     * @type {string}
     * @memberof IUnescoRequestDataModel
     */
    'Name'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUnescoRequestDataModel
     */
    'Type'?: IUnescoRequestDataModelTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof IUnescoRequestDataModel
     */
    'Description'?: string;
    /**
     * 
     * @type {IGeneralInfoPagesFirstGeneralCardsComponentModel}
     * @memberof IUnescoRequestDataModel
     */
    'Card'?: IGeneralInfoPagesFirstGeneralCardsComponentModel;
}

export const IUnescoRequestDataModelTypeEnum = {
    NatureHistorical: 'Nature Historical'
} as const;

export type IUnescoRequestDataModelTypeEnum = typeof IUnescoRequestDataModelTypeEnum[keyof typeof IUnescoRequestDataModelTypeEnum];

/**
 * 
 * @export
 * @interface IUnescoRequestModel
 */
export interface IUnescoRequestModel {
    /**
     * 
     * @type {IUnescoRequestDataModel}
     * @memberof IUnescoRequestModel
     */
    'data': IUnescoRequestDataModel;
}
/**
 * 
 * @export
 * @interface IUnescoResponseDataObjectLocalizedModel
 */
export interface IUnescoResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IUnescoResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IUnescoListResponseDataItemAttributesModel}
     * @memberof IUnescoResponseDataObjectLocalizedModel
     */
    'attributes'?: IUnescoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IUnescoResponseDataObjectModel
 */
export interface IUnescoResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof IUnescoResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {IUnescoListResponseDataItemAttributesModel}
     * @memberof IUnescoResponseDataObjectModel
     */
    'attributes'?: IUnescoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IUnescoResponseModel
 */
export interface IUnescoResponseModel {
    /**
     * 
     * @type {IUnescoResponseDataObjectModel}
     * @memberof IUnescoResponseModel
     */
    'data'?: IUnescoResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof IUnescoResponseModel
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface IUploadFileListResponseDataItemLocalizedModel
 */
export interface IUploadFileListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IUploadFileListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IAboutAboutCardsComponentImageDataAttributesModel}
     * @memberof IUploadFileListResponseDataItemLocalizedModel
     */
    'attributes'?: IAboutAboutCardsComponentImageDataAttributesModel;
}
/**
 * 
 * @export
 * @interface IUploadFileListResponseDataItemModel
 */
export interface IUploadFileListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof IUploadFileListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {IAboutAboutCardsComponentImageDataAttributesModel}
     * @memberof IUploadFileListResponseDataItemModel
     */
    'attributes'?: IAboutAboutCardsComponentImageDataAttributesModel;
}
/**
 * 
 * @export
 * @interface IUploadFileListResponseModel
 */
export interface IUploadFileListResponseModel {
    /**
     * 
     * @type {Array<IUploadFileListResponseDataItemModel>}
     * @memberof IUploadFileListResponseModel
     */
    'data'?: Array<IUploadFileListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof IUploadFileListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * 
 * @export
 * @interface IUploadFileRequestDataModel
 */
export interface IUploadFileRequestDataModel {
    /**
     * 
     * @type {string}
     * @memberof IUploadFileRequestDataModel
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof IUploadFileRequestDataModel
     */
    'alternativeText'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUploadFileRequestDataModel
     */
    'caption'?: string;
    /**
     * 
     * @type {number}
     * @memberof IUploadFileRequestDataModel
     */
    'width'?: number;
    /**
     * 
     * @type {number}
     * @memberof IUploadFileRequestDataModel
     */
    'height'?: number;
    /**
     * 
     * @type {any}
     * @memberof IUploadFileRequestDataModel
     */
    'formats'?: any;
    /**
     * 
     * @type {string}
     * @memberof IUploadFileRequestDataModel
     */
    'hash': string;
    /**
     * 
     * @type {string}
     * @memberof IUploadFileRequestDataModel
     */
    'ext'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUploadFileRequestDataModel
     */
    'mime': string;
    /**
     * 
     * @type {number}
     * @memberof IUploadFileRequestDataModel
     */
    'size': number;
    /**
     * 
     * @type {string}
     * @memberof IUploadFileRequestDataModel
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof IUploadFileRequestDataModel
     */
    'previewUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUploadFileRequestDataModel
     */
    'provider': string;
    /**
     * 
     * @type {any}
     * @memberof IUploadFileRequestDataModel
     */
    'provider_metadata'?: any;
    /**
     * 
     * @type {Array<IAirportTransportationServiceRequestDataGalleryInnerModel>}
     * @memberof IUploadFileRequestDataModel
     */
    'related'?: Array<IAirportTransportationServiceRequestDataGalleryInnerModel>;
    /**
     * 
     * @type {IAirportTransportationServiceRequestDataGalleryInnerModel}
     * @memberof IUploadFileRequestDataModel
     */
    'folder'?: IAirportTransportationServiceRequestDataGalleryInnerModel;
    /**
     * 
     * @type {string}
     * @memberof IUploadFileRequestDataModel
     */
    'folderPath': string;
}
/**
 * 
 * @export
 * @interface IUploadFileRequestModel
 */
export interface IUploadFileRequestModel {
    /**
     * 
     * @type {IUploadFileRequestDataModel}
     * @memberof IUploadFileRequestModel
     */
    'data': IUploadFileRequestDataModel;
}
/**
 * 
 * @export
 * @interface IUploadFileResponseDataObjectLocalizedModel
 */
export interface IUploadFileResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IUploadFileResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IAboutAboutCardsComponentImageDataAttributesModel}
     * @memberof IUploadFileResponseDataObjectLocalizedModel
     */
    'attributes'?: IAboutAboutCardsComponentImageDataAttributesModel;
}
/**
 * 
 * @export
 * @interface IUploadFileResponseDataObjectModel
 */
export interface IUploadFileResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof IUploadFileResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {IAboutAboutCardsComponentImageDataAttributesModel}
     * @memberof IUploadFileResponseDataObjectModel
     */
    'attributes'?: IAboutAboutCardsComponentImageDataAttributesModel;
}
/**
 * 
 * @export
 * @interface IUploadFileResponseModel
 */
export interface IUploadFileResponseModel {
    /**
     * 
     * @type {IUploadFileResponseDataObjectModel}
     * @memberof IUploadFileResponseModel
     */
    'data'?: IUploadFileResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof IUploadFileResponseModel
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface IUploadFolderListResponseDataItemAttributesModel
 */
export interface IUploadFolderListResponseDataItemAttributesModel {
    /**
     * 
     * @type {string}
     * @memberof IUploadFolderListResponseDataItemAttributesModel
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof IUploadFolderListResponseDataItemAttributesModel
     */
    'pathId'?: number;
    /**
     * 
     * @type {IAboutAboutCardsComponentImageDataAttributesFolderModel}
     * @memberof IUploadFolderListResponseDataItemAttributesModel
     */
    'parent'?: IAboutAboutCardsComponentImageDataAttributesFolderModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsersModel}
     * @memberof IUploadFolderListResponseDataItemAttributesModel
     */
    'children'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsersModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsersModel}
     * @memberof IUploadFolderListResponseDataItemAttributesModel
     */
    'files'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsersModel;
    /**
     * 
     * @type {string}
     * @memberof IUploadFolderListResponseDataItemAttributesModel
     */
    'path'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUploadFolderListResponseDataItemAttributesModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUploadFolderListResponseDataItemAttributesModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IUploadFolderListResponseDataItemAttributesModel
     */
    'createdBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IUploadFolderListResponseDataItemAttributesModel
     */
    'updatedBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
}
/**
 * 
 * @export
 * @interface IUploadFolderListResponseDataItemLocalizedModel
 */
export interface IUploadFolderListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IUploadFolderListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IUploadFolderListResponseDataItemAttributesModel}
     * @memberof IUploadFolderListResponseDataItemLocalizedModel
     */
    'attributes'?: IUploadFolderListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IUploadFolderListResponseDataItemModel
 */
export interface IUploadFolderListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof IUploadFolderListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {IUploadFolderListResponseDataItemAttributesModel}
     * @memberof IUploadFolderListResponseDataItemModel
     */
    'attributes'?: IUploadFolderListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IUploadFolderListResponseModel
 */
export interface IUploadFolderListResponseModel {
    /**
     * 
     * @type {Array<IUploadFolderListResponseDataItemModel>}
     * @memberof IUploadFolderListResponseModel
     */
    'data'?: Array<IUploadFolderListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof IUploadFolderListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * 
 * @export
 * @interface IUploadFolderRequestDataModel
 */
export interface IUploadFolderRequestDataModel {
    /**
     * 
     * @type {string}
     * @memberof IUploadFolderRequestDataModel
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof IUploadFolderRequestDataModel
     */
    'pathId': number;
    /**
     * 
     * @type {IAirportTransportationServiceRequestDataGalleryInnerModel}
     * @memberof IUploadFolderRequestDataModel
     */
    'parent'?: IAirportTransportationServiceRequestDataGalleryInnerModel;
    /**
     * 
     * @type {Array<IAirportTransportationServiceRequestDataGalleryInnerModel>}
     * @memberof IUploadFolderRequestDataModel
     */
    'children'?: Array<IAirportTransportationServiceRequestDataGalleryInnerModel>;
    /**
     * 
     * @type {Array<IAirportTransportationServiceRequestDataGalleryInnerModel>}
     * @memberof IUploadFolderRequestDataModel
     */
    'files'?: Array<IAirportTransportationServiceRequestDataGalleryInnerModel>;
    /**
     * 
     * @type {string}
     * @memberof IUploadFolderRequestDataModel
     */
    'path': string;
}
/**
 * 
 * @export
 * @interface IUploadFolderRequestModel
 */
export interface IUploadFolderRequestModel {
    /**
     * 
     * @type {IUploadFolderRequestDataModel}
     * @memberof IUploadFolderRequestModel
     */
    'data': IUploadFolderRequestDataModel;
}
/**
 * 
 * @export
 * @interface IUploadFolderResponseDataObjectLocalizedModel
 */
export interface IUploadFolderResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IUploadFolderResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IUploadFolderListResponseDataItemAttributesModel}
     * @memberof IUploadFolderResponseDataObjectLocalizedModel
     */
    'attributes'?: IUploadFolderListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IUploadFolderResponseDataObjectModel
 */
export interface IUploadFolderResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof IUploadFolderResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {IUploadFolderListResponseDataItemAttributesModel}
     * @memberof IUploadFolderResponseDataObjectModel
     */
    'attributes'?: IUploadFolderListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IUploadFolderResponseModel
 */
export interface IUploadFolderResponseModel {
    /**
     * 
     * @type {IUploadFolderResponseDataObjectModel}
     * @memberof IUploadFolderResponseModel
     */
    'data'?: IUploadFolderResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof IUploadFolderResponseModel
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface IUseFullInformationInfoListResponseDataItemLocalizedModel
 */
export interface IUseFullInformationInfoListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IUseFullInformationInfoListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof IUseFullInformationInfoListResponseDataItemLocalizedModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IUseFullInformationInfoListResponseDataItemModel
 */
export interface IUseFullInformationInfoListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof IUseFullInformationInfoListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof IUseFullInformationInfoListResponseDataItemModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IUseFullInformationInfoListResponseModel
 */
export interface IUseFullInformationInfoListResponseModel {
    /**
     * 
     * @type {Array<IUseFullInformationInfoListResponseDataItemModel>}
     * @memberof IUseFullInformationInfoListResponseModel
     */
    'data'?: Array<IUseFullInformationInfoListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof IUseFullInformationInfoListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * 
 * @export
 * @interface IUseFullInformationInfoRequestModel
 */
export interface IUseFullInformationInfoRequestModel {
    /**
     * 
     * @type {IIranVisaInfoRequestDataModel}
     * @memberof IUseFullInformationInfoRequestModel
     */
    'data': IIranVisaInfoRequestDataModel;
}
/**
 * 
 * @export
 * @interface IUseFullInformationInfoResponseDataObjectLocalizedModel
 */
export interface IUseFullInformationInfoResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IUseFullInformationInfoResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof IUseFullInformationInfoResponseDataObjectLocalizedModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IUseFullInformationInfoResponseDataObjectModel
 */
export interface IUseFullInformationInfoResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof IUseFullInformationInfoResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {IIranVisaInfoListResponseDataItemAttributesModel}
     * @memberof IUseFullInformationInfoResponseDataObjectModel
     */
    'attributes'?: IIranVisaInfoListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IUseFullInformationInfoResponseModel
 */
export interface IUseFullInformationInfoResponseModel {
    /**
     * 
     * @type {IUseFullInformationInfoResponseDataObjectModel}
     * @memberof IUseFullInformationInfoResponseModel
     */
    'data'?: IUseFullInformationInfoResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof IUseFullInformationInfoResponseModel
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface IUseFullInformationListResponseDataItemAttributesModel
 */
export interface IUseFullInformationListResponseDataItemAttributesModel {
    /**
     * 
     * @type {string}
     * @memberof IUseFullInformationListResponseDataItemAttributesModel
     */
    'Name'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUseFullInformationListResponseDataItemAttributesModel
     */
    'MoreInfo'?: string;
    /**
     * 
     * @type {IGeneralInfoPagesFirstGeneralCardsComponentModel}
     * @memberof IUseFullInformationListResponseDataItemAttributesModel
     */
    'Card'?: IGeneralInfoPagesFirstGeneralCardsComponentModel;
    /**
     * 
     * @type {string}
     * @memberof IUseFullInformationListResponseDataItemAttributesModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUseFullInformationListResponseDataItemAttributesModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUseFullInformationListResponseDataItemAttributesModel
     */
    'publishedAt'?: string;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByModel}
     * @memberof IUseFullInformationListResponseDataItemAttributesModel
     */
    'createdBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IUseFullInformationListResponseDataItemAttributesModel
     */
    'updatedBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
}
/**
 * 
 * @export
 * @interface IUseFullInformationListResponseDataItemLocalizedModel
 */
export interface IUseFullInformationListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IUseFullInformationListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IUseFullInformationListResponseDataItemAttributesModel}
     * @memberof IUseFullInformationListResponseDataItemLocalizedModel
     */
    'attributes'?: IUseFullInformationListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IUseFullInformationListResponseDataItemModel
 */
export interface IUseFullInformationListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof IUseFullInformationListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {IUseFullInformationListResponseDataItemAttributesModel}
     * @memberof IUseFullInformationListResponseDataItemModel
     */
    'attributes'?: IUseFullInformationListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IUseFullInformationListResponseModel
 */
export interface IUseFullInformationListResponseModel {
    /**
     * 
     * @type {Array<IUseFullInformationListResponseDataItemModel>}
     * @memberof IUseFullInformationListResponseModel
     */
    'data'?: Array<IUseFullInformationListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof IUseFullInformationListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * 
 * @export
 * @interface IUseFullInformationRequestDataModel
 */
export interface IUseFullInformationRequestDataModel {
    /**
     * 
     * @type {string}
     * @memberof IUseFullInformationRequestDataModel
     */
    'Name'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUseFullInformationRequestDataModel
     */
    'MoreInfo'?: string;
    /**
     * 
     * @type {IGeneralInfoPagesFirstGeneralCardsComponentModel}
     * @memberof IUseFullInformationRequestDataModel
     */
    'Card'?: IGeneralInfoPagesFirstGeneralCardsComponentModel;
}
/**
 * 
 * @export
 * @interface IUseFullInformationRequestModel
 */
export interface IUseFullInformationRequestModel {
    /**
     * 
     * @type {IUseFullInformationRequestDataModel}
     * @memberof IUseFullInformationRequestModel
     */
    'data': IUseFullInformationRequestDataModel;
}
/**
 * 
 * @export
 * @interface IUseFullInformationResponseDataObjectLocalizedModel
 */
export interface IUseFullInformationResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IUseFullInformationResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IUseFullInformationListResponseDataItemAttributesModel}
     * @memberof IUseFullInformationResponseDataObjectLocalizedModel
     */
    'attributes'?: IUseFullInformationListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IUseFullInformationResponseDataObjectModel
 */
export interface IUseFullInformationResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof IUseFullInformationResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {IUseFullInformationListResponseDataItemAttributesModel}
     * @memberof IUseFullInformationResponseDataObjectModel
     */
    'attributes'?: IUseFullInformationListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IUseFullInformationResponseModel
 */
export interface IUseFullInformationResponseModel {
    /**
     * 
     * @type {IUseFullInformationResponseDataObjectModel}
     * @memberof IUseFullInformationResponseModel
     */
    'data'?: IUseFullInformationResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof IUseFullInformationResponseModel
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsPermissionListResponseDataItemAttributesModel
 */
export interface IUsersPermissionsPermissionListResponseDataItemAttributesModel {
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesModel
     */
    'action'?: string;
    /**
     * 
     * @type {IUsersPermissionsPermissionListResponseDataItemAttributesRoleModel}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesModel
     */
    'role'?: IUsersPermissionsPermissionListResponseDataItemAttributesRoleModel;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesModel
     */
    'createdBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesModel
     */
    'updatedBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesModel
 */
export interface IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesModel {
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesModel
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesModel
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesModel
     */
    'type'?: string;
    /**
     * 
     * @type {IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsModel}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesModel
     */
    'permissions'?: IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsModel;
    /**
     * 
     * @type {IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersModel}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesModel
     */
    'users'?: IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersModel;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesModel
     */
    'createdBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesModel
     */
    'updatedBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInnerAttributesModel
 */
export interface IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInnerAttributesModel {
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInnerAttributesModel
     */
    'action'?: string;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInnerAttributesModel
     */
    'role'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInnerAttributesModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInnerAttributesModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByModel}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInnerAttributesModel
     */
    'createdBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInnerAttributesModel
     */
    'updatedBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInnerModel
 */
export interface IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInnerModel {
    /**
     * 
     * @type {number}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInnerModel
     */
    'id'?: number;
    /**
     * 
     * @type {IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInnerAttributesModel}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInnerModel
     */
    'attributes'?: IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInnerAttributesModel;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsModel
 */
export interface IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsModel {
    /**
     * 
     * @type {Array<IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInnerModel>}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsModel
     */
    'data'?: Array<IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInnerModel>;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributesModel
 */
export interface IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributesModel {
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributesModel
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributesModel
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributesModel
     */
    'provider'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributesModel
     */
    'resetPasswordToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributesModel
     */
    'confirmationToken'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributesModel
     */
    'confirmed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributesModel
     */
    'blocked'?: boolean;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributesModel
     */
    'role'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributesModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributesModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributesModel
     */
    'createdBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributesModel
     */
    'updatedBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerModel
 */
export interface IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerModel {
    /**
     * 
     * @type {number}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerModel
     */
    'id'?: number;
    /**
     * 
     * @type {IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributesModel}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerModel
     */
    'attributes'?: IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributesModel;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersModel
 */
export interface IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersModel {
    /**
     * 
     * @type {Array<IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerModel>}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersModel
     */
    'data'?: Array<IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerModel>;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataModel
 */
export interface IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataModel {
    /**
     * 
     * @type {number}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataModel
     */
    'id'?: number;
    /**
     * 
     * @type {IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesModel}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataModel
     */
    'attributes'?: IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesModel;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsPermissionListResponseDataItemAttributesRoleModel
 */
export interface IUsersPermissionsPermissionListResponseDataItemAttributesRoleModel {
    /**
     * 
     * @type {IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataModel}
     * @memberof IUsersPermissionsPermissionListResponseDataItemAttributesRoleModel
     */
    'data'?: IUsersPermissionsPermissionListResponseDataItemAttributesRoleDataModel;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsPermissionListResponseDataItemLocalizedModel
 */
export interface IUsersPermissionsPermissionListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IUsersPermissionsPermissionListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IUsersPermissionsPermissionListResponseDataItemAttributesModel}
     * @memberof IUsersPermissionsPermissionListResponseDataItemLocalizedModel
     */
    'attributes'?: IUsersPermissionsPermissionListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsPermissionListResponseDataItemModel
 */
export interface IUsersPermissionsPermissionListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof IUsersPermissionsPermissionListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {IUsersPermissionsPermissionListResponseDataItemAttributesModel}
     * @memberof IUsersPermissionsPermissionListResponseDataItemModel
     */
    'attributes'?: IUsersPermissionsPermissionListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsPermissionListResponseModel
 */
export interface IUsersPermissionsPermissionListResponseModel {
    /**
     * 
     * @type {Array<IUsersPermissionsPermissionListResponseDataItemModel>}
     * @memberof IUsersPermissionsPermissionListResponseModel
     */
    'data'?: Array<IUsersPermissionsPermissionListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof IUsersPermissionsPermissionListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsPermissionRequestDataModel
 */
export interface IUsersPermissionsPermissionRequestDataModel {
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsPermissionRequestDataModel
     */
    'action': string;
    /**
     * 
     * @type {IAirportTransportationServiceRequestDataGalleryInnerModel}
     * @memberof IUsersPermissionsPermissionRequestDataModel
     */
    'role'?: IAirportTransportationServiceRequestDataGalleryInnerModel;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsPermissionRequestModel
 */
export interface IUsersPermissionsPermissionRequestModel {
    /**
     * 
     * @type {IUsersPermissionsPermissionRequestDataModel}
     * @memberof IUsersPermissionsPermissionRequestModel
     */
    'data': IUsersPermissionsPermissionRequestDataModel;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsPermissionResponseDataObjectLocalizedModel
 */
export interface IUsersPermissionsPermissionResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IUsersPermissionsPermissionResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IUsersPermissionsPermissionListResponseDataItemAttributesModel}
     * @memberof IUsersPermissionsPermissionResponseDataObjectLocalizedModel
     */
    'attributes'?: IUsersPermissionsPermissionListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsPermissionResponseDataObjectModel
 */
export interface IUsersPermissionsPermissionResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof IUsersPermissionsPermissionResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {IUsersPermissionsPermissionListResponseDataItemAttributesModel}
     * @memberof IUsersPermissionsPermissionResponseDataObjectModel
     */
    'attributes'?: IUsersPermissionsPermissionListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsPermissionResponseModel
 */
export interface IUsersPermissionsPermissionResponseModel {
    /**
     * 
     * @type {IUsersPermissionsPermissionResponseDataObjectModel}
     * @memberof IUsersPermissionsPermissionResponseModel
     */
    'data'?: IUsersPermissionsPermissionResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof IUsersPermissionsPermissionResponseModel
     */
    'meta'?: object;
}
/**
 * every action of every controller
 * @export
 * @interface IUsersPermissionsPermissionsTreeValueControllersValueValueModel
 */
export interface IUsersPermissionsPermissionsTreeValueControllersValueValueModel {
    /**
     * 
     * @type {boolean}
     * @memberof IUsersPermissionsPermissionsTreeValueControllersValueValueModel
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsPermissionsTreeValueControllersValueValueModel
     */
    'policy'?: string;
}
/**
 * every api
 * @export
 * @interface IUsersPermissionsPermissionsTreeValueModel
 */
export interface IUsersPermissionsPermissionsTreeValueModel {
    /**
     * every controller of the api
     * @type {{ [key: string]: { [key: string]: IUsersPermissionsPermissionsTreeValueControllersValueValueModel; }; }}
     * @memberof IUsersPermissionsPermissionsTreeValueModel
     */
    'controllers'?: { [key: string]: { [key: string]: IUsersPermissionsPermissionsTreeValueControllersValueValueModel; }; };
}
/**
 * 
 * @export
 * @interface IUsersPermissionsRoleListResponseDataItemAttributesModel
 */
export interface IUsersPermissionsRoleListResponseDataItemAttributesModel {
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesModel
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesModel
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesModel
     */
    'type'?: string;
    /**
     * 
     * @type {IUsersPermissionsRoleListResponseDataItemAttributesPermissionsModel}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesModel
     */
    'permissions'?: IUsersPermissionsRoleListResponseDataItemAttributesPermissionsModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsersModel}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesModel
     */
    'users'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsersModel;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesModel
     */
    'createdBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesModel
     */
    'updatedBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesModel
 */
export interface IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesModel {
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesModel
     */
    'action'?: string;
    /**
     * 
     * @type {IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesModel
     */
    'role'?: IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleModel;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesModel
     */
    'createdBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesModel
     */
    'updatedBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesModel
 */
export interface IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesModel {
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesModel
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesModel
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesModel
     */
    'type'?: string;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsersModel}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesModel
     */
    'permissions'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesUsersModel;
    /**
     * 
     * @type {IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersModel}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesModel
     */
    'users'?: IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersModel;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesModel
     */
    'createdBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesModel
     */
    'updatedBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributesModel
 */
export interface IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributesModel {
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributesModel
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributesModel
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributesModel
     */
    'provider'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributesModel
     */
    'resetPasswordToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributesModel
     */
    'confirmationToken'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributesModel
     */
    'confirmed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributesModel
     */
    'blocked'?: boolean;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributesModel
     */
    'role'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributesModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributesModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByModel}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributesModel
     */
    'createdBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributesModel
     */
    'updatedBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerModel
 */
export interface IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerModel {
    /**
     * 
     * @type {number}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerModel
     */
    'id'?: number;
    /**
     * 
     * @type {IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributesModel}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerModel
     */
    'attributes'?: IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributesModel;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersModel
 */
export interface IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersModel {
    /**
     * 
     * @type {Array<IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerModel>}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersModel
     */
    'data'?: Array<IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerModel>;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataModel
 */
export interface IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataModel {
    /**
     * 
     * @type {number}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataModel
     */
    'id'?: number;
    /**
     * 
     * @type {IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesModel}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataModel
     */
    'attributes'?: IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesModel;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleModel
 */
export interface IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleModel {
    /**
     * 
     * @type {IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataModel}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleModel
     */
    'data'?: IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataModel;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerModel
 */
export interface IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerModel {
    /**
     * 
     * @type {number}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerModel
     */
    'id'?: number;
    /**
     * 
     * @type {IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesModel}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerModel
     */
    'attributes'?: IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesModel;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsRoleListResponseDataItemAttributesPermissionsModel
 */
export interface IUsersPermissionsRoleListResponseDataItemAttributesPermissionsModel {
    /**
     * 
     * @type {Array<IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerModel>}
     * @memberof IUsersPermissionsRoleListResponseDataItemAttributesPermissionsModel
     */
    'data'?: Array<IUsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerModel>;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsRoleListResponseDataItemLocalizedModel
 */
export interface IUsersPermissionsRoleListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IUsersPermissionsRoleListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IUsersPermissionsRoleListResponseDataItemAttributesModel}
     * @memberof IUsersPermissionsRoleListResponseDataItemLocalizedModel
     */
    'attributes'?: IUsersPermissionsRoleListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsRoleListResponseDataItemModel
 */
export interface IUsersPermissionsRoleListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof IUsersPermissionsRoleListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {IUsersPermissionsRoleListResponseDataItemAttributesModel}
     * @memberof IUsersPermissionsRoleListResponseDataItemModel
     */
    'attributes'?: IUsersPermissionsRoleListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsRoleListResponseModel
 */
export interface IUsersPermissionsRoleListResponseModel {
    /**
     * 
     * @type {Array<IUsersPermissionsRoleListResponseDataItemModel>}
     * @memberof IUsersPermissionsRoleListResponseModel
     */
    'data'?: Array<IUsersPermissionsRoleListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof IUsersPermissionsRoleListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsRoleModel
 */
export interface IUsersPermissionsRoleModel {
    /**
     * 
     * @type {number}
     * @memberof IUsersPermissionsRoleModel
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsRoleModel
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsRoleModel
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsRoleModel
     */
    'type'?: string;
    /**
     * 
     * @type {IDatetimeModel}
     * @memberof IUsersPermissionsRoleModel
     */
    'createdAt'?: IDatetimeModel;
    /**
     * 
     * @type {IDatetimeModel}
     * @memberof IUsersPermissionsRoleModel
     */
    'updatedAt'?: IDatetimeModel;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsRoleRequestDataModel
 */
export interface IUsersPermissionsRoleRequestDataModel {
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsRoleRequestDataModel
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsRoleRequestDataModel
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsRoleRequestDataModel
     */
    'type'?: string;
    /**
     * 
     * @type {Array<IAirportTransportationServiceRequestDataGalleryInnerModel>}
     * @memberof IUsersPermissionsRoleRequestDataModel
     */
    'permissions'?: Array<IAirportTransportationServiceRequestDataGalleryInnerModel>;
    /**
     * 
     * @type {Array<IAirportTransportationServiceRequestDataGalleryInnerModel>}
     * @memberof IUsersPermissionsRoleRequestDataModel
     */
    'users'?: Array<IAirportTransportationServiceRequestDataGalleryInnerModel>;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsRoleResponseDataObjectLocalizedModel
 */
export interface IUsersPermissionsRoleResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IUsersPermissionsRoleResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IUsersPermissionsRoleListResponseDataItemAttributesModel}
     * @memberof IUsersPermissionsRoleResponseDataObjectLocalizedModel
     */
    'attributes'?: IUsersPermissionsRoleListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsRoleResponseDataObjectModel
 */
export interface IUsersPermissionsRoleResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof IUsersPermissionsRoleResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {IUsersPermissionsRoleListResponseDataItemAttributesModel}
     * @memberof IUsersPermissionsRoleResponseDataObjectModel
     */
    'attributes'?: IUsersPermissionsRoleListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsRoleResponseModel
 */
export interface IUsersPermissionsRoleResponseModel {
    /**
     * 
     * @type {IUsersPermissionsRoleResponseDataObjectModel}
     * @memberof IUsersPermissionsRoleResponseModel
     */
    'data'?: IUsersPermissionsRoleResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof IUsersPermissionsRoleResponseModel
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsUserListResponseDataItemAttributesModel
 */
export interface IUsersPermissionsUserListResponseDataItemAttributesModel {
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsUserListResponseDataItemAttributesModel
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsUserListResponseDataItemAttributesModel
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsUserListResponseDataItemAttributesModel
     */
    'provider'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsUserListResponseDataItemAttributesModel
     */
    'resetPasswordToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsUserListResponseDataItemAttributesModel
     */
    'confirmationToken'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IUsersPermissionsUserListResponseDataItemAttributesModel
     */
    'confirmed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IUsersPermissionsUserListResponseDataItemAttributesModel
     */
    'blocked'?: boolean;
    /**
     * 
     * @type {IUsersPermissionsPermissionListResponseDataItemAttributesRoleModel}
     * @memberof IUsersPermissionsUserListResponseDataItemAttributesModel
     */
    'role'?: IUsersPermissionsPermissionListResponseDataItemAttributesRoleModel;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsUserListResponseDataItemAttributesModel
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsUserListResponseDataItemAttributesModel
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IUsersPermissionsUserListResponseDataItemAttributesModel
     */
    'createdBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
    /**
     * 
     * @type {IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel}
     * @memberof IUsersPermissionsUserListResponseDataItemAttributesModel
     */
    'updatedBy'?: IAboutPageDetailListResponseDataItemAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributesRoleModel;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsUserListResponseDataItemLocalizedModel
 */
export interface IUsersPermissionsUserListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IUsersPermissionsUserListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IUsersPermissionsUserListResponseDataItemAttributesModel}
     * @memberof IUsersPermissionsUserListResponseDataItemLocalizedModel
     */
    'attributes'?: IUsersPermissionsUserListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsUserListResponseDataItemModel
 */
export interface IUsersPermissionsUserListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof IUsersPermissionsUserListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {IUsersPermissionsUserListResponseDataItemAttributesModel}
     * @memberof IUsersPermissionsUserListResponseDataItemModel
     */
    'attributes'?: IUsersPermissionsUserListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsUserListResponseModel
 */
export interface IUsersPermissionsUserListResponseModel {
    /**
     * 
     * @type {Array<IUsersPermissionsUserListResponseDataItemModel>}
     * @memberof IUsersPermissionsUserListResponseModel
     */
    'data'?: Array<IUsersPermissionsUserListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof IUsersPermissionsUserListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsUserModel
 */
export interface IUsersPermissionsUserModel {
    /**
     * 
     * @type {number}
     * @memberof IUsersPermissionsUserModel
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsUserModel
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsUserModel
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsUserModel
     */
    'provider'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IUsersPermissionsUserModel
     */
    'confirmed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IUsersPermissionsUserModel
     */
    'blocked'?: boolean;
    /**
     * 
     * @type {IDatetimeModel}
     * @memberof IUsersPermissionsUserModel
     */
    'createdAt'?: IDatetimeModel;
    /**
     * 
     * @type {IDatetimeModel}
     * @memberof IUsersPermissionsUserModel
     */
    'updatedAt'?: IDatetimeModel;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsUserRegistrationModel
 */
export interface IUsersPermissionsUserRegistrationModel {
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsUserRegistrationModel
     */
    'jwt'?: string;
    /**
     * 
     * @type {IUsersPermissionsUserModel}
     * @memberof IUsersPermissionsUserRegistrationModel
     */
    'user'?: IUsersPermissionsUserModel;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsUserRequestDataModel
 */
export interface IUsersPermissionsUserRequestDataModel {
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsUserRequestDataModel
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsUserRequestDataModel
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsUserRequestDataModel
     */
    'provider'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsUserRequestDataModel
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsUserRequestDataModel
     */
    'resetPasswordToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof IUsersPermissionsUserRequestDataModel
     */
    'confirmationToken'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IUsersPermissionsUserRequestDataModel
     */
    'confirmed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IUsersPermissionsUserRequestDataModel
     */
    'blocked'?: boolean;
    /**
     * 
     * @type {IAirportTransportationServiceRequestDataGalleryInnerModel}
     * @memberof IUsersPermissionsUserRequestDataModel
     */
    'role'?: IAirportTransportationServiceRequestDataGalleryInnerModel;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsUserRequestModel
 */
export interface IUsersPermissionsUserRequestModel {
    /**
     * 
     * @type {IUsersPermissionsUserRequestDataModel}
     * @memberof IUsersPermissionsUserRequestModel
     */
    'data': IUsersPermissionsUserRequestDataModel;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsUserResponseDataObjectLocalizedModel
 */
export interface IUsersPermissionsUserResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IUsersPermissionsUserResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {IUsersPermissionsUserListResponseDataItemAttributesModel}
     * @memberof IUsersPermissionsUserResponseDataObjectLocalizedModel
     */
    'attributes'?: IUsersPermissionsUserListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsUserResponseDataObjectModel
 */
export interface IUsersPermissionsUserResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof IUsersPermissionsUserResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {IUsersPermissionsUserListResponseDataItemAttributesModel}
     * @memberof IUsersPermissionsUserResponseDataObjectModel
     */
    'attributes'?: IUsersPermissionsUserListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IUsersPermissionsUserResponseModel
 */
export interface IUsersPermissionsUserResponseModel {
    /**
     * 
     * @type {IUsersPermissionsUserResponseDataObjectModel}
     * @memberof IUsersPermissionsUserResponseModel
     */
    'data'?: IUsersPermissionsUserResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof IUsersPermissionsUserResponseModel
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface IVipDomesticAirportServiceListResponseDataItemLocalizedModel
 */
export interface IVipDomesticAirportServiceListResponseDataItemLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IVipDomesticAirportServiceListResponseDataItemLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {ICipInternationalAirportServiceListResponseDataItemAttributesModel}
     * @memberof IVipDomesticAirportServiceListResponseDataItemLocalizedModel
     */
    'attributes'?: ICipInternationalAirportServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IVipDomesticAirportServiceListResponseDataItemModel
 */
export interface IVipDomesticAirportServiceListResponseDataItemModel {
    /**
     * 
     * @type {number}
     * @memberof IVipDomesticAirportServiceListResponseDataItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {ICipInternationalAirportServiceListResponseDataItemAttributesModel}
     * @memberof IVipDomesticAirportServiceListResponseDataItemModel
     */
    'attributes'?: ICipInternationalAirportServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IVipDomesticAirportServiceListResponseModel
 */
export interface IVipDomesticAirportServiceListResponseModel {
    /**
     * 
     * @type {Array<IVipDomesticAirportServiceListResponseDataItemModel>}
     * @memberof IVipDomesticAirportServiceListResponseModel
     */
    'data'?: Array<IVipDomesticAirportServiceListResponseDataItemModel>;
    /**
     * 
     * @type {IAboutPageDetailListResponseMetaModel}
     * @memberof IVipDomesticAirportServiceListResponseModel
     */
    'meta'?: IAboutPageDetailListResponseMetaModel;
}
/**
 * 
 * @export
 * @interface IVipDomesticAirportServiceRequestModel
 */
export interface IVipDomesticAirportServiceRequestModel {
    /**
     * 
     * @type {ICipInternationalAirportServiceRequestDataModel}
     * @memberof IVipDomesticAirportServiceRequestModel
     */
    'data': ICipInternationalAirportServiceRequestDataModel;
}
/**
 * 
 * @export
 * @interface IVipDomesticAirportServiceResponseDataObjectLocalizedModel
 */
export interface IVipDomesticAirportServiceResponseDataObjectLocalizedModel {
    /**
     * 
     * @type {number}
     * @memberof IVipDomesticAirportServiceResponseDataObjectLocalizedModel
     */
    'id'?: number;
    /**
     * 
     * @type {ICipInternationalAirportServiceListResponseDataItemAttributesModel}
     * @memberof IVipDomesticAirportServiceResponseDataObjectLocalizedModel
     */
    'attributes'?: ICipInternationalAirportServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IVipDomesticAirportServiceResponseDataObjectModel
 */
export interface IVipDomesticAirportServiceResponseDataObjectModel {
    /**
     * 
     * @type {number}
     * @memberof IVipDomesticAirportServiceResponseDataObjectModel
     */
    'id'?: number;
    /**
     * 
     * @type {ICipInternationalAirportServiceListResponseDataItemAttributesModel}
     * @memberof IVipDomesticAirportServiceResponseDataObjectModel
     */
    'attributes'?: ICipInternationalAirportServiceListResponseDataItemAttributesModel;
}
/**
 * 
 * @export
 * @interface IVipDomesticAirportServiceResponseModel
 */
export interface IVipDomesticAirportServiceResponseModel {
    /**
     * 
     * @type {IVipDomesticAirportServiceResponseDataObjectModel}
     * @memberof IVipDomesticAirportServiceResponseModel
     */
    'data'?: IVipDomesticAirportServiceResponseDataObjectModel;
    /**
     * 
     * @type {object}
     * @memberof IVipDomesticAirportServiceResponseModel
     */
    'meta'?: object;
}

/**
 * AboutPageDetailApi - axios parameter creator
 * @export
 */
export const AboutPageDetailApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAboutPageDetail: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/about-page-detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAboutPageDetail: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/about-page-detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IAboutPageDetailRequestModel} iAboutPageDetailRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAboutPageDetail: async (iAboutPageDetailRequestModel: IAboutPageDetailRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iAboutPageDetailRequestModel' is not null or undefined
            assertParamExists('putAboutPageDetail', 'iAboutPageDetailRequestModel', iAboutPageDetailRequestModel)
            const localVarPath = `/about-page-detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iAboutPageDetailRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AboutPageDetailApi - functional programming interface
 * @export
 */
export const AboutPageDetailApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AboutPageDetailApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAboutPageDetail(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAboutPageDetail(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAboutPageDetail(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IAboutPageDetailListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAboutPageDetail(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IAboutPageDetailRequestModel} iAboutPageDetailRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putAboutPageDetail(iAboutPageDetailRequestModel: IAboutPageDetailRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IAboutPageDetailResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putAboutPageDetail(iAboutPageDetailRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AboutPageDetailApi - factory interface
 * @export
 */
export const AboutPageDetailApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AboutPageDetailApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAboutPageDetail(options?: any): AxiosPromise<number> {
            return localVarFp.deleteAboutPageDetail(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAboutPageDetail(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: any): AxiosPromise<IAboutPageDetailListResponseModel> {
            return localVarFp.getAboutPageDetail(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IAboutPageDetailRequestModel} iAboutPageDetailRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAboutPageDetail(iAboutPageDetailRequestModel: IAboutPageDetailRequestModel, options?: any): AxiosPromise<IAboutPageDetailResponseModel> {
            return localVarFp.putAboutPageDetail(iAboutPageDetailRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAboutPageDetail operation in AboutPageDetailApi.
 * @export
 * @interface AboutPageDetailApiGetAboutPageDetailRequest
 */
export interface AboutPageDetailApiGetAboutPageDetailRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof AboutPageDetailApiGetAboutPageDetail
     */
    readonly sort?: string

    /**
     * Retun page/pageSize (default: true)
     * @type {boolean}
     * @memberof AboutPageDetailApiGetAboutPageDetail
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof AboutPageDetailApiGetAboutPageDetail
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof AboutPageDetailApiGetAboutPageDetail
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof AboutPageDetailApiGetAboutPageDetail
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof AboutPageDetailApiGetAboutPageDetail
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof AboutPageDetailApiGetAboutPageDetail
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof AboutPageDetailApiGetAboutPageDetail
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof AboutPageDetailApiGetAboutPageDetail
     */
    readonly filters?: object
}

/**
 * Request parameters for putAboutPageDetail operation in AboutPageDetailApi.
 * @export
 * @interface AboutPageDetailApiPutAboutPageDetailRequest
 */
export interface AboutPageDetailApiPutAboutPageDetailRequest {
    /**
     * 
     * @type {IAboutPageDetailRequestModel}
     * @memberof AboutPageDetailApiPutAboutPageDetail
     */
    readonly iAboutPageDetailRequestModel: IAboutPageDetailRequestModel
}

/**
 * AboutPageDetailApi - object-oriented interface
 * @export
 * @class AboutPageDetailApi
 * @extends {BaseAPI}
 */
export class AboutPageDetailApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AboutPageDetailApi
     */
    public deleteAboutPageDetail(options?: AxiosRequestConfig) {
        return AboutPageDetailApiFp(this.configuration).deleteAboutPageDetail(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AboutPageDetailApiGetAboutPageDetailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AboutPageDetailApi
     */
    public getAboutPageDetail(requestParameters: AboutPageDetailApiGetAboutPageDetailRequest = {}, options?: AxiosRequestConfig) {
        return AboutPageDetailApiFp(this.configuration).getAboutPageDetail(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AboutPageDetailApiPutAboutPageDetailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AboutPageDetailApi
     */
    public putAboutPageDetail(requestParameters: AboutPageDetailApiPutAboutPageDetailRequest, options?: AxiosRequestConfig) {
        return AboutPageDetailApiFp(this.configuration).putAboutPageDetail(requestParameters.iAboutPageDetailRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AirportTransportationServiceApi - axios parameter creator
 * @export
 */
export const AirportTransportationServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAirportTransportationServicesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAirportTransportationServicesId', 'id', id)
            const localVarPath = `/airport-transportation-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAirportTransportationServices: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/airport-transportation-services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAirportTransportationServicesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAirportTransportationServicesId', 'id', id)
            const localVarPath = `/airport-transportation-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IAirportTransportationServiceRequestModel} iAirportTransportationServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAirportTransportationServices: async (iAirportTransportationServiceRequestModel: IAirportTransportationServiceRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iAirportTransportationServiceRequestModel' is not null or undefined
            assertParamExists('postAirportTransportationServices', 'iAirportTransportationServiceRequestModel', iAirportTransportationServiceRequestModel)
            const localVarPath = `/airport-transportation-services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iAirportTransportationServiceRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {IAirportTransportationServiceRequestModel} iAirportTransportationServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAirportTransportationServicesId: async (id: number, iAirportTransportationServiceRequestModel: IAirportTransportationServiceRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putAirportTransportationServicesId', 'id', id)
            // verify required parameter 'iAirportTransportationServiceRequestModel' is not null or undefined
            assertParamExists('putAirportTransportationServicesId', 'iAirportTransportationServiceRequestModel', iAirportTransportationServiceRequestModel)
            const localVarPath = `/airport-transportation-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iAirportTransportationServiceRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AirportTransportationServiceApi - functional programming interface
 * @export
 */
export const AirportTransportationServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AirportTransportationServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAirportTransportationServicesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAirportTransportationServicesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAirportTransportationServices(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IAirportTransportationServiceListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAirportTransportationServices(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAirportTransportationServicesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IAirportTransportationServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAirportTransportationServicesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IAirportTransportationServiceRequestModel} iAirportTransportationServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAirportTransportationServices(iAirportTransportationServiceRequestModel: IAirportTransportationServiceRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IAirportTransportationServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAirportTransportationServices(iAirportTransportationServiceRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {IAirportTransportationServiceRequestModel} iAirportTransportationServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putAirportTransportationServicesId(id: number, iAirportTransportationServiceRequestModel: IAirportTransportationServiceRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IAirportTransportationServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putAirportTransportationServicesId(id, iAirportTransportationServiceRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AirportTransportationServiceApi - factory interface
 * @export
 */
export const AirportTransportationServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AirportTransportationServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAirportTransportationServicesId(id: number, options?: any): AxiosPromise<number> {
            return localVarFp.deleteAirportTransportationServicesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAirportTransportationServices(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: any): AxiosPromise<IAirportTransportationServiceListResponseModel> {
            return localVarFp.getAirportTransportationServices(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAirportTransportationServicesId(id: number, options?: any): AxiosPromise<IAirportTransportationServiceResponseModel> {
            return localVarFp.getAirportTransportationServicesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IAirportTransportationServiceRequestModel} iAirportTransportationServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAirportTransportationServices(iAirportTransportationServiceRequestModel: IAirportTransportationServiceRequestModel, options?: any): AxiosPromise<IAirportTransportationServiceResponseModel> {
            return localVarFp.postAirportTransportationServices(iAirportTransportationServiceRequestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {IAirportTransportationServiceRequestModel} iAirportTransportationServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAirportTransportationServicesId(id: number, iAirportTransportationServiceRequestModel: IAirportTransportationServiceRequestModel, options?: any): AxiosPromise<IAirportTransportationServiceResponseModel> {
            return localVarFp.putAirportTransportationServicesId(id, iAirportTransportationServiceRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteAirportTransportationServicesId operation in AirportTransportationServiceApi.
 * @export
 * @interface AirportTransportationServiceApiDeleteAirportTransportationServicesIdRequest
 */
export interface AirportTransportationServiceApiDeleteAirportTransportationServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof AirportTransportationServiceApiDeleteAirportTransportationServicesId
     */
    readonly id: number
}

/**
 * Request parameters for getAirportTransportationServices operation in AirportTransportationServiceApi.
 * @export
 * @interface AirportTransportationServiceApiGetAirportTransportationServicesRequest
 */
export interface AirportTransportationServiceApiGetAirportTransportationServicesRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof AirportTransportationServiceApiGetAirportTransportationServices
     */
    readonly sort?: string

    /**
     * Retun page/pageSize (default: true)
     * @type {boolean}
     * @memberof AirportTransportationServiceApiGetAirportTransportationServices
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof AirportTransportationServiceApiGetAirportTransportationServices
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof AirportTransportationServiceApiGetAirportTransportationServices
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof AirportTransportationServiceApiGetAirportTransportationServices
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof AirportTransportationServiceApiGetAirportTransportationServices
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof AirportTransportationServiceApiGetAirportTransportationServices
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof AirportTransportationServiceApiGetAirportTransportationServices
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof AirportTransportationServiceApiGetAirportTransportationServices
     */
    readonly filters?: object
}

/**
 * Request parameters for getAirportTransportationServicesId operation in AirportTransportationServiceApi.
 * @export
 * @interface AirportTransportationServiceApiGetAirportTransportationServicesIdRequest
 */
export interface AirportTransportationServiceApiGetAirportTransportationServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof AirportTransportationServiceApiGetAirportTransportationServicesId
     */
    readonly id: number
}

/**
 * Request parameters for postAirportTransportationServices operation in AirportTransportationServiceApi.
 * @export
 * @interface AirportTransportationServiceApiPostAirportTransportationServicesRequest
 */
export interface AirportTransportationServiceApiPostAirportTransportationServicesRequest {
    /**
     * 
     * @type {IAirportTransportationServiceRequestModel}
     * @memberof AirportTransportationServiceApiPostAirportTransportationServices
     */
    readonly iAirportTransportationServiceRequestModel: IAirportTransportationServiceRequestModel
}

/**
 * Request parameters for putAirportTransportationServicesId operation in AirportTransportationServiceApi.
 * @export
 * @interface AirportTransportationServiceApiPutAirportTransportationServicesIdRequest
 */
export interface AirportTransportationServiceApiPutAirportTransportationServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof AirportTransportationServiceApiPutAirportTransportationServicesId
     */
    readonly id: number

    /**
     * 
     * @type {IAirportTransportationServiceRequestModel}
     * @memberof AirportTransportationServiceApiPutAirportTransportationServicesId
     */
    readonly iAirportTransportationServiceRequestModel: IAirportTransportationServiceRequestModel
}

/**
 * AirportTransportationServiceApi - object-oriented interface
 * @export
 * @class AirportTransportationServiceApi
 * @extends {BaseAPI}
 */
export class AirportTransportationServiceApi extends BaseAPI {
    /**
     * 
     * @param {AirportTransportationServiceApiDeleteAirportTransportationServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AirportTransportationServiceApi
     */
    public deleteAirportTransportationServicesId(requestParameters: AirportTransportationServiceApiDeleteAirportTransportationServicesIdRequest, options?: AxiosRequestConfig) {
        return AirportTransportationServiceApiFp(this.configuration).deleteAirportTransportationServicesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AirportTransportationServiceApiGetAirportTransportationServicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AirportTransportationServiceApi
     */
    public getAirportTransportationServices(requestParameters: AirportTransportationServiceApiGetAirportTransportationServicesRequest = {}, options?: AxiosRequestConfig) {
        return AirportTransportationServiceApiFp(this.configuration).getAirportTransportationServices(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AirportTransportationServiceApiGetAirportTransportationServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AirportTransportationServiceApi
     */
    public getAirportTransportationServicesId(requestParameters: AirportTransportationServiceApiGetAirportTransportationServicesIdRequest, options?: AxiosRequestConfig) {
        return AirportTransportationServiceApiFp(this.configuration).getAirportTransportationServicesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AirportTransportationServiceApiPostAirportTransportationServicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AirportTransportationServiceApi
     */
    public postAirportTransportationServices(requestParameters: AirportTransportationServiceApiPostAirportTransportationServicesRequest, options?: AxiosRequestConfig) {
        return AirportTransportationServiceApiFp(this.configuration).postAirportTransportationServices(requestParameters.iAirportTransportationServiceRequestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AirportTransportationServiceApiPutAirportTransportationServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AirportTransportationServiceApi
     */
    public putAirportTransportationServicesId(requestParameters: AirportTransportationServiceApiPutAirportTransportationServicesIdRequest, options?: AxiosRequestConfig) {
        return AirportTransportationServiceApiFp(this.configuration).putAirportTransportationServicesId(requestParameters.id, requestParameters.iAirportTransportationServiceRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BusServiceApi - axios parameter creator
 * @export
 */
export const BusServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBusServicesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteBusServicesId', 'id', id)
            const localVarPath = `/bus-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusServices: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bus-services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusServicesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getBusServicesId', 'id', id)
            const localVarPath = `/bus-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IBusServiceRequestModel} iBusServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBusServices: async (iBusServiceRequestModel: IBusServiceRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iBusServiceRequestModel' is not null or undefined
            assertParamExists('postBusServices', 'iBusServiceRequestModel', iBusServiceRequestModel)
            const localVarPath = `/bus-services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iBusServiceRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {IBusServiceRequestModel} iBusServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBusServicesId: async (id: number, iBusServiceRequestModel: IBusServiceRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putBusServicesId', 'id', id)
            // verify required parameter 'iBusServiceRequestModel' is not null or undefined
            assertParamExists('putBusServicesId', 'iBusServiceRequestModel', iBusServiceRequestModel)
            const localVarPath = `/bus-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iBusServiceRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BusServiceApi - functional programming interface
 * @export
 */
export const BusServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BusServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBusServicesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBusServicesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBusServices(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IBusServiceListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBusServices(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBusServicesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IBusServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBusServicesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IBusServiceRequestModel} iBusServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postBusServices(iBusServiceRequestModel: IBusServiceRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IBusServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postBusServices(iBusServiceRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {IBusServiceRequestModel} iBusServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putBusServicesId(id: number, iBusServiceRequestModel: IBusServiceRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IBusServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putBusServicesId(id, iBusServiceRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BusServiceApi - factory interface
 * @export
 */
export const BusServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BusServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBusServicesId(id: number, options?: any): AxiosPromise<number> {
            return localVarFp.deleteBusServicesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusServices(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: any): AxiosPromise<IBusServiceListResponseModel> {
            return localVarFp.getBusServices(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusServicesId(id: number, options?: any): AxiosPromise<IBusServiceResponseModel> {
            return localVarFp.getBusServicesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IBusServiceRequestModel} iBusServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBusServices(iBusServiceRequestModel: IBusServiceRequestModel, options?: any): AxiosPromise<IBusServiceResponseModel> {
            return localVarFp.postBusServices(iBusServiceRequestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {IBusServiceRequestModel} iBusServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBusServicesId(id: number, iBusServiceRequestModel: IBusServiceRequestModel, options?: any): AxiosPromise<IBusServiceResponseModel> {
            return localVarFp.putBusServicesId(id, iBusServiceRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteBusServicesId operation in BusServiceApi.
 * @export
 * @interface BusServiceApiDeleteBusServicesIdRequest
 */
export interface BusServiceApiDeleteBusServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof BusServiceApiDeleteBusServicesId
     */
    readonly id: number
}

/**
 * Request parameters for getBusServices operation in BusServiceApi.
 * @export
 * @interface BusServiceApiGetBusServicesRequest
 */
export interface BusServiceApiGetBusServicesRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof BusServiceApiGetBusServices
     */
    readonly sort?: string

    /**
     * Retun page/pageSize (default: true)
     * @type {boolean}
     * @memberof BusServiceApiGetBusServices
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof BusServiceApiGetBusServices
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof BusServiceApiGetBusServices
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof BusServiceApiGetBusServices
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof BusServiceApiGetBusServices
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof BusServiceApiGetBusServices
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof BusServiceApiGetBusServices
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof BusServiceApiGetBusServices
     */
    readonly filters?: object
}

/**
 * Request parameters for getBusServicesId operation in BusServiceApi.
 * @export
 * @interface BusServiceApiGetBusServicesIdRequest
 */
export interface BusServiceApiGetBusServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof BusServiceApiGetBusServicesId
     */
    readonly id: number
}

/**
 * Request parameters for postBusServices operation in BusServiceApi.
 * @export
 * @interface BusServiceApiPostBusServicesRequest
 */
export interface BusServiceApiPostBusServicesRequest {
    /**
     * 
     * @type {IBusServiceRequestModel}
     * @memberof BusServiceApiPostBusServices
     */
    readonly iBusServiceRequestModel: IBusServiceRequestModel
}

/**
 * Request parameters for putBusServicesId operation in BusServiceApi.
 * @export
 * @interface BusServiceApiPutBusServicesIdRequest
 */
export interface BusServiceApiPutBusServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof BusServiceApiPutBusServicesId
     */
    readonly id: number

    /**
     * 
     * @type {IBusServiceRequestModel}
     * @memberof BusServiceApiPutBusServicesId
     */
    readonly iBusServiceRequestModel: IBusServiceRequestModel
}

/**
 * BusServiceApi - object-oriented interface
 * @export
 * @class BusServiceApi
 * @extends {BaseAPI}
 */
export class BusServiceApi extends BaseAPI {
    /**
     * 
     * @param {BusServiceApiDeleteBusServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusServiceApi
     */
    public deleteBusServicesId(requestParameters: BusServiceApiDeleteBusServicesIdRequest, options?: AxiosRequestConfig) {
        return BusServiceApiFp(this.configuration).deleteBusServicesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BusServiceApiGetBusServicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusServiceApi
     */
    public getBusServices(requestParameters: BusServiceApiGetBusServicesRequest = {}, options?: AxiosRequestConfig) {
        return BusServiceApiFp(this.configuration).getBusServices(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BusServiceApiGetBusServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusServiceApi
     */
    public getBusServicesId(requestParameters: BusServiceApiGetBusServicesIdRequest, options?: AxiosRequestConfig) {
        return BusServiceApiFp(this.configuration).getBusServicesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BusServiceApiPostBusServicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusServiceApi
     */
    public postBusServices(requestParameters: BusServiceApiPostBusServicesRequest, options?: AxiosRequestConfig) {
        return BusServiceApiFp(this.configuration).postBusServices(requestParameters.iBusServiceRequestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BusServiceApiPutBusServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusServiceApi
     */
    public putBusServicesId(requestParameters: BusServiceApiPutBusServicesIdRequest, options?: AxiosRequestConfig) {
        return BusServiceApiFp(this.configuration).putBusServicesId(requestParameters.id, requestParameters.iBusServiceRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BusinessTravelApi - axios parameter creator
 * @export
 */
export const BusinessTravelApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBusinessTravelsId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteBusinessTravelsId', 'id', id)
            const localVarPath = `/business-travels/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessTravels: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/business-travels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessTravelsId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getBusinessTravelsId', 'id', id)
            const localVarPath = `/business-travels/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IBusinessTravelRequestModel} iBusinessTravelRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBusinessTravels: async (iBusinessTravelRequestModel: IBusinessTravelRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iBusinessTravelRequestModel' is not null or undefined
            assertParamExists('postBusinessTravels', 'iBusinessTravelRequestModel', iBusinessTravelRequestModel)
            const localVarPath = `/business-travels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iBusinessTravelRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {IBusinessTravelRequestModel} iBusinessTravelRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBusinessTravelsId: async (id: number, iBusinessTravelRequestModel: IBusinessTravelRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putBusinessTravelsId', 'id', id)
            // verify required parameter 'iBusinessTravelRequestModel' is not null or undefined
            assertParamExists('putBusinessTravelsId', 'iBusinessTravelRequestModel', iBusinessTravelRequestModel)
            const localVarPath = `/business-travels/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iBusinessTravelRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BusinessTravelApi - functional programming interface
 * @export
 */
export const BusinessTravelApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BusinessTravelApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBusinessTravelsId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBusinessTravelsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBusinessTravels(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IBusinessTravelListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBusinessTravels(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBusinessTravelsId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IBusinessTravelResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBusinessTravelsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IBusinessTravelRequestModel} iBusinessTravelRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postBusinessTravels(iBusinessTravelRequestModel: IBusinessTravelRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IBusinessTravelResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postBusinessTravels(iBusinessTravelRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {IBusinessTravelRequestModel} iBusinessTravelRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putBusinessTravelsId(id: number, iBusinessTravelRequestModel: IBusinessTravelRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IBusinessTravelResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putBusinessTravelsId(id, iBusinessTravelRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BusinessTravelApi - factory interface
 * @export
 */
export const BusinessTravelApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BusinessTravelApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBusinessTravelsId(id: number, options?: any): AxiosPromise<number> {
            return localVarFp.deleteBusinessTravelsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessTravels(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: any): AxiosPromise<IBusinessTravelListResponseModel> {
            return localVarFp.getBusinessTravels(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessTravelsId(id: number, options?: any): AxiosPromise<IBusinessTravelResponseModel> {
            return localVarFp.getBusinessTravelsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IBusinessTravelRequestModel} iBusinessTravelRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBusinessTravels(iBusinessTravelRequestModel: IBusinessTravelRequestModel, options?: any): AxiosPromise<IBusinessTravelResponseModel> {
            return localVarFp.postBusinessTravels(iBusinessTravelRequestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {IBusinessTravelRequestModel} iBusinessTravelRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBusinessTravelsId(id: number, iBusinessTravelRequestModel: IBusinessTravelRequestModel, options?: any): AxiosPromise<IBusinessTravelResponseModel> {
            return localVarFp.putBusinessTravelsId(id, iBusinessTravelRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteBusinessTravelsId operation in BusinessTravelApi.
 * @export
 * @interface BusinessTravelApiDeleteBusinessTravelsIdRequest
 */
export interface BusinessTravelApiDeleteBusinessTravelsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof BusinessTravelApiDeleteBusinessTravelsId
     */
    readonly id: number
}

/**
 * Request parameters for getBusinessTravels operation in BusinessTravelApi.
 * @export
 * @interface BusinessTravelApiGetBusinessTravelsRequest
 */
export interface BusinessTravelApiGetBusinessTravelsRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof BusinessTravelApiGetBusinessTravels
     */
    readonly sort?: string

    /**
     * Retun page/pageSize (default: true)
     * @type {boolean}
     * @memberof BusinessTravelApiGetBusinessTravels
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof BusinessTravelApiGetBusinessTravels
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof BusinessTravelApiGetBusinessTravels
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof BusinessTravelApiGetBusinessTravels
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof BusinessTravelApiGetBusinessTravels
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof BusinessTravelApiGetBusinessTravels
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof BusinessTravelApiGetBusinessTravels
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof BusinessTravelApiGetBusinessTravels
     */
    readonly filters?: object
}

/**
 * Request parameters for getBusinessTravelsId operation in BusinessTravelApi.
 * @export
 * @interface BusinessTravelApiGetBusinessTravelsIdRequest
 */
export interface BusinessTravelApiGetBusinessTravelsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof BusinessTravelApiGetBusinessTravelsId
     */
    readonly id: number
}

/**
 * Request parameters for postBusinessTravels operation in BusinessTravelApi.
 * @export
 * @interface BusinessTravelApiPostBusinessTravelsRequest
 */
export interface BusinessTravelApiPostBusinessTravelsRequest {
    /**
     * 
     * @type {IBusinessTravelRequestModel}
     * @memberof BusinessTravelApiPostBusinessTravels
     */
    readonly iBusinessTravelRequestModel: IBusinessTravelRequestModel
}

/**
 * Request parameters for putBusinessTravelsId operation in BusinessTravelApi.
 * @export
 * @interface BusinessTravelApiPutBusinessTravelsIdRequest
 */
export interface BusinessTravelApiPutBusinessTravelsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof BusinessTravelApiPutBusinessTravelsId
     */
    readonly id: number

    /**
     * 
     * @type {IBusinessTravelRequestModel}
     * @memberof BusinessTravelApiPutBusinessTravelsId
     */
    readonly iBusinessTravelRequestModel: IBusinessTravelRequestModel
}

/**
 * BusinessTravelApi - object-oriented interface
 * @export
 * @class BusinessTravelApi
 * @extends {BaseAPI}
 */
export class BusinessTravelApi extends BaseAPI {
    /**
     * 
     * @param {BusinessTravelApiDeleteBusinessTravelsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessTravelApi
     */
    public deleteBusinessTravelsId(requestParameters: BusinessTravelApiDeleteBusinessTravelsIdRequest, options?: AxiosRequestConfig) {
        return BusinessTravelApiFp(this.configuration).deleteBusinessTravelsId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BusinessTravelApiGetBusinessTravelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessTravelApi
     */
    public getBusinessTravels(requestParameters: BusinessTravelApiGetBusinessTravelsRequest = {}, options?: AxiosRequestConfig) {
        return BusinessTravelApiFp(this.configuration).getBusinessTravels(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BusinessTravelApiGetBusinessTravelsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessTravelApi
     */
    public getBusinessTravelsId(requestParameters: BusinessTravelApiGetBusinessTravelsIdRequest, options?: AxiosRequestConfig) {
        return BusinessTravelApiFp(this.configuration).getBusinessTravelsId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BusinessTravelApiPostBusinessTravelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessTravelApi
     */
    public postBusinessTravels(requestParameters: BusinessTravelApiPostBusinessTravelsRequest, options?: AxiosRequestConfig) {
        return BusinessTravelApiFp(this.configuration).postBusinessTravels(requestParameters.iBusinessTravelRequestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BusinessTravelApiPutBusinessTravelsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BusinessTravelApi
     */
    public putBusinessTravelsId(requestParameters: BusinessTravelApiPutBusinessTravelsIdRequest, options?: AxiosRequestConfig) {
        return BusinessTravelApiFp(this.configuration).putBusinessTravelsId(requestParameters.id, requestParameters.iBusinessTravelRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CipInternationalAirportServiceApi - axios parameter creator
 * @export
 */
export const CipInternationalAirportServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCipInternationalAirportServicesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCipInternationalAirportServicesId', 'id', id)
            const localVarPath = `/cip-international-airport-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCipInternationalAirportServices: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cip-international-airport-services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCipInternationalAirportServicesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCipInternationalAirportServicesId', 'id', id)
            const localVarPath = `/cip-international-airport-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ICipInternationalAirportServiceRequestModel} iCipInternationalAirportServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCipInternationalAirportServices: async (iCipInternationalAirportServiceRequestModel: ICipInternationalAirportServiceRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iCipInternationalAirportServiceRequestModel' is not null or undefined
            assertParamExists('postCipInternationalAirportServices', 'iCipInternationalAirportServiceRequestModel', iCipInternationalAirportServiceRequestModel)
            const localVarPath = `/cip-international-airport-services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iCipInternationalAirportServiceRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ICipInternationalAirportServiceRequestModel} iCipInternationalAirportServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCipInternationalAirportServicesId: async (id: number, iCipInternationalAirportServiceRequestModel: ICipInternationalAirportServiceRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putCipInternationalAirportServicesId', 'id', id)
            // verify required parameter 'iCipInternationalAirportServiceRequestModel' is not null or undefined
            assertParamExists('putCipInternationalAirportServicesId', 'iCipInternationalAirportServiceRequestModel', iCipInternationalAirportServiceRequestModel)
            const localVarPath = `/cip-international-airport-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iCipInternationalAirportServiceRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CipInternationalAirportServiceApi - functional programming interface
 * @export
 */
export const CipInternationalAirportServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CipInternationalAirportServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCipInternationalAirportServicesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCipInternationalAirportServicesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCipInternationalAirportServices(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ICipInternationalAirportServiceListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCipInternationalAirportServices(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCipInternationalAirportServicesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ICipInternationalAirportServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCipInternationalAirportServicesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ICipInternationalAirportServiceRequestModel} iCipInternationalAirportServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCipInternationalAirportServices(iCipInternationalAirportServiceRequestModel: ICipInternationalAirportServiceRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ICipInternationalAirportServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCipInternationalAirportServices(iCipInternationalAirportServiceRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ICipInternationalAirportServiceRequestModel} iCipInternationalAirportServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putCipInternationalAirportServicesId(id: number, iCipInternationalAirportServiceRequestModel: ICipInternationalAirportServiceRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ICipInternationalAirportServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putCipInternationalAirportServicesId(id, iCipInternationalAirportServiceRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CipInternationalAirportServiceApi - factory interface
 * @export
 */
export const CipInternationalAirportServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CipInternationalAirportServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCipInternationalAirportServicesId(id: number, options?: any): AxiosPromise<number> {
            return localVarFp.deleteCipInternationalAirportServicesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCipInternationalAirportServices(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: any): AxiosPromise<ICipInternationalAirportServiceListResponseModel> {
            return localVarFp.getCipInternationalAirportServices(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCipInternationalAirportServicesId(id: number, options?: any): AxiosPromise<ICipInternationalAirportServiceResponseModel> {
            return localVarFp.getCipInternationalAirportServicesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ICipInternationalAirportServiceRequestModel} iCipInternationalAirportServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCipInternationalAirportServices(iCipInternationalAirportServiceRequestModel: ICipInternationalAirportServiceRequestModel, options?: any): AxiosPromise<ICipInternationalAirportServiceResponseModel> {
            return localVarFp.postCipInternationalAirportServices(iCipInternationalAirportServiceRequestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ICipInternationalAirportServiceRequestModel} iCipInternationalAirportServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putCipInternationalAirportServicesId(id: number, iCipInternationalAirportServiceRequestModel: ICipInternationalAirportServiceRequestModel, options?: any): AxiosPromise<ICipInternationalAirportServiceResponseModel> {
            return localVarFp.putCipInternationalAirportServicesId(id, iCipInternationalAirportServiceRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteCipInternationalAirportServicesId operation in CipInternationalAirportServiceApi.
 * @export
 * @interface CipInternationalAirportServiceApiDeleteCipInternationalAirportServicesIdRequest
 */
export interface CipInternationalAirportServiceApiDeleteCipInternationalAirportServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof CipInternationalAirportServiceApiDeleteCipInternationalAirportServicesId
     */
    readonly id: number
}

/**
 * Request parameters for getCipInternationalAirportServices operation in CipInternationalAirportServiceApi.
 * @export
 * @interface CipInternationalAirportServiceApiGetCipInternationalAirportServicesRequest
 */
export interface CipInternationalAirportServiceApiGetCipInternationalAirportServicesRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof CipInternationalAirportServiceApiGetCipInternationalAirportServices
     */
    readonly sort?: string

    /**
     * Retun page/pageSize (default: true)
     * @type {boolean}
     * @memberof CipInternationalAirportServiceApiGetCipInternationalAirportServices
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof CipInternationalAirportServiceApiGetCipInternationalAirportServices
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof CipInternationalAirportServiceApiGetCipInternationalAirportServices
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof CipInternationalAirportServiceApiGetCipInternationalAirportServices
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof CipInternationalAirportServiceApiGetCipInternationalAirportServices
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof CipInternationalAirportServiceApiGetCipInternationalAirportServices
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof CipInternationalAirportServiceApiGetCipInternationalAirportServices
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof CipInternationalAirportServiceApiGetCipInternationalAirportServices
     */
    readonly filters?: object
}

/**
 * Request parameters for getCipInternationalAirportServicesId operation in CipInternationalAirportServiceApi.
 * @export
 * @interface CipInternationalAirportServiceApiGetCipInternationalAirportServicesIdRequest
 */
export interface CipInternationalAirportServiceApiGetCipInternationalAirportServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof CipInternationalAirportServiceApiGetCipInternationalAirportServicesId
     */
    readonly id: number
}

/**
 * Request parameters for postCipInternationalAirportServices operation in CipInternationalAirportServiceApi.
 * @export
 * @interface CipInternationalAirportServiceApiPostCipInternationalAirportServicesRequest
 */
export interface CipInternationalAirportServiceApiPostCipInternationalAirportServicesRequest {
    /**
     * 
     * @type {ICipInternationalAirportServiceRequestModel}
     * @memberof CipInternationalAirportServiceApiPostCipInternationalAirportServices
     */
    readonly iCipInternationalAirportServiceRequestModel: ICipInternationalAirportServiceRequestModel
}

/**
 * Request parameters for putCipInternationalAirportServicesId operation in CipInternationalAirportServiceApi.
 * @export
 * @interface CipInternationalAirportServiceApiPutCipInternationalAirportServicesIdRequest
 */
export interface CipInternationalAirportServiceApiPutCipInternationalAirportServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof CipInternationalAirportServiceApiPutCipInternationalAirportServicesId
     */
    readonly id: number

    /**
     * 
     * @type {ICipInternationalAirportServiceRequestModel}
     * @memberof CipInternationalAirportServiceApiPutCipInternationalAirportServicesId
     */
    readonly iCipInternationalAirportServiceRequestModel: ICipInternationalAirportServiceRequestModel
}

/**
 * CipInternationalAirportServiceApi - object-oriented interface
 * @export
 * @class CipInternationalAirportServiceApi
 * @extends {BaseAPI}
 */
export class CipInternationalAirportServiceApi extends BaseAPI {
    /**
     * 
     * @param {CipInternationalAirportServiceApiDeleteCipInternationalAirportServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CipInternationalAirportServiceApi
     */
    public deleteCipInternationalAirportServicesId(requestParameters: CipInternationalAirportServiceApiDeleteCipInternationalAirportServicesIdRequest, options?: AxiosRequestConfig) {
        return CipInternationalAirportServiceApiFp(this.configuration).deleteCipInternationalAirportServicesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CipInternationalAirportServiceApiGetCipInternationalAirportServicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CipInternationalAirportServiceApi
     */
    public getCipInternationalAirportServices(requestParameters: CipInternationalAirportServiceApiGetCipInternationalAirportServicesRequest = {}, options?: AxiosRequestConfig) {
        return CipInternationalAirportServiceApiFp(this.configuration).getCipInternationalAirportServices(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CipInternationalAirportServiceApiGetCipInternationalAirportServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CipInternationalAirportServiceApi
     */
    public getCipInternationalAirportServicesId(requestParameters: CipInternationalAirportServiceApiGetCipInternationalAirportServicesIdRequest, options?: AxiosRequestConfig) {
        return CipInternationalAirportServiceApiFp(this.configuration).getCipInternationalAirportServicesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CipInternationalAirportServiceApiPostCipInternationalAirportServicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CipInternationalAirportServiceApi
     */
    public postCipInternationalAirportServices(requestParameters: CipInternationalAirportServiceApiPostCipInternationalAirportServicesRequest, options?: AxiosRequestConfig) {
        return CipInternationalAirportServiceApiFp(this.configuration).postCipInternationalAirportServices(requestParameters.iCipInternationalAirportServiceRequestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CipInternationalAirportServiceApiPutCipInternationalAirportServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CipInternationalAirportServiceApi
     */
    public putCipInternationalAirportServicesId(requestParameters: CipInternationalAirportServiceApiPutCipInternationalAirportServicesIdRequest, options?: AxiosRequestConfig) {
        return CipInternationalAirportServiceApiFp(this.configuration).putCipInternationalAirportServicesId(requestParameters.id, requestParameters.iCipInternationalAirportServiceRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DailyTourApi - axios parameter creator
 * @export
 */
export const DailyTourApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDailyToursId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteDailyToursId', 'id', id)
            const localVarPath = `/daily-tours/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDailyTours: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/daily-tours`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDailyToursId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDailyToursId', 'id', id)
            const localVarPath = `/daily-tours/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IDailyTourRequestModel} iDailyTourRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDailyTours: async (iDailyTourRequestModel: IDailyTourRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iDailyTourRequestModel' is not null or undefined
            assertParamExists('postDailyTours', 'iDailyTourRequestModel', iDailyTourRequestModel)
            const localVarPath = `/daily-tours`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDailyTourRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {IDailyTourRequestModel} iDailyTourRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDailyToursId: async (id: number, iDailyTourRequestModel: IDailyTourRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putDailyToursId', 'id', id)
            // verify required parameter 'iDailyTourRequestModel' is not null or undefined
            assertParamExists('putDailyToursId', 'iDailyTourRequestModel', iDailyTourRequestModel)
            const localVarPath = `/daily-tours/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDailyTourRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DailyTourApi - functional programming interface
 * @export
 */
export const DailyTourApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DailyTourApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDailyToursId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDailyToursId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDailyTours(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IDailyTourListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDailyTours(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDailyToursId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IDailyTourResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDailyToursId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IDailyTourRequestModel} iDailyTourRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postDailyTours(iDailyTourRequestModel: IDailyTourRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IDailyTourResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postDailyTours(iDailyTourRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {IDailyTourRequestModel} iDailyTourRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putDailyToursId(id: number, iDailyTourRequestModel: IDailyTourRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IDailyTourResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putDailyToursId(id, iDailyTourRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DailyTourApi - factory interface
 * @export
 */
export const DailyTourApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DailyTourApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDailyToursId(id: number, options?: any): AxiosPromise<number> {
            return localVarFp.deleteDailyToursId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDailyTours(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: any): AxiosPromise<IDailyTourListResponseModel> {
            return localVarFp.getDailyTours(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDailyToursId(id: number, options?: any): AxiosPromise<IDailyTourResponseModel> {
            return localVarFp.getDailyToursId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IDailyTourRequestModel} iDailyTourRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDailyTours(iDailyTourRequestModel: IDailyTourRequestModel, options?: any): AxiosPromise<IDailyTourResponseModel> {
            return localVarFp.postDailyTours(iDailyTourRequestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {IDailyTourRequestModel} iDailyTourRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putDailyToursId(id: number, iDailyTourRequestModel: IDailyTourRequestModel, options?: any): AxiosPromise<IDailyTourResponseModel> {
            return localVarFp.putDailyToursId(id, iDailyTourRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteDailyToursId operation in DailyTourApi.
 * @export
 * @interface DailyTourApiDeleteDailyToursIdRequest
 */
export interface DailyTourApiDeleteDailyToursIdRequest {
    /**
     * 
     * @type {number}
     * @memberof DailyTourApiDeleteDailyToursId
     */
    readonly id: number
}

/**
 * Request parameters for getDailyTours operation in DailyTourApi.
 * @export
 * @interface DailyTourApiGetDailyToursRequest
 */
export interface DailyTourApiGetDailyToursRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof DailyTourApiGetDailyTours
     */
    readonly sort?: string

    /**
     * Retun page/pageSize (default: true)
     * @type {boolean}
     * @memberof DailyTourApiGetDailyTours
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof DailyTourApiGetDailyTours
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof DailyTourApiGetDailyTours
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof DailyTourApiGetDailyTours
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof DailyTourApiGetDailyTours
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof DailyTourApiGetDailyTours
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof DailyTourApiGetDailyTours
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof DailyTourApiGetDailyTours
     */
    readonly filters?: object
}

/**
 * Request parameters for getDailyToursId operation in DailyTourApi.
 * @export
 * @interface DailyTourApiGetDailyToursIdRequest
 */
export interface DailyTourApiGetDailyToursIdRequest {
    /**
     * 
     * @type {number}
     * @memberof DailyTourApiGetDailyToursId
     */
    readonly id: number
}

/**
 * Request parameters for postDailyTours operation in DailyTourApi.
 * @export
 * @interface DailyTourApiPostDailyToursRequest
 */
export interface DailyTourApiPostDailyToursRequest {
    /**
     * 
     * @type {IDailyTourRequestModel}
     * @memberof DailyTourApiPostDailyTours
     */
    readonly iDailyTourRequestModel: IDailyTourRequestModel
}

/**
 * Request parameters for putDailyToursId operation in DailyTourApi.
 * @export
 * @interface DailyTourApiPutDailyToursIdRequest
 */
export interface DailyTourApiPutDailyToursIdRequest {
    /**
     * 
     * @type {number}
     * @memberof DailyTourApiPutDailyToursId
     */
    readonly id: number

    /**
     * 
     * @type {IDailyTourRequestModel}
     * @memberof DailyTourApiPutDailyToursId
     */
    readonly iDailyTourRequestModel: IDailyTourRequestModel
}

/**
 * DailyTourApi - object-oriented interface
 * @export
 * @class DailyTourApi
 * @extends {BaseAPI}
 */
export class DailyTourApi extends BaseAPI {
    /**
     * 
     * @param {DailyTourApiDeleteDailyToursIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DailyTourApi
     */
    public deleteDailyToursId(requestParameters: DailyTourApiDeleteDailyToursIdRequest, options?: AxiosRequestConfig) {
        return DailyTourApiFp(this.configuration).deleteDailyToursId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DailyTourApiGetDailyToursRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DailyTourApi
     */
    public getDailyTours(requestParameters: DailyTourApiGetDailyToursRequest = {}, options?: AxiosRequestConfig) {
        return DailyTourApiFp(this.configuration).getDailyTours(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DailyTourApiGetDailyToursIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DailyTourApi
     */
    public getDailyToursId(requestParameters: DailyTourApiGetDailyToursIdRequest, options?: AxiosRequestConfig) {
        return DailyTourApiFp(this.configuration).getDailyToursId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DailyTourApiPostDailyToursRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DailyTourApi
     */
    public postDailyTours(requestParameters: DailyTourApiPostDailyToursRequest, options?: AxiosRequestConfig) {
        return DailyTourApiFp(this.configuration).postDailyTours(requestParameters.iDailyTourRequestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DailyTourApiPutDailyToursIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DailyTourApi
     */
    public putDailyToursId(requestParameters: DailyTourApiPutDailyToursIdRequest, options?: AxiosRequestConfig) {
        return DailyTourApiFp(this.configuration).putDailyToursId(requestParameters.id, requestParameters.iDailyTourRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FlightServiceApi - axios parameter creator
 * @export
 */
export const FlightServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFlightServicesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteFlightServicesId', 'id', id)
            const localVarPath = `/flight-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFlightServices: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/flight-services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFlightServicesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getFlightServicesId', 'id', id)
            const localVarPath = `/flight-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IFlightServiceRequestModel} iFlightServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFlightServices: async (iFlightServiceRequestModel: IFlightServiceRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iFlightServiceRequestModel' is not null or undefined
            assertParamExists('postFlightServices', 'iFlightServiceRequestModel', iFlightServiceRequestModel)
            const localVarPath = `/flight-services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iFlightServiceRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {IFlightServiceRequestModel} iFlightServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putFlightServicesId: async (id: number, iFlightServiceRequestModel: IFlightServiceRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putFlightServicesId', 'id', id)
            // verify required parameter 'iFlightServiceRequestModel' is not null or undefined
            assertParamExists('putFlightServicesId', 'iFlightServiceRequestModel', iFlightServiceRequestModel)
            const localVarPath = `/flight-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iFlightServiceRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FlightServiceApi - functional programming interface
 * @export
 */
export const FlightServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FlightServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFlightServicesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFlightServicesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFlightServices(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IFlightServiceListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFlightServices(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFlightServicesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IFlightServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFlightServicesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IFlightServiceRequestModel} iFlightServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postFlightServices(iFlightServiceRequestModel: IFlightServiceRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IFlightServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postFlightServices(iFlightServiceRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {IFlightServiceRequestModel} iFlightServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putFlightServicesId(id: number, iFlightServiceRequestModel: IFlightServiceRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IFlightServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putFlightServicesId(id, iFlightServiceRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FlightServiceApi - factory interface
 * @export
 */
export const FlightServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FlightServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFlightServicesId(id: number, options?: any): AxiosPromise<number> {
            return localVarFp.deleteFlightServicesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFlightServices(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: any): AxiosPromise<IFlightServiceListResponseModel> {
            return localVarFp.getFlightServices(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFlightServicesId(id: number, options?: any): AxiosPromise<IFlightServiceResponseModel> {
            return localVarFp.getFlightServicesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IFlightServiceRequestModel} iFlightServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFlightServices(iFlightServiceRequestModel: IFlightServiceRequestModel, options?: any): AxiosPromise<IFlightServiceResponseModel> {
            return localVarFp.postFlightServices(iFlightServiceRequestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {IFlightServiceRequestModel} iFlightServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putFlightServicesId(id: number, iFlightServiceRequestModel: IFlightServiceRequestModel, options?: any): AxiosPromise<IFlightServiceResponseModel> {
            return localVarFp.putFlightServicesId(id, iFlightServiceRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteFlightServicesId operation in FlightServiceApi.
 * @export
 * @interface FlightServiceApiDeleteFlightServicesIdRequest
 */
export interface FlightServiceApiDeleteFlightServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof FlightServiceApiDeleteFlightServicesId
     */
    readonly id: number
}

/**
 * Request parameters for getFlightServices operation in FlightServiceApi.
 * @export
 * @interface FlightServiceApiGetFlightServicesRequest
 */
export interface FlightServiceApiGetFlightServicesRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof FlightServiceApiGetFlightServices
     */
    readonly sort?: string

    /**
     * Retun page/pageSize (default: true)
     * @type {boolean}
     * @memberof FlightServiceApiGetFlightServices
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof FlightServiceApiGetFlightServices
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof FlightServiceApiGetFlightServices
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof FlightServiceApiGetFlightServices
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof FlightServiceApiGetFlightServices
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof FlightServiceApiGetFlightServices
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof FlightServiceApiGetFlightServices
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof FlightServiceApiGetFlightServices
     */
    readonly filters?: object
}

/**
 * Request parameters for getFlightServicesId operation in FlightServiceApi.
 * @export
 * @interface FlightServiceApiGetFlightServicesIdRequest
 */
export interface FlightServiceApiGetFlightServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof FlightServiceApiGetFlightServicesId
     */
    readonly id: number
}

/**
 * Request parameters for postFlightServices operation in FlightServiceApi.
 * @export
 * @interface FlightServiceApiPostFlightServicesRequest
 */
export interface FlightServiceApiPostFlightServicesRequest {
    /**
     * 
     * @type {IFlightServiceRequestModel}
     * @memberof FlightServiceApiPostFlightServices
     */
    readonly iFlightServiceRequestModel: IFlightServiceRequestModel
}

/**
 * Request parameters for putFlightServicesId operation in FlightServiceApi.
 * @export
 * @interface FlightServiceApiPutFlightServicesIdRequest
 */
export interface FlightServiceApiPutFlightServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof FlightServiceApiPutFlightServicesId
     */
    readonly id: number

    /**
     * 
     * @type {IFlightServiceRequestModel}
     * @memberof FlightServiceApiPutFlightServicesId
     */
    readonly iFlightServiceRequestModel: IFlightServiceRequestModel
}

/**
 * FlightServiceApi - object-oriented interface
 * @export
 * @class FlightServiceApi
 * @extends {BaseAPI}
 */
export class FlightServiceApi extends BaseAPI {
    /**
     * 
     * @param {FlightServiceApiDeleteFlightServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlightServiceApi
     */
    public deleteFlightServicesId(requestParameters: FlightServiceApiDeleteFlightServicesIdRequest, options?: AxiosRequestConfig) {
        return FlightServiceApiFp(this.configuration).deleteFlightServicesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FlightServiceApiGetFlightServicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlightServiceApi
     */
    public getFlightServices(requestParameters: FlightServiceApiGetFlightServicesRequest = {}, options?: AxiosRequestConfig) {
        return FlightServiceApiFp(this.configuration).getFlightServices(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FlightServiceApiGetFlightServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlightServiceApi
     */
    public getFlightServicesId(requestParameters: FlightServiceApiGetFlightServicesIdRequest, options?: AxiosRequestConfig) {
        return FlightServiceApiFp(this.configuration).getFlightServicesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FlightServiceApiPostFlightServicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlightServiceApi
     */
    public postFlightServices(requestParameters: FlightServiceApiPostFlightServicesRequest, options?: AxiosRequestConfig) {
        return FlightServiceApiFp(this.configuration).postFlightServices(requestParameters.iFlightServiceRequestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FlightServiceApiPutFlightServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlightServiceApi
     */
    public putFlightServicesId(requestParameters: FlightServiceApiPutFlightServicesIdRequest, options?: AxiosRequestConfig) {
        return FlightServiceApiFp(this.configuration).putFlightServicesId(requestParameters.id, requestParameters.iFlightServiceRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * HomePageDetailApi - axios parameter creator
 * @export
 */
export const HomePageDetailApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHomePageDetail: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/home-page-detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomePageDetail: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/home-page-detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IHomePageDetailRequestModel} iHomePageDetailRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putHomePageDetail: async (iHomePageDetailRequestModel: IHomePageDetailRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iHomePageDetailRequestModel' is not null or undefined
            assertParamExists('putHomePageDetail', 'iHomePageDetailRequestModel', iHomePageDetailRequestModel)
            const localVarPath = `/home-page-detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iHomePageDetailRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HomePageDetailApi - functional programming interface
 * @export
 */
export const HomePageDetailApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HomePageDetailApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteHomePageDetail(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteHomePageDetail(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHomePageDetail(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IHomePageDetailListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHomePageDetail(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IHomePageDetailRequestModel} iHomePageDetailRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putHomePageDetail(iHomePageDetailRequestModel: IHomePageDetailRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IHomePageDetailResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putHomePageDetail(iHomePageDetailRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HomePageDetailApi - factory interface
 * @export
 */
export const HomePageDetailApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HomePageDetailApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHomePageDetail(options?: any): AxiosPromise<number> {
            return localVarFp.deleteHomePageDetail(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomePageDetail(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: any): AxiosPromise<IHomePageDetailListResponseModel> {
            return localVarFp.getHomePageDetail(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IHomePageDetailRequestModel} iHomePageDetailRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putHomePageDetail(iHomePageDetailRequestModel: IHomePageDetailRequestModel, options?: any): AxiosPromise<IHomePageDetailResponseModel> {
            return localVarFp.putHomePageDetail(iHomePageDetailRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getHomePageDetail operation in HomePageDetailApi.
 * @export
 * @interface HomePageDetailApiGetHomePageDetailRequest
 */
export interface HomePageDetailApiGetHomePageDetailRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof HomePageDetailApiGetHomePageDetail
     */
    readonly sort?: string

    /**
     * Retun page/pageSize (default: true)
     * @type {boolean}
     * @memberof HomePageDetailApiGetHomePageDetail
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof HomePageDetailApiGetHomePageDetail
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof HomePageDetailApiGetHomePageDetail
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof HomePageDetailApiGetHomePageDetail
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof HomePageDetailApiGetHomePageDetail
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof HomePageDetailApiGetHomePageDetail
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof HomePageDetailApiGetHomePageDetail
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof HomePageDetailApiGetHomePageDetail
     */
    readonly filters?: object
}

/**
 * Request parameters for putHomePageDetail operation in HomePageDetailApi.
 * @export
 * @interface HomePageDetailApiPutHomePageDetailRequest
 */
export interface HomePageDetailApiPutHomePageDetailRequest {
    /**
     * 
     * @type {IHomePageDetailRequestModel}
     * @memberof HomePageDetailApiPutHomePageDetail
     */
    readonly iHomePageDetailRequestModel: IHomePageDetailRequestModel
}

/**
 * HomePageDetailApi - object-oriented interface
 * @export
 * @class HomePageDetailApi
 * @extends {BaseAPI}
 */
export class HomePageDetailApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomePageDetailApi
     */
    public deleteHomePageDetail(options?: AxiosRequestConfig) {
        return HomePageDetailApiFp(this.configuration).deleteHomePageDetail(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HomePageDetailApiGetHomePageDetailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomePageDetailApi
     */
    public getHomePageDetail(requestParameters: HomePageDetailApiGetHomePageDetailRequest = {}, options?: AxiosRequestConfig) {
        return HomePageDetailApiFp(this.configuration).getHomePageDetail(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HomePageDetailApiPutHomePageDetailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomePageDetailApi
     */
    public putHomePageDetail(requestParameters: HomePageDetailApiPutHomePageDetailRequest, options?: AxiosRequestConfig) {
        return HomePageDetailApiFp(this.configuration).putHomePageDetail(requestParameters.iHomePageDetailRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * HotelServiceApi - axios parameter creator
 * @export
 */
export const HotelServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHotelServicesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteHotelServicesId', 'id', id)
            const localVarPath = `/hotel-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHotelServices: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/hotel-services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHotelServicesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getHotelServicesId', 'id', id)
            const localVarPath = `/hotel-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IHotelServiceRequestModel} iHotelServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postHotelServices: async (iHotelServiceRequestModel: IHotelServiceRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iHotelServiceRequestModel' is not null or undefined
            assertParamExists('postHotelServices', 'iHotelServiceRequestModel', iHotelServiceRequestModel)
            const localVarPath = `/hotel-services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iHotelServiceRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {IHotelServiceRequestModel} iHotelServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putHotelServicesId: async (id: number, iHotelServiceRequestModel: IHotelServiceRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putHotelServicesId', 'id', id)
            // verify required parameter 'iHotelServiceRequestModel' is not null or undefined
            assertParamExists('putHotelServicesId', 'iHotelServiceRequestModel', iHotelServiceRequestModel)
            const localVarPath = `/hotel-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iHotelServiceRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HotelServiceApi - functional programming interface
 * @export
 */
export const HotelServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HotelServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteHotelServicesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteHotelServicesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHotelServices(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IHotelServiceListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHotelServices(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHotelServicesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IHotelServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHotelServicesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IHotelServiceRequestModel} iHotelServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postHotelServices(iHotelServiceRequestModel: IHotelServiceRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IHotelServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postHotelServices(iHotelServiceRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {IHotelServiceRequestModel} iHotelServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putHotelServicesId(id: number, iHotelServiceRequestModel: IHotelServiceRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IHotelServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putHotelServicesId(id, iHotelServiceRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HotelServiceApi - factory interface
 * @export
 */
export const HotelServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HotelServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHotelServicesId(id: number, options?: any): AxiosPromise<number> {
            return localVarFp.deleteHotelServicesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHotelServices(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: any): AxiosPromise<IHotelServiceListResponseModel> {
            return localVarFp.getHotelServices(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHotelServicesId(id: number, options?: any): AxiosPromise<IHotelServiceResponseModel> {
            return localVarFp.getHotelServicesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IHotelServiceRequestModel} iHotelServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postHotelServices(iHotelServiceRequestModel: IHotelServiceRequestModel, options?: any): AxiosPromise<IHotelServiceResponseModel> {
            return localVarFp.postHotelServices(iHotelServiceRequestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {IHotelServiceRequestModel} iHotelServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putHotelServicesId(id: number, iHotelServiceRequestModel: IHotelServiceRequestModel, options?: any): AxiosPromise<IHotelServiceResponseModel> {
            return localVarFp.putHotelServicesId(id, iHotelServiceRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteHotelServicesId operation in HotelServiceApi.
 * @export
 * @interface HotelServiceApiDeleteHotelServicesIdRequest
 */
export interface HotelServiceApiDeleteHotelServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof HotelServiceApiDeleteHotelServicesId
     */
    readonly id: number
}

/**
 * Request parameters for getHotelServices operation in HotelServiceApi.
 * @export
 * @interface HotelServiceApiGetHotelServicesRequest
 */
export interface HotelServiceApiGetHotelServicesRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof HotelServiceApiGetHotelServices
     */
    readonly sort?: string

    /**
     * Retun page/pageSize (default: true)
     * @type {boolean}
     * @memberof HotelServiceApiGetHotelServices
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof HotelServiceApiGetHotelServices
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof HotelServiceApiGetHotelServices
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof HotelServiceApiGetHotelServices
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof HotelServiceApiGetHotelServices
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof HotelServiceApiGetHotelServices
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof HotelServiceApiGetHotelServices
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof HotelServiceApiGetHotelServices
     */
    readonly filters?: object
}

/**
 * Request parameters for getHotelServicesId operation in HotelServiceApi.
 * @export
 * @interface HotelServiceApiGetHotelServicesIdRequest
 */
export interface HotelServiceApiGetHotelServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof HotelServiceApiGetHotelServicesId
     */
    readonly id: number
}

/**
 * Request parameters for postHotelServices operation in HotelServiceApi.
 * @export
 * @interface HotelServiceApiPostHotelServicesRequest
 */
export interface HotelServiceApiPostHotelServicesRequest {
    /**
     * 
     * @type {IHotelServiceRequestModel}
     * @memberof HotelServiceApiPostHotelServices
     */
    readonly iHotelServiceRequestModel: IHotelServiceRequestModel
}

/**
 * Request parameters for putHotelServicesId operation in HotelServiceApi.
 * @export
 * @interface HotelServiceApiPutHotelServicesIdRequest
 */
export interface HotelServiceApiPutHotelServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof HotelServiceApiPutHotelServicesId
     */
    readonly id: number

    /**
     * 
     * @type {IHotelServiceRequestModel}
     * @memberof HotelServiceApiPutHotelServicesId
     */
    readonly iHotelServiceRequestModel: IHotelServiceRequestModel
}

/**
 * HotelServiceApi - object-oriented interface
 * @export
 * @class HotelServiceApi
 * @extends {BaseAPI}
 */
export class HotelServiceApi extends BaseAPI {
    /**
     * 
     * @param {HotelServiceApiDeleteHotelServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HotelServiceApi
     */
    public deleteHotelServicesId(requestParameters: HotelServiceApiDeleteHotelServicesIdRequest, options?: AxiosRequestConfig) {
        return HotelServiceApiFp(this.configuration).deleteHotelServicesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HotelServiceApiGetHotelServicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HotelServiceApi
     */
    public getHotelServices(requestParameters: HotelServiceApiGetHotelServicesRequest = {}, options?: AxiosRequestConfig) {
        return HotelServiceApiFp(this.configuration).getHotelServices(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HotelServiceApiGetHotelServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HotelServiceApi
     */
    public getHotelServicesId(requestParameters: HotelServiceApiGetHotelServicesIdRequest, options?: AxiosRequestConfig) {
        return HotelServiceApiFp(this.configuration).getHotelServicesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HotelServiceApiPostHotelServicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HotelServiceApi
     */
    public postHotelServices(requestParameters: HotelServiceApiPostHotelServicesRequest, options?: AxiosRequestConfig) {
        return HotelServiceApiFp(this.configuration).postHotelServices(requestParameters.iHotelServiceRequestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HotelServiceApiPutHotelServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HotelServiceApi
     */
    public putHotelServicesId(requestParameters: HotelServiceApiPutHotelServicesIdRequest, options?: AxiosRequestConfig) {
        return HotelServiceApiFp(this.configuration).putHotelServicesId(requestParameters.id, requestParameters.iHotelServiceRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * IranVisaApi - axios parameter creator
 * @export
 */
export const IranVisaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIranVisasId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteIranVisasId', 'id', id)
            const localVarPath = `/iran-visas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIranVisas: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/iran-visas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIranVisasId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getIranVisasId', 'id', id)
            const localVarPath = `/iran-visas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IIranVisaRequestModel} iIranVisaRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIranVisas: async (iIranVisaRequestModel: IIranVisaRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iIranVisaRequestModel' is not null or undefined
            assertParamExists('postIranVisas', 'iIranVisaRequestModel', iIranVisaRequestModel)
            const localVarPath = `/iran-visas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iIranVisaRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {IIranVisaRequestModel} iIranVisaRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putIranVisasId: async (id: number, iIranVisaRequestModel: IIranVisaRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putIranVisasId', 'id', id)
            // verify required parameter 'iIranVisaRequestModel' is not null or undefined
            assertParamExists('putIranVisasId', 'iIranVisaRequestModel', iIranVisaRequestModel)
            const localVarPath = `/iran-visas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iIranVisaRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IranVisaApi - functional programming interface
 * @export
 */
export const IranVisaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IranVisaApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIranVisasId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIranVisasId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIranVisas(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IIranVisaListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIranVisas(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIranVisasId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IIranVisaResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIranVisasId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IIranVisaRequestModel} iIranVisaRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postIranVisas(iIranVisaRequestModel: IIranVisaRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IIranVisaResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postIranVisas(iIranVisaRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {IIranVisaRequestModel} iIranVisaRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putIranVisasId(id: number, iIranVisaRequestModel: IIranVisaRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IIranVisaResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putIranVisasId(id, iIranVisaRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IranVisaApi - factory interface
 * @export
 */
export const IranVisaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IranVisaApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIranVisasId(id: number, options?: any): AxiosPromise<number> {
            return localVarFp.deleteIranVisasId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIranVisas(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: any): AxiosPromise<IIranVisaListResponseModel> {
            return localVarFp.getIranVisas(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIranVisasId(id: number, options?: any): AxiosPromise<IIranVisaResponseModel> {
            return localVarFp.getIranVisasId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IIranVisaRequestModel} iIranVisaRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postIranVisas(iIranVisaRequestModel: IIranVisaRequestModel, options?: any): AxiosPromise<IIranVisaResponseModel> {
            return localVarFp.postIranVisas(iIranVisaRequestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {IIranVisaRequestModel} iIranVisaRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putIranVisasId(id: number, iIranVisaRequestModel: IIranVisaRequestModel, options?: any): AxiosPromise<IIranVisaResponseModel> {
            return localVarFp.putIranVisasId(id, iIranVisaRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteIranVisasId operation in IranVisaApi.
 * @export
 * @interface IranVisaApiDeleteIranVisasIdRequest
 */
export interface IranVisaApiDeleteIranVisasIdRequest {
    /**
     * 
     * @type {number}
     * @memberof IranVisaApiDeleteIranVisasId
     */
    readonly id: number
}

/**
 * Request parameters for getIranVisas operation in IranVisaApi.
 * @export
 * @interface IranVisaApiGetIranVisasRequest
 */
export interface IranVisaApiGetIranVisasRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof IranVisaApiGetIranVisas
     */
    readonly sort?: string

    /**
     * Retun page/pageSize (default: true)
     * @type {boolean}
     * @memberof IranVisaApiGetIranVisas
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof IranVisaApiGetIranVisas
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof IranVisaApiGetIranVisas
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof IranVisaApiGetIranVisas
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof IranVisaApiGetIranVisas
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof IranVisaApiGetIranVisas
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof IranVisaApiGetIranVisas
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof IranVisaApiGetIranVisas
     */
    readonly filters?: object
}

/**
 * Request parameters for getIranVisasId operation in IranVisaApi.
 * @export
 * @interface IranVisaApiGetIranVisasIdRequest
 */
export interface IranVisaApiGetIranVisasIdRequest {
    /**
     * 
     * @type {number}
     * @memberof IranVisaApiGetIranVisasId
     */
    readonly id: number
}

/**
 * Request parameters for postIranVisas operation in IranVisaApi.
 * @export
 * @interface IranVisaApiPostIranVisasRequest
 */
export interface IranVisaApiPostIranVisasRequest {
    /**
     * 
     * @type {IIranVisaRequestModel}
     * @memberof IranVisaApiPostIranVisas
     */
    readonly iIranVisaRequestModel: IIranVisaRequestModel
}

/**
 * Request parameters for putIranVisasId operation in IranVisaApi.
 * @export
 * @interface IranVisaApiPutIranVisasIdRequest
 */
export interface IranVisaApiPutIranVisasIdRequest {
    /**
     * 
     * @type {number}
     * @memberof IranVisaApiPutIranVisasId
     */
    readonly id: number

    /**
     * 
     * @type {IIranVisaRequestModel}
     * @memberof IranVisaApiPutIranVisasId
     */
    readonly iIranVisaRequestModel: IIranVisaRequestModel
}

/**
 * IranVisaApi - object-oriented interface
 * @export
 * @class IranVisaApi
 * @extends {BaseAPI}
 */
export class IranVisaApi extends BaseAPI {
    /**
     * 
     * @param {IranVisaApiDeleteIranVisasIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IranVisaApi
     */
    public deleteIranVisasId(requestParameters: IranVisaApiDeleteIranVisasIdRequest, options?: AxiosRequestConfig) {
        return IranVisaApiFp(this.configuration).deleteIranVisasId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IranVisaApiGetIranVisasRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IranVisaApi
     */
    public getIranVisas(requestParameters: IranVisaApiGetIranVisasRequest = {}, options?: AxiosRequestConfig) {
        return IranVisaApiFp(this.configuration).getIranVisas(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IranVisaApiGetIranVisasIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IranVisaApi
     */
    public getIranVisasId(requestParameters: IranVisaApiGetIranVisasIdRequest, options?: AxiosRequestConfig) {
        return IranVisaApiFp(this.configuration).getIranVisasId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IranVisaApiPostIranVisasRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IranVisaApi
     */
    public postIranVisas(requestParameters: IranVisaApiPostIranVisasRequest, options?: AxiosRequestConfig) {
        return IranVisaApiFp(this.configuration).postIranVisas(requestParameters.iIranVisaRequestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IranVisaApiPutIranVisasIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IranVisaApi
     */
    public putIranVisasId(requestParameters: IranVisaApiPutIranVisasIdRequest, options?: AxiosRequestConfig) {
        return IranVisaApiFp(this.configuration).putIranVisasId(requestParameters.id, requestParameters.iIranVisaRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * IranVisaInfoApi - axios parameter creator
 * @export
 */
export const IranVisaInfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIranVisaInfo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/iran-visa-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIranVisaInfo: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/iran-visa-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IIranVisaInfoRequestModel} iIranVisaInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putIranVisaInfo: async (iIranVisaInfoRequestModel: IIranVisaInfoRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iIranVisaInfoRequestModel' is not null or undefined
            assertParamExists('putIranVisaInfo', 'iIranVisaInfoRequestModel', iIranVisaInfoRequestModel)
            const localVarPath = `/iran-visa-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iIranVisaInfoRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IranVisaInfoApi - functional programming interface
 * @export
 */
export const IranVisaInfoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IranVisaInfoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIranVisaInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIranVisaInfo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIranVisaInfo(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IIranVisaInfoListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIranVisaInfo(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IIranVisaInfoRequestModel} iIranVisaInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putIranVisaInfo(iIranVisaInfoRequestModel: IIranVisaInfoRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IIranVisaInfoResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putIranVisaInfo(iIranVisaInfoRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IranVisaInfoApi - factory interface
 * @export
 */
export const IranVisaInfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IranVisaInfoApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIranVisaInfo(options?: any): AxiosPromise<number> {
            return localVarFp.deleteIranVisaInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIranVisaInfo(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: any): AxiosPromise<IIranVisaInfoListResponseModel> {
            return localVarFp.getIranVisaInfo(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IIranVisaInfoRequestModel} iIranVisaInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putIranVisaInfo(iIranVisaInfoRequestModel: IIranVisaInfoRequestModel, options?: any): AxiosPromise<IIranVisaInfoResponseModel> {
            return localVarFp.putIranVisaInfo(iIranVisaInfoRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getIranVisaInfo operation in IranVisaInfoApi.
 * @export
 * @interface IranVisaInfoApiGetIranVisaInfoRequest
 */
export interface IranVisaInfoApiGetIranVisaInfoRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof IranVisaInfoApiGetIranVisaInfo
     */
    readonly sort?: string

    /**
     * Retun page/pageSize (default: true)
     * @type {boolean}
     * @memberof IranVisaInfoApiGetIranVisaInfo
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof IranVisaInfoApiGetIranVisaInfo
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof IranVisaInfoApiGetIranVisaInfo
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof IranVisaInfoApiGetIranVisaInfo
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof IranVisaInfoApiGetIranVisaInfo
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof IranVisaInfoApiGetIranVisaInfo
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof IranVisaInfoApiGetIranVisaInfo
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof IranVisaInfoApiGetIranVisaInfo
     */
    readonly filters?: object
}

/**
 * Request parameters for putIranVisaInfo operation in IranVisaInfoApi.
 * @export
 * @interface IranVisaInfoApiPutIranVisaInfoRequest
 */
export interface IranVisaInfoApiPutIranVisaInfoRequest {
    /**
     * 
     * @type {IIranVisaInfoRequestModel}
     * @memberof IranVisaInfoApiPutIranVisaInfo
     */
    readonly iIranVisaInfoRequestModel: IIranVisaInfoRequestModel
}

/**
 * IranVisaInfoApi - object-oriented interface
 * @export
 * @class IranVisaInfoApi
 * @extends {BaseAPI}
 */
export class IranVisaInfoApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IranVisaInfoApi
     */
    public deleteIranVisaInfo(options?: AxiosRequestConfig) {
        return IranVisaInfoApiFp(this.configuration).deleteIranVisaInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IranVisaInfoApiGetIranVisaInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IranVisaInfoApi
     */
    public getIranVisaInfo(requestParameters: IranVisaInfoApiGetIranVisaInfoRequest = {}, options?: AxiosRequestConfig) {
        return IranVisaInfoApiFp(this.configuration).getIranVisaInfo(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IranVisaInfoApiPutIranVisaInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IranVisaInfoApi
     */
    public putIranVisaInfo(requestParameters: IranVisaInfoApiPutIranVisaInfoRequest, options?: AxiosRequestConfig) {
        return IranVisaInfoApiFp(this.configuration).putIranVisaInfo(requestParameters.iIranVisaInfoRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MeetingRoomServiceApi - axios parameter creator
 * @export
 */
export const MeetingRoomServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMeetingRoomServicesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteMeetingRoomServicesId', 'id', id)
            const localVarPath = `/meeting-room-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingRoomServices: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/meeting-room-services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingRoomServicesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMeetingRoomServicesId', 'id', id)
            const localVarPath = `/meeting-room-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IMeetingRoomServiceRequestModel} iMeetingRoomServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMeetingRoomServices: async (iMeetingRoomServiceRequestModel: IMeetingRoomServiceRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iMeetingRoomServiceRequestModel' is not null or undefined
            assertParamExists('postMeetingRoomServices', 'iMeetingRoomServiceRequestModel', iMeetingRoomServiceRequestModel)
            const localVarPath = `/meeting-room-services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iMeetingRoomServiceRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {IMeetingRoomServiceRequestModel} iMeetingRoomServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putMeetingRoomServicesId: async (id: number, iMeetingRoomServiceRequestModel: IMeetingRoomServiceRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putMeetingRoomServicesId', 'id', id)
            // verify required parameter 'iMeetingRoomServiceRequestModel' is not null or undefined
            assertParamExists('putMeetingRoomServicesId', 'iMeetingRoomServiceRequestModel', iMeetingRoomServiceRequestModel)
            const localVarPath = `/meeting-room-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iMeetingRoomServiceRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MeetingRoomServiceApi - functional programming interface
 * @export
 */
export const MeetingRoomServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MeetingRoomServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMeetingRoomServicesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMeetingRoomServicesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeetingRoomServices(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IMeetingRoomServiceListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeetingRoomServices(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeetingRoomServicesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IMeetingRoomServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeetingRoomServicesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IMeetingRoomServiceRequestModel} iMeetingRoomServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postMeetingRoomServices(iMeetingRoomServiceRequestModel: IMeetingRoomServiceRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IMeetingRoomServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postMeetingRoomServices(iMeetingRoomServiceRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {IMeetingRoomServiceRequestModel} iMeetingRoomServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putMeetingRoomServicesId(id: number, iMeetingRoomServiceRequestModel: IMeetingRoomServiceRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IMeetingRoomServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putMeetingRoomServicesId(id, iMeetingRoomServiceRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MeetingRoomServiceApi - factory interface
 * @export
 */
export const MeetingRoomServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MeetingRoomServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMeetingRoomServicesId(id: number, options?: any): AxiosPromise<number> {
            return localVarFp.deleteMeetingRoomServicesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingRoomServices(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: any): AxiosPromise<IMeetingRoomServiceListResponseModel> {
            return localVarFp.getMeetingRoomServices(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingRoomServicesId(id: number, options?: any): AxiosPromise<IMeetingRoomServiceResponseModel> {
            return localVarFp.getMeetingRoomServicesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IMeetingRoomServiceRequestModel} iMeetingRoomServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMeetingRoomServices(iMeetingRoomServiceRequestModel: IMeetingRoomServiceRequestModel, options?: any): AxiosPromise<IMeetingRoomServiceResponseModel> {
            return localVarFp.postMeetingRoomServices(iMeetingRoomServiceRequestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {IMeetingRoomServiceRequestModel} iMeetingRoomServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putMeetingRoomServicesId(id: number, iMeetingRoomServiceRequestModel: IMeetingRoomServiceRequestModel, options?: any): AxiosPromise<IMeetingRoomServiceResponseModel> {
            return localVarFp.putMeetingRoomServicesId(id, iMeetingRoomServiceRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteMeetingRoomServicesId operation in MeetingRoomServiceApi.
 * @export
 * @interface MeetingRoomServiceApiDeleteMeetingRoomServicesIdRequest
 */
export interface MeetingRoomServiceApiDeleteMeetingRoomServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof MeetingRoomServiceApiDeleteMeetingRoomServicesId
     */
    readonly id: number
}

/**
 * Request parameters for getMeetingRoomServices operation in MeetingRoomServiceApi.
 * @export
 * @interface MeetingRoomServiceApiGetMeetingRoomServicesRequest
 */
export interface MeetingRoomServiceApiGetMeetingRoomServicesRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof MeetingRoomServiceApiGetMeetingRoomServices
     */
    readonly sort?: string

    /**
     * Retun page/pageSize (default: true)
     * @type {boolean}
     * @memberof MeetingRoomServiceApiGetMeetingRoomServices
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof MeetingRoomServiceApiGetMeetingRoomServices
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof MeetingRoomServiceApiGetMeetingRoomServices
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof MeetingRoomServiceApiGetMeetingRoomServices
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof MeetingRoomServiceApiGetMeetingRoomServices
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof MeetingRoomServiceApiGetMeetingRoomServices
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof MeetingRoomServiceApiGetMeetingRoomServices
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof MeetingRoomServiceApiGetMeetingRoomServices
     */
    readonly filters?: object
}

/**
 * Request parameters for getMeetingRoomServicesId operation in MeetingRoomServiceApi.
 * @export
 * @interface MeetingRoomServiceApiGetMeetingRoomServicesIdRequest
 */
export interface MeetingRoomServiceApiGetMeetingRoomServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof MeetingRoomServiceApiGetMeetingRoomServicesId
     */
    readonly id: number
}

/**
 * Request parameters for postMeetingRoomServices operation in MeetingRoomServiceApi.
 * @export
 * @interface MeetingRoomServiceApiPostMeetingRoomServicesRequest
 */
export interface MeetingRoomServiceApiPostMeetingRoomServicesRequest {
    /**
     * 
     * @type {IMeetingRoomServiceRequestModel}
     * @memberof MeetingRoomServiceApiPostMeetingRoomServices
     */
    readonly iMeetingRoomServiceRequestModel: IMeetingRoomServiceRequestModel
}

/**
 * Request parameters for putMeetingRoomServicesId operation in MeetingRoomServiceApi.
 * @export
 * @interface MeetingRoomServiceApiPutMeetingRoomServicesIdRequest
 */
export interface MeetingRoomServiceApiPutMeetingRoomServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof MeetingRoomServiceApiPutMeetingRoomServicesId
     */
    readonly id: number

    /**
     * 
     * @type {IMeetingRoomServiceRequestModel}
     * @memberof MeetingRoomServiceApiPutMeetingRoomServicesId
     */
    readonly iMeetingRoomServiceRequestModel: IMeetingRoomServiceRequestModel
}

/**
 * MeetingRoomServiceApi - object-oriented interface
 * @export
 * @class MeetingRoomServiceApi
 * @extends {BaseAPI}
 */
export class MeetingRoomServiceApi extends BaseAPI {
    /**
     * 
     * @param {MeetingRoomServiceApiDeleteMeetingRoomServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingRoomServiceApi
     */
    public deleteMeetingRoomServicesId(requestParameters: MeetingRoomServiceApiDeleteMeetingRoomServicesIdRequest, options?: AxiosRequestConfig) {
        return MeetingRoomServiceApiFp(this.configuration).deleteMeetingRoomServicesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MeetingRoomServiceApiGetMeetingRoomServicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingRoomServiceApi
     */
    public getMeetingRoomServices(requestParameters: MeetingRoomServiceApiGetMeetingRoomServicesRequest = {}, options?: AxiosRequestConfig) {
        return MeetingRoomServiceApiFp(this.configuration).getMeetingRoomServices(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MeetingRoomServiceApiGetMeetingRoomServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingRoomServiceApi
     */
    public getMeetingRoomServicesId(requestParameters: MeetingRoomServiceApiGetMeetingRoomServicesIdRequest, options?: AxiosRequestConfig) {
        return MeetingRoomServiceApiFp(this.configuration).getMeetingRoomServicesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MeetingRoomServiceApiPostMeetingRoomServicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingRoomServiceApi
     */
    public postMeetingRoomServices(requestParameters: MeetingRoomServiceApiPostMeetingRoomServicesRequest, options?: AxiosRequestConfig) {
        return MeetingRoomServiceApiFp(this.configuration).postMeetingRoomServices(requestParameters.iMeetingRoomServiceRequestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MeetingRoomServiceApiPutMeetingRoomServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingRoomServiceApi
     */
    public putMeetingRoomServicesId(requestParameters: MeetingRoomServiceApiPutMeetingRoomServicesIdRequest, options?: AxiosRequestConfig) {
        return MeetingRoomServiceApiFp(this.configuration).putMeetingRoomServicesId(requestParameters.id, requestParameters.iMeetingRoomServiceRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MeetingRoomServiceInfoApi - axios parameter creator
 * @export
 */
export const MeetingRoomServiceInfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMeetingRoomServiceInfo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/meeting-room-service-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingRoomServiceInfo: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/meeting-room-service-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IMeetingRoomServiceInfoRequestModel} iMeetingRoomServiceInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putMeetingRoomServiceInfo: async (iMeetingRoomServiceInfoRequestModel: IMeetingRoomServiceInfoRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iMeetingRoomServiceInfoRequestModel' is not null or undefined
            assertParamExists('putMeetingRoomServiceInfo', 'iMeetingRoomServiceInfoRequestModel', iMeetingRoomServiceInfoRequestModel)
            const localVarPath = `/meeting-room-service-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iMeetingRoomServiceInfoRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MeetingRoomServiceInfoApi - functional programming interface
 * @export
 */
export const MeetingRoomServiceInfoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MeetingRoomServiceInfoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMeetingRoomServiceInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMeetingRoomServiceInfo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeetingRoomServiceInfo(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IMeetingRoomServiceInfoListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeetingRoomServiceInfo(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IMeetingRoomServiceInfoRequestModel} iMeetingRoomServiceInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putMeetingRoomServiceInfo(iMeetingRoomServiceInfoRequestModel: IMeetingRoomServiceInfoRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IMeetingRoomServiceInfoResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putMeetingRoomServiceInfo(iMeetingRoomServiceInfoRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MeetingRoomServiceInfoApi - factory interface
 * @export
 */
export const MeetingRoomServiceInfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MeetingRoomServiceInfoApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMeetingRoomServiceInfo(options?: any): AxiosPromise<number> {
            return localVarFp.deleteMeetingRoomServiceInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingRoomServiceInfo(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: any): AxiosPromise<IMeetingRoomServiceInfoListResponseModel> {
            return localVarFp.getMeetingRoomServiceInfo(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IMeetingRoomServiceInfoRequestModel} iMeetingRoomServiceInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putMeetingRoomServiceInfo(iMeetingRoomServiceInfoRequestModel: IMeetingRoomServiceInfoRequestModel, options?: any): AxiosPromise<IMeetingRoomServiceInfoResponseModel> {
            return localVarFp.putMeetingRoomServiceInfo(iMeetingRoomServiceInfoRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getMeetingRoomServiceInfo operation in MeetingRoomServiceInfoApi.
 * @export
 * @interface MeetingRoomServiceInfoApiGetMeetingRoomServiceInfoRequest
 */
export interface MeetingRoomServiceInfoApiGetMeetingRoomServiceInfoRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof MeetingRoomServiceInfoApiGetMeetingRoomServiceInfo
     */
    readonly sort?: string

    /**
     * Retun page/pageSize (default: true)
     * @type {boolean}
     * @memberof MeetingRoomServiceInfoApiGetMeetingRoomServiceInfo
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof MeetingRoomServiceInfoApiGetMeetingRoomServiceInfo
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof MeetingRoomServiceInfoApiGetMeetingRoomServiceInfo
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof MeetingRoomServiceInfoApiGetMeetingRoomServiceInfo
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof MeetingRoomServiceInfoApiGetMeetingRoomServiceInfo
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof MeetingRoomServiceInfoApiGetMeetingRoomServiceInfo
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof MeetingRoomServiceInfoApiGetMeetingRoomServiceInfo
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof MeetingRoomServiceInfoApiGetMeetingRoomServiceInfo
     */
    readonly filters?: object
}

/**
 * Request parameters for putMeetingRoomServiceInfo operation in MeetingRoomServiceInfoApi.
 * @export
 * @interface MeetingRoomServiceInfoApiPutMeetingRoomServiceInfoRequest
 */
export interface MeetingRoomServiceInfoApiPutMeetingRoomServiceInfoRequest {
    /**
     * 
     * @type {IMeetingRoomServiceInfoRequestModel}
     * @memberof MeetingRoomServiceInfoApiPutMeetingRoomServiceInfo
     */
    readonly iMeetingRoomServiceInfoRequestModel: IMeetingRoomServiceInfoRequestModel
}

/**
 * MeetingRoomServiceInfoApi - object-oriented interface
 * @export
 * @class MeetingRoomServiceInfoApi
 * @extends {BaseAPI}
 */
export class MeetingRoomServiceInfoApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingRoomServiceInfoApi
     */
    public deleteMeetingRoomServiceInfo(options?: AxiosRequestConfig) {
        return MeetingRoomServiceInfoApiFp(this.configuration).deleteMeetingRoomServiceInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MeetingRoomServiceInfoApiGetMeetingRoomServiceInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingRoomServiceInfoApi
     */
    public getMeetingRoomServiceInfo(requestParameters: MeetingRoomServiceInfoApiGetMeetingRoomServiceInfoRequest = {}, options?: AxiosRequestConfig) {
        return MeetingRoomServiceInfoApiFp(this.configuration).getMeetingRoomServiceInfo(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MeetingRoomServiceInfoApiPutMeetingRoomServiceInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingRoomServiceInfoApi
     */
    public putMeetingRoomServiceInfo(requestParameters: MeetingRoomServiceInfoApiPutMeetingRoomServiceInfoRequest, options?: AxiosRequestConfig) {
        return MeetingRoomServiceInfoApiFp(this.configuration).putMeetingRoomServiceInfo(requestParameters.iMeetingRoomServiceInfoRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PrivateJetServiceApi - axios parameter creator
 * @export
 */
export const PrivateJetServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePrivateJetServicesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePrivateJetServicesId', 'id', id)
            const localVarPath = `/private-jet-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrivateJetServices: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/private-jet-services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrivateJetServicesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPrivateJetServicesId', 'id', id)
            const localVarPath = `/private-jet-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IPrivateJetServiceRequestModel} iPrivateJetServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPrivateJetServices: async (iPrivateJetServiceRequestModel: IPrivateJetServiceRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iPrivateJetServiceRequestModel' is not null or undefined
            assertParamExists('postPrivateJetServices', 'iPrivateJetServiceRequestModel', iPrivateJetServiceRequestModel)
            const localVarPath = `/private-jet-services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iPrivateJetServiceRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {IPrivateJetServiceRequestModel} iPrivateJetServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putPrivateJetServicesId: async (id: number, iPrivateJetServiceRequestModel: IPrivateJetServiceRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putPrivateJetServicesId', 'id', id)
            // verify required parameter 'iPrivateJetServiceRequestModel' is not null or undefined
            assertParamExists('putPrivateJetServicesId', 'iPrivateJetServiceRequestModel', iPrivateJetServiceRequestModel)
            const localVarPath = `/private-jet-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iPrivateJetServiceRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PrivateJetServiceApi - functional programming interface
 * @export
 */
export const PrivateJetServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PrivateJetServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePrivateJetServicesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePrivateJetServicesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrivateJetServices(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IPrivateJetServiceListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrivateJetServices(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrivateJetServicesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IPrivateJetServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrivateJetServicesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IPrivateJetServiceRequestModel} iPrivateJetServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPrivateJetServices(iPrivateJetServiceRequestModel: IPrivateJetServiceRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IPrivateJetServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPrivateJetServices(iPrivateJetServiceRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {IPrivateJetServiceRequestModel} iPrivateJetServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putPrivateJetServicesId(id: number, iPrivateJetServiceRequestModel: IPrivateJetServiceRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IPrivateJetServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putPrivateJetServicesId(id, iPrivateJetServiceRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PrivateJetServiceApi - factory interface
 * @export
 */
export const PrivateJetServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PrivateJetServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePrivateJetServicesId(id: number, options?: any): AxiosPromise<number> {
            return localVarFp.deletePrivateJetServicesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrivateJetServices(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: any): AxiosPromise<IPrivateJetServiceListResponseModel> {
            return localVarFp.getPrivateJetServices(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrivateJetServicesId(id: number, options?: any): AxiosPromise<IPrivateJetServiceResponseModel> {
            return localVarFp.getPrivateJetServicesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IPrivateJetServiceRequestModel} iPrivateJetServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPrivateJetServices(iPrivateJetServiceRequestModel: IPrivateJetServiceRequestModel, options?: any): AxiosPromise<IPrivateJetServiceResponseModel> {
            return localVarFp.postPrivateJetServices(iPrivateJetServiceRequestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {IPrivateJetServiceRequestModel} iPrivateJetServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putPrivateJetServicesId(id: number, iPrivateJetServiceRequestModel: IPrivateJetServiceRequestModel, options?: any): AxiosPromise<IPrivateJetServiceResponseModel> {
            return localVarFp.putPrivateJetServicesId(id, iPrivateJetServiceRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deletePrivateJetServicesId operation in PrivateJetServiceApi.
 * @export
 * @interface PrivateJetServiceApiDeletePrivateJetServicesIdRequest
 */
export interface PrivateJetServiceApiDeletePrivateJetServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof PrivateJetServiceApiDeletePrivateJetServicesId
     */
    readonly id: number
}

/**
 * Request parameters for getPrivateJetServices operation in PrivateJetServiceApi.
 * @export
 * @interface PrivateJetServiceApiGetPrivateJetServicesRequest
 */
export interface PrivateJetServiceApiGetPrivateJetServicesRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof PrivateJetServiceApiGetPrivateJetServices
     */
    readonly sort?: string

    /**
     * Retun page/pageSize (default: true)
     * @type {boolean}
     * @memberof PrivateJetServiceApiGetPrivateJetServices
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof PrivateJetServiceApiGetPrivateJetServices
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof PrivateJetServiceApiGetPrivateJetServices
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof PrivateJetServiceApiGetPrivateJetServices
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof PrivateJetServiceApiGetPrivateJetServices
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof PrivateJetServiceApiGetPrivateJetServices
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof PrivateJetServiceApiGetPrivateJetServices
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof PrivateJetServiceApiGetPrivateJetServices
     */
    readonly filters?: object
}

/**
 * Request parameters for getPrivateJetServicesId operation in PrivateJetServiceApi.
 * @export
 * @interface PrivateJetServiceApiGetPrivateJetServicesIdRequest
 */
export interface PrivateJetServiceApiGetPrivateJetServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof PrivateJetServiceApiGetPrivateJetServicesId
     */
    readonly id: number
}

/**
 * Request parameters for postPrivateJetServices operation in PrivateJetServiceApi.
 * @export
 * @interface PrivateJetServiceApiPostPrivateJetServicesRequest
 */
export interface PrivateJetServiceApiPostPrivateJetServicesRequest {
    /**
     * 
     * @type {IPrivateJetServiceRequestModel}
     * @memberof PrivateJetServiceApiPostPrivateJetServices
     */
    readonly iPrivateJetServiceRequestModel: IPrivateJetServiceRequestModel
}

/**
 * Request parameters for putPrivateJetServicesId operation in PrivateJetServiceApi.
 * @export
 * @interface PrivateJetServiceApiPutPrivateJetServicesIdRequest
 */
export interface PrivateJetServiceApiPutPrivateJetServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof PrivateJetServiceApiPutPrivateJetServicesId
     */
    readonly id: number

    /**
     * 
     * @type {IPrivateJetServiceRequestModel}
     * @memberof PrivateJetServiceApiPutPrivateJetServicesId
     */
    readonly iPrivateJetServiceRequestModel: IPrivateJetServiceRequestModel
}

/**
 * PrivateJetServiceApi - object-oriented interface
 * @export
 * @class PrivateJetServiceApi
 * @extends {BaseAPI}
 */
export class PrivateJetServiceApi extends BaseAPI {
    /**
     * 
     * @param {PrivateJetServiceApiDeletePrivateJetServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivateJetServiceApi
     */
    public deletePrivateJetServicesId(requestParameters: PrivateJetServiceApiDeletePrivateJetServicesIdRequest, options?: AxiosRequestConfig) {
        return PrivateJetServiceApiFp(this.configuration).deletePrivateJetServicesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PrivateJetServiceApiGetPrivateJetServicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivateJetServiceApi
     */
    public getPrivateJetServices(requestParameters: PrivateJetServiceApiGetPrivateJetServicesRequest = {}, options?: AxiosRequestConfig) {
        return PrivateJetServiceApiFp(this.configuration).getPrivateJetServices(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PrivateJetServiceApiGetPrivateJetServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivateJetServiceApi
     */
    public getPrivateJetServicesId(requestParameters: PrivateJetServiceApiGetPrivateJetServicesIdRequest, options?: AxiosRequestConfig) {
        return PrivateJetServiceApiFp(this.configuration).getPrivateJetServicesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PrivateJetServiceApiPostPrivateJetServicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivateJetServiceApi
     */
    public postPrivateJetServices(requestParameters: PrivateJetServiceApiPostPrivateJetServicesRequest, options?: AxiosRequestConfig) {
        return PrivateJetServiceApiFp(this.configuration).postPrivateJetServices(requestParameters.iPrivateJetServiceRequestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PrivateJetServiceApiPutPrivateJetServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivateJetServiceApi
     */
    public putPrivateJetServicesId(requestParameters: PrivateJetServiceApiPutPrivateJetServicesIdRequest, options?: AxiosRequestConfig) {
        return PrivateJetServiceApiFp(this.configuration).putPrivateJetServicesId(requestParameters.id, requestParameters.iPrivateJetServiceRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PrivateJetServiceInfoApi - axios parameter creator
 * @export
 */
export const PrivateJetServiceInfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePrivateJetServiceInfo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/private-jet-service-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrivateJetServiceInfo: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/private-jet-service-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IPrivateJetServiceInfoRequestModel} iPrivateJetServiceInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putPrivateJetServiceInfo: async (iPrivateJetServiceInfoRequestModel: IPrivateJetServiceInfoRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iPrivateJetServiceInfoRequestModel' is not null or undefined
            assertParamExists('putPrivateJetServiceInfo', 'iPrivateJetServiceInfoRequestModel', iPrivateJetServiceInfoRequestModel)
            const localVarPath = `/private-jet-service-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iPrivateJetServiceInfoRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PrivateJetServiceInfoApi - functional programming interface
 * @export
 */
export const PrivateJetServiceInfoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PrivateJetServiceInfoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePrivateJetServiceInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePrivateJetServiceInfo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrivateJetServiceInfo(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IPrivateJetServiceInfoListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrivateJetServiceInfo(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IPrivateJetServiceInfoRequestModel} iPrivateJetServiceInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putPrivateJetServiceInfo(iPrivateJetServiceInfoRequestModel: IPrivateJetServiceInfoRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IPrivateJetServiceInfoResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putPrivateJetServiceInfo(iPrivateJetServiceInfoRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PrivateJetServiceInfoApi - factory interface
 * @export
 */
export const PrivateJetServiceInfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PrivateJetServiceInfoApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePrivateJetServiceInfo(options?: any): AxiosPromise<number> {
            return localVarFp.deletePrivateJetServiceInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrivateJetServiceInfo(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: any): AxiosPromise<IPrivateJetServiceInfoListResponseModel> {
            return localVarFp.getPrivateJetServiceInfo(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IPrivateJetServiceInfoRequestModel} iPrivateJetServiceInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putPrivateJetServiceInfo(iPrivateJetServiceInfoRequestModel: IPrivateJetServiceInfoRequestModel, options?: any): AxiosPromise<IPrivateJetServiceInfoResponseModel> {
            return localVarFp.putPrivateJetServiceInfo(iPrivateJetServiceInfoRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getPrivateJetServiceInfo operation in PrivateJetServiceInfoApi.
 * @export
 * @interface PrivateJetServiceInfoApiGetPrivateJetServiceInfoRequest
 */
export interface PrivateJetServiceInfoApiGetPrivateJetServiceInfoRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof PrivateJetServiceInfoApiGetPrivateJetServiceInfo
     */
    readonly sort?: string

    /**
     * Retun page/pageSize (default: true)
     * @type {boolean}
     * @memberof PrivateJetServiceInfoApiGetPrivateJetServiceInfo
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof PrivateJetServiceInfoApiGetPrivateJetServiceInfo
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof PrivateJetServiceInfoApiGetPrivateJetServiceInfo
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof PrivateJetServiceInfoApiGetPrivateJetServiceInfo
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof PrivateJetServiceInfoApiGetPrivateJetServiceInfo
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof PrivateJetServiceInfoApiGetPrivateJetServiceInfo
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof PrivateJetServiceInfoApiGetPrivateJetServiceInfo
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof PrivateJetServiceInfoApiGetPrivateJetServiceInfo
     */
    readonly filters?: object
}

/**
 * Request parameters for putPrivateJetServiceInfo operation in PrivateJetServiceInfoApi.
 * @export
 * @interface PrivateJetServiceInfoApiPutPrivateJetServiceInfoRequest
 */
export interface PrivateJetServiceInfoApiPutPrivateJetServiceInfoRequest {
    /**
     * 
     * @type {IPrivateJetServiceInfoRequestModel}
     * @memberof PrivateJetServiceInfoApiPutPrivateJetServiceInfo
     */
    readonly iPrivateJetServiceInfoRequestModel: IPrivateJetServiceInfoRequestModel
}

/**
 * PrivateJetServiceInfoApi - object-oriented interface
 * @export
 * @class PrivateJetServiceInfoApi
 * @extends {BaseAPI}
 */
export class PrivateJetServiceInfoApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivateJetServiceInfoApi
     */
    public deletePrivateJetServiceInfo(options?: AxiosRequestConfig) {
        return PrivateJetServiceInfoApiFp(this.configuration).deletePrivateJetServiceInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PrivateJetServiceInfoApiGetPrivateJetServiceInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivateJetServiceInfoApi
     */
    public getPrivateJetServiceInfo(requestParameters: PrivateJetServiceInfoApiGetPrivateJetServiceInfoRequest = {}, options?: AxiosRequestConfig) {
        return PrivateJetServiceInfoApiFp(this.configuration).getPrivateJetServiceInfo(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PrivateJetServiceInfoApiPutPrivateJetServiceInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivateJetServiceInfoApi
     */
    public putPrivateJetServiceInfo(requestParameters: PrivateJetServiceInfoApiPutPrivateJetServiceInfoRequest, options?: AxiosRequestConfig) {
        return PrivateJetServiceInfoApiFp(this.configuration).putPrivateJetServiceInfo(requestParameters.iPrivateJetServiceInfoRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RequestApi - axios parameter creator
 * @export
 */
export const RequestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRequestsId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteRequestsId', 'id', id)
            const localVarPath = `/requests/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequests: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequestsId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRequestsId', 'id', id)
            const localVarPath = `/requests/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IRequestRequestModel} iRequestRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRequests: async (iRequestRequestModel: IRequestRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iRequestRequestModel' is not null or undefined
            assertParamExists('postRequests', 'iRequestRequestModel', iRequestRequestModel)
            const localVarPath = `/requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iRequestRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {IRequestRequestModel} iRequestRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putRequestsId: async (id: number, iRequestRequestModel: IRequestRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putRequestsId', 'id', id)
            // verify required parameter 'iRequestRequestModel' is not null or undefined
            assertParamExists('putRequestsId', 'iRequestRequestModel', iRequestRequestModel)
            const localVarPath = `/requests/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iRequestRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RequestApi - functional programming interface
 * @export
 */
export const RequestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RequestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRequestsId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRequestsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRequests(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IRequestListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRequests(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRequestsId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IRequestResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRequestsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IRequestRequestModel} iRequestRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRequests(iRequestRequestModel: IRequestRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IRequestResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRequests(iRequestRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {IRequestRequestModel} iRequestRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putRequestsId(id: number, iRequestRequestModel: IRequestRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IRequestResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putRequestsId(id, iRequestRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RequestApi - factory interface
 * @export
 */
export const RequestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RequestApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRequestsId(id: number, options?: any): AxiosPromise<number> {
            return localVarFp.deleteRequestsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequests(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: any): AxiosPromise<IRequestListResponseModel> {
            return localVarFp.getRequests(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequestsId(id: number, options?: any): AxiosPromise<IRequestResponseModel> {
            return localVarFp.getRequestsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IRequestRequestModel} iRequestRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRequests(iRequestRequestModel: IRequestRequestModel, options?: any): AxiosPromise<IRequestResponseModel> {
            return localVarFp.postRequests(iRequestRequestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {IRequestRequestModel} iRequestRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putRequestsId(id: number, iRequestRequestModel: IRequestRequestModel, options?: any): AxiosPromise<IRequestResponseModel> {
            return localVarFp.putRequestsId(id, iRequestRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteRequestsId operation in RequestApi.
 * @export
 * @interface RequestApiDeleteRequestsIdRequest
 */
export interface RequestApiDeleteRequestsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof RequestApiDeleteRequestsId
     */
    readonly id: number
}

/**
 * Request parameters for getRequests operation in RequestApi.
 * @export
 * @interface RequestApiGetRequestsRequest
 */
export interface RequestApiGetRequestsRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof RequestApiGetRequests
     */
    readonly sort?: string

    /**
     * Retun page/pageSize (default: true)
     * @type {boolean}
     * @memberof RequestApiGetRequests
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof RequestApiGetRequests
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof RequestApiGetRequests
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof RequestApiGetRequests
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof RequestApiGetRequests
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof RequestApiGetRequests
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof RequestApiGetRequests
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof RequestApiGetRequests
     */
    readonly filters?: object
}

/**
 * Request parameters for getRequestsId operation in RequestApi.
 * @export
 * @interface RequestApiGetRequestsIdRequest
 */
export interface RequestApiGetRequestsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof RequestApiGetRequestsId
     */
    readonly id: number
}

/**
 * Request parameters for postRequests operation in RequestApi.
 * @export
 * @interface RequestApiPostRequestsRequest
 */
export interface RequestApiPostRequestsRequest {
    /**
     * 
     * @type {IRequestRequestModel}
     * @memberof RequestApiPostRequests
     */
    readonly iRequestRequestModel: IRequestRequestModel
}

/**
 * Request parameters for putRequestsId operation in RequestApi.
 * @export
 * @interface RequestApiPutRequestsIdRequest
 */
export interface RequestApiPutRequestsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof RequestApiPutRequestsId
     */
    readonly id: number

    /**
     * 
     * @type {IRequestRequestModel}
     * @memberof RequestApiPutRequestsId
     */
    readonly iRequestRequestModel: IRequestRequestModel
}

/**
 * RequestApi - object-oriented interface
 * @export
 * @class RequestApi
 * @extends {BaseAPI}
 */
export class RequestApi extends BaseAPI {
    /**
     * 
     * @param {RequestApiDeleteRequestsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public deleteRequestsId(requestParameters: RequestApiDeleteRequestsIdRequest, options?: AxiosRequestConfig) {
        return RequestApiFp(this.configuration).deleteRequestsId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RequestApiGetRequestsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public getRequests(requestParameters: RequestApiGetRequestsRequest = {}, options?: AxiosRequestConfig) {
        return RequestApiFp(this.configuration).getRequests(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RequestApiGetRequestsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public getRequestsId(requestParameters: RequestApiGetRequestsIdRequest, options?: AxiosRequestConfig) {
        return RequestApiFp(this.configuration).getRequestsId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RequestApiPostRequestsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public postRequests(requestParameters: RequestApiPostRequestsRequest, options?: AxiosRequestConfig) {
        return RequestApiFp(this.configuration).postRequests(requestParameters.iRequestRequestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RequestApiPutRequestsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestApi
     */
    public putRequestsId(requestParameters: RequestApiPutRequestsIdRequest, options?: AxiosRequestConfig) {
        return RequestApiFp(this.configuration).putRequestsId(requestParameters.id, requestParameters.iRequestRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RestaurantServiceApi - axios parameter creator
 * @export
 */
export const RestaurantServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRestaurantServicesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteRestaurantServicesId', 'id', id)
            const localVarPath = `/restaurant-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRestaurantServices: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/restaurant-services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRestaurantServicesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getRestaurantServicesId', 'id', id)
            const localVarPath = `/restaurant-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IRestaurantServiceRequestModel} iRestaurantServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRestaurantServices: async (iRestaurantServiceRequestModel: IRestaurantServiceRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iRestaurantServiceRequestModel' is not null or undefined
            assertParamExists('postRestaurantServices', 'iRestaurantServiceRequestModel', iRestaurantServiceRequestModel)
            const localVarPath = `/restaurant-services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iRestaurantServiceRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {IRestaurantServiceRequestModel} iRestaurantServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putRestaurantServicesId: async (id: number, iRestaurantServiceRequestModel: IRestaurantServiceRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putRestaurantServicesId', 'id', id)
            // verify required parameter 'iRestaurantServiceRequestModel' is not null or undefined
            assertParamExists('putRestaurantServicesId', 'iRestaurantServiceRequestModel', iRestaurantServiceRequestModel)
            const localVarPath = `/restaurant-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iRestaurantServiceRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RestaurantServiceApi - functional programming interface
 * @export
 */
export const RestaurantServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RestaurantServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRestaurantServicesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRestaurantServicesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRestaurantServices(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IRestaurantServiceListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRestaurantServices(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRestaurantServicesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IRestaurantServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRestaurantServicesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IRestaurantServiceRequestModel} iRestaurantServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRestaurantServices(iRestaurantServiceRequestModel: IRestaurantServiceRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IRestaurantServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRestaurantServices(iRestaurantServiceRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {IRestaurantServiceRequestModel} iRestaurantServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putRestaurantServicesId(id: number, iRestaurantServiceRequestModel: IRestaurantServiceRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IRestaurantServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putRestaurantServicesId(id, iRestaurantServiceRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RestaurantServiceApi - factory interface
 * @export
 */
export const RestaurantServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RestaurantServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRestaurantServicesId(id: number, options?: any): AxiosPromise<number> {
            return localVarFp.deleteRestaurantServicesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRestaurantServices(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: any): AxiosPromise<IRestaurantServiceListResponseModel> {
            return localVarFp.getRestaurantServices(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRestaurantServicesId(id: number, options?: any): AxiosPromise<IRestaurantServiceResponseModel> {
            return localVarFp.getRestaurantServicesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IRestaurantServiceRequestModel} iRestaurantServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRestaurantServices(iRestaurantServiceRequestModel: IRestaurantServiceRequestModel, options?: any): AxiosPromise<IRestaurantServiceResponseModel> {
            return localVarFp.postRestaurantServices(iRestaurantServiceRequestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {IRestaurantServiceRequestModel} iRestaurantServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putRestaurantServicesId(id: number, iRestaurantServiceRequestModel: IRestaurantServiceRequestModel, options?: any): AxiosPromise<IRestaurantServiceResponseModel> {
            return localVarFp.putRestaurantServicesId(id, iRestaurantServiceRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteRestaurantServicesId operation in RestaurantServiceApi.
 * @export
 * @interface RestaurantServiceApiDeleteRestaurantServicesIdRequest
 */
export interface RestaurantServiceApiDeleteRestaurantServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof RestaurantServiceApiDeleteRestaurantServicesId
     */
    readonly id: number
}

/**
 * Request parameters for getRestaurantServices operation in RestaurantServiceApi.
 * @export
 * @interface RestaurantServiceApiGetRestaurantServicesRequest
 */
export interface RestaurantServiceApiGetRestaurantServicesRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof RestaurantServiceApiGetRestaurantServices
     */
    readonly sort?: string

    /**
     * Retun page/pageSize (default: true)
     * @type {boolean}
     * @memberof RestaurantServiceApiGetRestaurantServices
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof RestaurantServiceApiGetRestaurantServices
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof RestaurantServiceApiGetRestaurantServices
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof RestaurantServiceApiGetRestaurantServices
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof RestaurantServiceApiGetRestaurantServices
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof RestaurantServiceApiGetRestaurantServices
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof RestaurantServiceApiGetRestaurantServices
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof RestaurantServiceApiGetRestaurantServices
     */
    readonly filters?: object
}

/**
 * Request parameters for getRestaurantServicesId operation in RestaurantServiceApi.
 * @export
 * @interface RestaurantServiceApiGetRestaurantServicesIdRequest
 */
export interface RestaurantServiceApiGetRestaurantServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof RestaurantServiceApiGetRestaurantServicesId
     */
    readonly id: number
}

/**
 * Request parameters for postRestaurantServices operation in RestaurantServiceApi.
 * @export
 * @interface RestaurantServiceApiPostRestaurantServicesRequest
 */
export interface RestaurantServiceApiPostRestaurantServicesRequest {
    /**
     * 
     * @type {IRestaurantServiceRequestModel}
     * @memberof RestaurantServiceApiPostRestaurantServices
     */
    readonly iRestaurantServiceRequestModel: IRestaurantServiceRequestModel
}

/**
 * Request parameters for putRestaurantServicesId operation in RestaurantServiceApi.
 * @export
 * @interface RestaurantServiceApiPutRestaurantServicesIdRequest
 */
export interface RestaurantServiceApiPutRestaurantServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof RestaurantServiceApiPutRestaurantServicesId
     */
    readonly id: number

    /**
     * 
     * @type {IRestaurantServiceRequestModel}
     * @memberof RestaurantServiceApiPutRestaurantServicesId
     */
    readonly iRestaurantServiceRequestModel: IRestaurantServiceRequestModel
}

/**
 * RestaurantServiceApi - object-oriented interface
 * @export
 * @class RestaurantServiceApi
 * @extends {BaseAPI}
 */
export class RestaurantServiceApi extends BaseAPI {
    /**
     * 
     * @param {RestaurantServiceApiDeleteRestaurantServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantServiceApi
     */
    public deleteRestaurantServicesId(requestParameters: RestaurantServiceApiDeleteRestaurantServicesIdRequest, options?: AxiosRequestConfig) {
        return RestaurantServiceApiFp(this.configuration).deleteRestaurantServicesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RestaurantServiceApiGetRestaurantServicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantServiceApi
     */
    public getRestaurantServices(requestParameters: RestaurantServiceApiGetRestaurantServicesRequest = {}, options?: AxiosRequestConfig) {
        return RestaurantServiceApiFp(this.configuration).getRestaurantServices(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RestaurantServiceApiGetRestaurantServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantServiceApi
     */
    public getRestaurantServicesId(requestParameters: RestaurantServiceApiGetRestaurantServicesIdRequest, options?: AxiosRequestConfig) {
        return RestaurantServiceApiFp(this.configuration).getRestaurantServicesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RestaurantServiceApiPostRestaurantServicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantServiceApi
     */
    public postRestaurantServices(requestParameters: RestaurantServiceApiPostRestaurantServicesRequest, options?: AxiosRequestConfig) {
        return RestaurantServiceApiFp(this.configuration).postRestaurantServices(requestParameters.iRestaurantServiceRequestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RestaurantServiceApiPutRestaurantServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantServiceApi
     */
    public putRestaurantServicesId(requestParameters: RestaurantServiceApiPutRestaurantServicesIdRequest, options?: AxiosRequestConfig) {
        return RestaurantServiceApiFp(this.configuration).putRestaurantServicesId(requestParameters.id, requestParameters.iRestaurantServiceRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RestaurantServiceInfoApi - axios parameter creator
 * @export
 */
export const RestaurantServiceInfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRestaurantServiceInfo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/restaurant-service-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRestaurantServiceInfo: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/restaurant-service-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IRestaurantServiceInfoRequestModel} iRestaurantServiceInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putRestaurantServiceInfo: async (iRestaurantServiceInfoRequestModel: IRestaurantServiceInfoRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iRestaurantServiceInfoRequestModel' is not null or undefined
            assertParamExists('putRestaurantServiceInfo', 'iRestaurantServiceInfoRequestModel', iRestaurantServiceInfoRequestModel)
            const localVarPath = `/restaurant-service-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iRestaurantServiceInfoRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RestaurantServiceInfoApi - functional programming interface
 * @export
 */
export const RestaurantServiceInfoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RestaurantServiceInfoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRestaurantServiceInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRestaurantServiceInfo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRestaurantServiceInfo(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IRestaurantServiceInfoListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRestaurantServiceInfo(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IRestaurantServiceInfoRequestModel} iRestaurantServiceInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putRestaurantServiceInfo(iRestaurantServiceInfoRequestModel: IRestaurantServiceInfoRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IRestaurantServiceInfoResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putRestaurantServiceInfo(iRestaurantServiceInfoRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RestaurantServiceInfoApi - factory interface
 * @export
 */
export const RestaurantServiceInfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RestaurantServiceInfoApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRestaurantServiceInfo(options?: any): AxiosPromise<number> {
            return localVarFp.deleteRestaurantServiceInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRestaurantServiceInfo(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: any): AxiosPromise<IRestaurantServiceInfoListResponseModel> {
            return localVarFp.getRestaurantServiceInfo(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IRestaurantServiceInfoRequestModel} iRestaurantServiceInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putRestaurantServiceInfo(iRestaurantServiceInfoRequestModel: IRestaurantServiceInfoRequestModel, options?: any): AxiosPromise<IRestaurantServiceInfoResponseModel> {
            return localVarFp.putRestaurantServiceInfo(iRestaurantServiceInfoRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getRestaurantServiceInfo operation in RestaurantServiceInfoApi.
 * @export
 * @interface RestaurantServiceInfoApiGetRestaurantServiceInfoRequest
 */
export interface RestaurantServiceInfoApiGetRestaurantServiceInfoRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof RestaurantServiceInfoApiGetRestaurantServiceInfo
     */
    readonly sort?: string

    /**
     * Retun page/pageSize (default: true)
     * @type {boolean}
     * @memberof RestaurantServiceInfoApiGetRestaurantServiceInfo
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof RestaurantServiceInfoApiGetRestaurantServiceInfo
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof RestaurantServiceInfoApiGetRestaurantServiceInfo
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof RestaurantServiceInfoApiGetRestaurantServiceInfo
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof RestaurantServiceInfoApiGetRestaurantServiceInfo
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof RestaurantServiceInfoApiGetRestaurantServiceInfo
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof RestaurantServiceInfoApiGetRestaurantServiceInfo
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof RestaurantServiceInfoApiGetRestaurantServiceInfo
     */
    readonly filters?: object
}

/**
 * Request parameters for putRestaurantServiceInfo operation in RestaurantServiceInfoApi.
 * @export
 * @interface RestaurantServiceInfoApiPutRestaurantServiceInfoRequest
 */
export interface RestaurantServiceInfoApiPutRestaurantServiceInfoRequest {
    /**
     * 
     * @type {IRestaurantServiceInfoRequestModel}
     * @memberof RestaurantServiceInfoApiPutRestaurantServiceInfo
     */
    readonly iRestaurantServiceInfoRequestModel: IRestaurantServiceInfoRequestModel
}

/**
 * RestaurantServiceInfoApi - object-oriented interface
 * @export
 * @class RestaurantServiceInfoApi
 * @extends {BaseAPI}
 */
export class RestaurantServiceInfoApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantServiceInfoApi
     */
    public deleteRestaurantServiceInfo(options?: AxiosRequestConfig) {
        return RestaurantServiceInfoApiFp(this.configuration).deleteRestaurantServiceInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RestaurantServiceInfoApiGetRestaurantServiceInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantServiceInfoApi
     */
    public getRestaurantServiceInfo(requestParameters: RestaurantServiceInfoApiGetRestaurantServiceInfoRequest = {}, options?: AxiosRequestConfig) {
        return RestaurantServiceInfoApiFp(this.configuration).getRestaurantServiceInfo(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RestaurantServiceInfoApiPutRestaurantServiceInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RestaurantServiceInfoApi
     */
    public putRestaurantServiceInfo(requestParameters: RestaurantServiceInfoApiPutRestaurantServiceInfoRequest, options?: AxiosRequestConfig) {
        return RestaurantServiceInfoApiFp(this.configuration).putRestaurantServiceInfo(requestParameters.iRestaurantServiceInfoRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ServicesInfoApi - axios parameter creator
 * @export
 */
export const ServicesInfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteServicesInfosId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteServicesInfosId', 'id', id)
            const localVarPath = `/services-infos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServicesInfos: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/services-infos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServicesInfosId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getServicesInfosId', 'id', id)
            const localVarPath = `/services-infos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IServicesInfoRequestModel} iServicesInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postServicesInfos: async (iServicesInfoRequestModel: IServicesInfoRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iServicesInfoRequestModel' is not null or undefined
            assertParamExists('postServicesInfos', 'iServicesInfoRequestModel', iServicesInfoRequestModel)
            const localVarPath = `/services-infos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iServicesInfoRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {IServicesInfoRequestModel} iServicesInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putServicesInfosId: async (id: number, iServicesInfoRequestModel: IServicesInfoRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putServicesInfosId', 'id', id)
            // verify required parameter 'iServicesInfoRequestModel' is not null or undefined
            assertParamExists('putServicesInfosId', 'iServicesInfoRequestModel', iServicesInfoRequestModel)
            const localVarPath = `/services-infos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iServicesInfoRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServicesInfoApi - functional programming interface
 * @export
 */
export const ServicesInfoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ServicesInfoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteServicesInfosId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteServicesInfosId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServicesInfos(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IServicesInfoListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServicesInfos(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServicesInfosId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IServicesInfoResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServicesInfosId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IServicesInfoRequestModel} iServicesInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postServicesInfos(iServicesInfoRequestModel: IServicesInfoRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IServicesInfoResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postServicesInfos(iServicesInfoRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {IServicesInfoRequestModel} iServicesInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putServicesInfosId(id: number, iServicesInfoRequestModel: IServicesInfoRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IServicesInfoResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putServicesInfosId(id, iServicesInfoRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ServicesInfoApi - factory interface
 * @export
 */
export const ServicesInfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ServicesInfoApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteServicesInfosId(id: number, options?: any): AxiosPromise<number> {
            return localVarFp.deleteServicesInfosId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServicesInfos(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: any): AxiosPromise<IServicesInfoListResponseModel> {
            return localVarFp.getServicesInfos(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServicesInfosId(id: number, options?: any): AxiosPromise<IServicesInfoResponseModel> {
            return localVarFp.getServicesInfosId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IServicesInfoRequestModel} iServicesInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postServicesInfos(iServicesInfoRequestModel: IServicesInfoRequestModel, options?: any): AxiosPromise<IServicesInfoResponseModel> {
            return localVarFp.postServicesInfos(iServicesInfoRequestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {IServicesInfoRequestModel} iServicesInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putServicesInfosId(id: number, iServicesInfoRequestModel: IServicesInfoRequestModel, options?: any): AxiosPromise<IServicesInfoResponseModel> {
            return localVarFp.putServicesInfosId(id, iServicesInfoRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteServicesInfosId operation in ServicesInfoApi.
 * @export
 * @interface ServicesInfoApiDeleteServicesInfosIdRequest
 */
export interface ServicesInfoApiDeleteServicesInfosIdRequest {
    /**
     * 
     * @type {number}
     * @memberof ServicesInfoApiDeleteServicesInfosId
     */
    readonly id: number
}

/**
 * Request parameters for getServicesInfos operation in ServicesInfoApi.
 * @export
 * @interface ServicesInfoApiGetServicesInfosRequest
 */
export interface ServicesInfoApiGetServicesInfosRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof ServicesInfoApiGetServicesInfos
     */
    readonly sort?: string

    /**
     * Retun page/pageSize (default: true)
     * @type {boolean}
     * @memberof ServicesInfoApiGetServicesInfos
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof ServicesInfoApiGetServicesInfos
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof ServicesInfoApiGetServicesInfos
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof ServicesInfoApiGetServicesInfos
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof ServicesInfoApiGetServicesInfos
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof ServicesInfoApiGetServicesInfos
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof ServicesInfoApiGetServicesInfos
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof ServicesInfoApiGetServicesInfos
     */
    readonly filters?: object
}

/**
 * Request parameters for getServicesInfosId operation in ServicesInfoApi.
 * @export
 * @interface ServicesInfoApiGetServicesInfosIdRequest
 */
export interface ServicesInfoApiGetServicesInfosIdRequest {
    /**
     * 
     * @type {number}
     * @memberof ServicesInfoApiGetServicesInfosId
     */
    readonly id: number
}

/**
 * Request parameters for postServicesInfos operation in ServicesInfoApi.
 * @export
 * @interface ServicesInfoApiPostServicesInfosRequest
 */
export interface ServicesInfoApiPostServicesInfosRequest {
    /**
     * 
     * @type {IServicesInfoRequestModel}
     * @memberof ServicesInfoApiPostServicesInfos
     */
    readonly iServicesInfoRequestModel: IServicesInfoRequestModel
}

/**
 * Request parameters for putServicesInfosId operation in ServicesInfoApi.
 * @export
 * @interface ServicesInfoApiPutServicesInfosIdRequest
 */
export interface ServicesInfoApiPutServicesInfosIdRequest {
    /**
     * 
     * @type {number}
     * @memberof ServicesInfoApiPutServicesInfosId
     */
    readonly id: number

    /**
     * 
     * @type {IServicesInfoRequestModel}
     * @memberof ServicesInfoApiPutServicesInfosId
     */
    readonly iServicesInfoRequestModel: IServicesInfoRequestModel
}

/**
 * ServicesInfoApi - object-oriented interface
 * @export
 * @class ServicesInfoApi
 * @extends {BaseAPI}
 */
export class ServicesInfoApi extends BaseAPI {
    /**
     * 
     * @param {ServicesInfoApiDeleteServicesInfosIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesInfoApi
     */
    public deleteServicesInfosId(requestParameters: ServicesInfoApiDeleteServicesInfosIdRequest, options?: AxiosRequestConfig) {
        return ServicesInfoApiFp(this.configuration).deleteServicesInfosId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ServicesInfoApiGetServicesInfosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesInfoApi
     */
    public getServicesInfos(requestParameters: ServicesInfoApiGetServicesInfosRequest = {}, options?: AxiosRequestConfig) {
        return ServicesInfoApiFp(this.configuration).getServicesInfos(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ServicesInfoApiGetServicesInfosIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesInfoApi
     */
    public getServicesInfosId(requestParameters: ServicesInfoApiGetServicesInfosIdRequest, options?: AxiosRequestConfig) {
        return ServicesInfoApiFp(this.configuration).getServicesInfosId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ServicesInfoApiPostServicesInfosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesInfoApi
     */
    public postServicesInfos(requestParameters: ServicesInfoApiPostServicesInfosRequest, options?: AxiosRequestConfig) {
        return ServicesInfoApiFp(this.configuration).postServicesInfos(requestParameters.iServicesInfoRequestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ServicesInfoApiPutServicesInfosIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesInfoApi
     */
    public putServicesInfosId(requestParameters: ServicesInfoApiPutServicesInfosIdRequest, options?: AxiosRequestConfig) {
        return ServicesInfoApiFp(this.configuration).putServicesInfosId(requestParameters.id, requestParameters.iServicesInfoRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ShoppingServiceApi - axios parameter creator
 * @export
 */
export const ShoppingServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShoppingServicesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteShoppingServicesId', 'id', id)
            const localVarPath = `/shopping-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShoppingServices: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/shopping-services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShoppingServicesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getShoppingServicesId', 'id', id)
            const localVarPath = `/shopping-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IShoppingServiceRequestModel} iShoppingServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postShoppingServices: async (iShoppingServiceRequestModel: IShoppingServiceRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iShoppingServiceRequestModel' is not null or undefined
            assertParamExists('postShoppingServices', 'iShoppingServiceRequestModel', iShoppingServiceRequestModel)
            const localVarPath = `/shopping-services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iShoppingServiceRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {IShoppingServiceRequestModel} iShoppingServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putShoppingServicesId: async (id: number, iShoppingServiceRequestModel: IShoppingServiceRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putShoppingServicesId', 'id', id)
            // verify required parameter 'iShoppingServiceRequestModel' is not null or undefined
            assertParamExists('putShoppingServicesId', 'iShoppingServiceRequestModel', iShoppingServiceRequestModel)
            const localVarPath = `/shopping-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iShoppingServiceRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShoppingServiceApi - functional programming interface
 * @export
 */
export const ShoppingServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShoppingServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteShoppingServicesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteShoppingServicesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShoppingServices(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IShoppingServiceListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShoppingServices(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShoppingServicesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IShoppingServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShoppingServicesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IShoppingServiceRequestModel} iShoppingServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postShoppingServices(iShoppingServiceRequestModel: IShoppingServiceRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IShoppingServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postShoppingServices(iShoppingServiceRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {IShoppingServiceRequestModel} iShoppingServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putShoppingServicesId(id: number, iShoppingServiceRequestModel: IShoppingServiceRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IShoppingServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putShoppingServicesId(id, iShoppingServiceRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShoppingServiceApi - factory interface
 * @export
 */
export const ShoppingServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShoppingServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShoppingServicesId(id: number, options?: any): AxiosPromise<number> {
            return localVarFp.deleteShoppingServicesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShoppingServices(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: any): AxiosPromise<IShoppingServiceListResponseModel> {
            return localVarFp.getShoppingServices(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShoppingServicesId(id: number, options?: any): AxiosPromise<IShoppingServiceResponseModel> {
            return localVarFp.getShoppingServicesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IShoppingServiceRequestModel} iShoppingServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postShoppingServices(iShoppingServiceRequestModel: IShoppingServiceRequestModel, options?: any): AxiosPromise<IShoppingServiceResponseModel> {
            return localVarFp.postShoppingServices(iShoppingServiceRequestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {IShoppingServiceRequestModel} iShoppingServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putShoppingServicesId(id: number, iShoppingServiceRequestModel: IShoppingServiceRequestModel, options?: any): AxiosPromise<IShoppingServiceResponseModel> {
            return localVarFp.putShoppingServicesId(id, iShoppingServiceRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteShoppingServicesId operation in ShoppingServiceApi.
 * @export
 * @interface ShoppingServiceApiDeleteShoppingServicesIdRequest
 */
export interface ShoppingServiceApiDeleteShoppingServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof ShoppingServiceApiDeleteShoppingServicesId
     */
    readonly id: number
}

/**
 * Request parameters for getShoppingServices operation in ShoppingServiceApi.
 * @export
 * @interface ShoppingServiceApiGetShoppingServicesRequest
 */
export interface ShoppingServiceApiGetShoppingServicesRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof ShoppingServiceApiGetShoppingServices
     */
    readonly sort?: string

    /**
     * Retun page/pageSize (default: true)
     * @type {boolean}
     * @memberof ShoppingServiceApiGetShoppingServices
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof ShoppingServiceApiGetShoppingServices
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof ShoppingServiceApiGetShoppingServices
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof ShoppingServiceApiGetShoppingServices
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof ShoppingServiceApiGetShoppingServices
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof ShoppingServiceApiGetShoppingServices
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof ShoppingServiceApiGetShoppingServices
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof ShoppingServiceApiGetShoppingServices
     */
    readonly filters?: object
}

/**
 * Request parameters for getShoppingServicesId operation in ShoppingServiceApi.
 * @export
 * @interface ShoppingServiceApiGetShoppingServicesIdRequest
 */
export interface ShoppingServiceApiGetShoppingServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof ShoppingServiceApiGetShoppingServicesId
     */
    readonly id: number
}

/**
 * Request parameters for postShoppingServices operation in ShoppingServiceApi.
 * @export
 * @interface ShoppingServiceApiPostShoppingServicesRequest
 */
export interface ShoppingServiceApiPostShoppingServicesRequest {
    /**
     * 
     * @type {IShoppingServiceRequestModel}
     * @memberof ShoppingServiceApiPostShoppingServices
     */
    readonly iShoppingServiceRequestModel: IShoppingServiceRequestModel
}

/**
 * Request parameters for putShoppingServicesId operation in ShoppingServiceApi.
 * @export
 * @interface ShoppingServiceApiPutShoppingServicesIdRequest
 */
export interface ShoppingServiceApiPutShoppingServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof ShoppingServiceApiPutShoppingServicesId
     */
    readonly id: number

    /**
     * 
     * @type {IShoppingServiceRequestModel}
     * @memberof ShoppingServiceApiPutShoppingServicesId
     */
    readonly iShoppingServiceRequestModel: IShoppingServiceRequestModel
}

/**
 * ShoppingServiceApi - object-oriented interface
 * @export
 * @class ShoppingServiceApi
 * @extends {BaseAPI}
 */
export class ShoppingServiceApi extends BaseAPI {
    /**
     * 
     * @param {ShoppingServiceApiDeleteShoppingServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingServiceApi
     */
    public deleteShoppingServicesId(requestParameters: ShoppingServiceApiDeleteShoppingServicesIdRequest, options?: AxiosRequestConfig) {
        return ShoppingServiceApiFp(this.configuration).deleteShoppingServicesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ShoppingServiceApiGetShoppingServicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingServiceApi
     */
    public getShoppingServices(requestParameters: ShoppingServiceApiGetShoppingServicesRequest = {}, options?: AxiosRequestConfig) {
        return ShoppingServiceApiFp(this.configuration).getShoppingServices(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ShoppingServiceApiGetShoppingServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingServiceApi
     */
    public getShoppingServicesId(requestParameters: ShoppingServiceApiGetShoppingServicesIdRequest, options?: AxiosRequestConfig) {
        return ShoppingServiceApiFp(this.configuration).getShoppingServicesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ShoppingServiceApiPostShoppingServicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingServiceApi
     */
    public postShoppingServices(requestParameters: ShoppingServiceApiPostShoppingServicesRequest, options?: AxiosRequestConfig) {
        return ShoppingServiceApiFp(this.configuration).postShoppingServices(requestParameters.iShoppingServiceRequestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ShoppingServiceApiPutShoppingServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingServiceApi
     */
    public putShoppingServicesId(requestParameters: ShoppingServiceApiPutShoppingServicesIdRequest, options?: AxiosRequestConfig) {
        return ShoppingServiceApiFp(this.configuration).putShoppingServicesId(requestParameters.id, requestParameters.iShoppingServiceRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ShoppingServiceInfoApi - axios parameter creator
 * @export
 */
export const ShoppingServiceInfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShoppingServiceInfo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/shopping-service-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShoppingServiceInfo: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/shopping-service-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IShoppingServiceInfoRequestModel} iShoppingServiceInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putShoppingServiceInfo: async (iShoppingServiceInfoRequestModel: IShoppingServiceInfoRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iShoppingServiceInfoRequestModel' is not null or undefined
            assertParamExists('putShoppingServiceInfo', 'iShoppingServiceInfoRequestModel', iShoppingServiceInfoRequestModel)
            const localVarPath = `/shopping-service-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iShoppingServiceInfoRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShoppingServiceInfoApi - functional programming interface
 * @export
 */
export const ShoppingServiceInfoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShoppingServiceInfoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteShoppingServiceInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteShoppingServiceInfo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShoppingServiceInfo(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IShoppingServiceInfoListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShoppingServiceInfo(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IShoppingServiceInfoRequestModel} iShoppingServiceInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putShoppingServiceInfo(iShoppingServiceInfoRequestModel: IShoppingServiceInfoRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IShoppingServiceInfoResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putShoppingServiceInfo(iShoppingServiceInfoRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShoppingServiceInfoApi - factory interface
 * @export
 */
export const ShoppingServiceInfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShoppingServiceInfoApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteShoppingServiceInfo(options?: any): AxiosPromise<number> {
            return localVarFp.deleteShoppingServiceInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShoppingServiceInfo(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: any): AxiosPromise<IShoppingServiceInfoListResponseModel> {
            return localVarFp.getShoppingServiceInfo(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IShoppingServiceInfoRequestModel} iShoppingServiceInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putShoppingServiceInfo(iShoppingServiceInfoRequestModel: IShoppingServiceInfoRequestModel, options?: any): AxiosPromise<IShoppingServiceInfoResponseModel> {
            return localVarFp.putShoppingServiceInfo(iShoppingServiceInfoRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getShoppingServiceInfo operation in ShoppingServiceInfoApi.
 * @export
 * @interface ShoppingServiceInfoApiGetShoppingServiceInfoRequest
 */
export interface ShoppingServiceInfoApiGetShoppingServiceInfoRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof ShoppingServiceInfoApiGetShoppingServiceInfo
     */
    readonly sort?: string

    /**
     * Retun page/pageSize (default: true)
     * @type {boolean}
     * @memberof ShoppingServiceInfoApiGetShoppingServiceInfo
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof ShoppingServiceInfoApiGetShoppingServiceInfo
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof ShoppingServiceInfoApiGetShoppingServiceInfo
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof ShoppingServiceInfoApiGetShoppingServiceInfo
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof ShoppingServiceInfoApiGetShoppingServiceInfo
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof ShoppingServiceInfoApiGetShoppingServiceInfo
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof ShoppingServiceInfoApiGetShoppingServiceInfo
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof ShoppingServiceInfoApiGetShoppingServiceInfo
     */
    readonly filters?: object
}

/**
 * Request parameters for putShoppingServiceInfo operation in ShoppingServiceInfoApi.
 * @export
 * @interface ShoppingServiceInfoApiPutShoppingServiceInfoRequest
 */
export interface ShoppingServiceInfoApiPutShoppingServiceInfoRequest {
    /**
     * 
     * @type {IShoppingServiceInfoRequestModel}
     * @memberof ShoppingServiceInfoApiPutShoppingServiceInfo
     */
    readonly iShoppingServiceInfoRequestModel: IShoppingServiceInfoRequestModel
}

/**
 * ShoppingServiceInfoApi - object-oriented interface
 * @export
 * @class ShoppingServiceInfoApi
 * @extends {BaseAPI}
 */
export class ShoppingServiceInfoApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingServiceInfoApi
     */
    public deleteShoppingServiceInfo(options?: AxiosRequestConfig) {
        return ShoppingServiceInfoApiFp(this.configuration).deleteShoppingServiceInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ShoppingServiceInfoApiGetShoppingServiceInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingServiceInfoApi
     */
    public getShoppingServiceInfo(requestParameters: ShoppingServiceInfoApiGetShoppingServiceInfoRequest = {}, options?: AxiosRequestConfig) {
        return ShoppingServiceInfoApiFp(this.configuration).getShoppingServiceInfo(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ShoppingServiceInfoApiPutShoppingServiceInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShoppingServiceInfoApi
     */
    public putShoppingServiceInfo(requestParameters: ShoppingServiceInfoApiPutShoppingServiceInfoRequest, options?: AxiosRequestConfig) {
        return ShoppingServiceInfoApiFp(this.configuration).putShoppingServiceInfo(requestParameters.iShoppingServiceInfoRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SouvenirApi - axios parameter creator
 * @export
 */
export const SouvenirApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSouvenirsId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteSouvenirsId', 'id', id)
            const localVarPath = `/souvenirs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSouvenirs: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/souvenirs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSouvenirsId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSouvenirsId', 'id', id)
            const localVarPath = `/souvenirs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ISouvenirRequestModel} iSouvenirRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSouvenirs: async (iSouvenirRequestModel: ISouvenirRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iSouvenirRequestModel' is not null or undefined
            assertParamExists('postSouvenirs', 'iSouvenirRequestModel', iSouvenirRequestModel)
            const localVarPath = `/souvenirs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iSouvenirRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ISouvenirRequestModel} iSouvenirRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSouvenirsId: async (id: number, iSouvenirRequestModel: ISouvenirRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putSouvenirsId', 'id', id)
            // verify required parameter 'iSouvenirRequestModel' is not null or undefined
            assertParamExists('putSouvenirsId', 'iSouvenirRequestModel', iSouvenirRequestModel)
            const localVarPath = `/souvenirs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iSouvenirRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SouvenirApi - functional programming interface
 * @export
 */
export const SouvenirApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SouvenirApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSouvenirsId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSouvenirsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSouvenirs(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ISouvenirListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSouvenirs(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSouvenirsId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ISouvenirResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSouvenirsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ISouvenirRequestModel} iSouvenirRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSouvenirs(iSouvenirRequestModel: ISouvenirRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ISouvenirResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postSouvenirs(iSouvenirRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ISouvenirRequestModel} iSouvenirRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putSouvenirsId(id: number, iSouvenirRequestModel: ISouvenirRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ISouvenirResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putSouvenirsId(id, iSouvenirRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SouvenirApi - factory interface
 * @export
 */
export const SouvenirApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SouvenirApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSouvenirsId(id: number, options?: any): AxiosPromise<number> {
            return localVarFp.deleteSouvenirsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSouvenirs(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: any): AxiosPromise<ISouvenirListResponseModel> {
            return localVarFp.getSouvenirs(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSouvenirsId(id: number, options?: any): AxiosPromise<ISouvenirResponseModel> {
            return localVarFp.getSouvenirsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ISouvenirRequestModel} iSouvenirRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSouvenirs(iSouvenirRequestModel: ISouvenirRequestModel, options?: any): AxiosPromise<ISouvenirResponseModel> {
            return localVarFp.postSouvenirs(iSouvenirRequestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ISouvenirRequestModel} iSouvenirRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putSouvenirsId(id: number, iSouvenirRequestModel: ISouvenirRequestModel, options?: any): AxiosPromise<ISouvenirResponseModel> {
            return localVarFp.putSouvenirsId(id, iSouvenirRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteSouvenirsId operation in SouvenirApi.
 * @export
 * @interface SouvenirApiDeleteSouvenirsIdRequest
 */
export interface SouvenirApiDeleteSouvenirsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof SouvenirApiDeleteSouvenirsId
     */
    readonly id: number
}

/**
 * Request parameters for getSouvenirs operation in SouvenirApi.
 * @export
 * @interface SouvenirApiGetSouvenirsRequest
 */
export interface SouvenirApiGetSouvenirsRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof SouvenirApiGetSouvenirs
     */
    readonly sort?: string

    /**
     * Retun page/pageSize (default: true)
     * @type {boolean}
     * @memberof SouvenirApiGetSouvenirs
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof SouvenirApiGetSouvenirs
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof SouvenirApiGetSouvenirs
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof SouvenirApiGetSouvenirs
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof SouvenirApiGetSouvenirs
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof SouvenirApiGetSouvenirs
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof SouvenirApiGetSouvenirs
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof SouvenirApiGetSouvenirs
     */
    readonly filters?: object
}

/**
 * Request parameters for getSouvenirsId operation in SouvenirApi.
 * @export
 * @interface SouvenirApiGetSouvenirsIdRequest
 */
export interface SouvenirApiGetSouvenirsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof SouvenirApiGetSouvenirsId
     */
    readonly id: number
}

/**
 * Request parameters for postSouvenirs operation in SouvenirApi.
 * @export
 * @interface SouvenirApiPostSouvenirsRequest
 */
export interface SouvenirApiPostSouvenirsRequest {
    /**
     * 
     * @type {ISouvenirRequestModel}
     * @memberof SouvenirApiPostSouvenirs
     */
    readonly iSouvenirRequestModel: ISouvenirRequestModel
}

/**
 * Request parameters for putSouvenirsId operation in SouvenirApi.
 * @export
 * @interface SouvenirApiPutSouvenirsIdRequest
 */
export interface SouvenirApiPutSouvenirsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof SouvenirApiPutSouvenirsId
     */
    readonly id: number

    /**
     * 
     * @type {ISouvenirRequestModel}
     * @memberof SouvenirApiPutSouvenirsId
     */
    readonly iSouvenirRequestModel: ISouvenirRequestModel
}

/**
 * SouvenirApi - object-oriented interface
 * @export
 * @class SouvenirApi
 * @extends {BaseAPI}
 */
export class SouvenirApi extends BaseAPI {
    /**
     * 
     * @param {SouvenirApiDeleteSouvenirsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SouvenirApi
     */
    public deleteSouvenirsId(requestParameters: SouvenirApiDeleteSouvenirsIdRequest, options?: AxiosRequestConfig) {
        return SouvenirApiFp(this.configuration).deleteSouvenirsId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SouvenirApiGetSouvenirsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SouvenirApi
     */
    public getSouvenirs(requestParameters: SouvenirApiGetSouvenirsRequest = {}, options?: AxiosRequestConfig) {
        return SouvenirApiFp(this.configuration).getSouvenirs(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SouvenirApiGetSouvenirsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SouvenirApi
     */
    public getSouvenirsId(requestParameters: SouvenirApiGetSouvenirsIdRequest, options?: AxiosRequestConfig) {
        return SouvenirApiFp(this.configuration).getSouvenirsId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SouvenirApiPostSouvenirsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SouvenirApi
     */
    public postSouvenirs(requestParameters: SouvenirApiPostSouvenirsRequest, options?: AxiosRequestConfig) {
        return SouvenirApiFp(this.configuration).postSouvenirs(requestParameters.iSouvenirRequestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SouvenirApiPutSouvenirsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SouvenirApi
     */
    public putSouvenirsId(requestParameters: SouvenirApiPutSouvenirsIdRequest, options?: AxiosRequestConfig) {
        return SouvenirApiFp(this.configuration).putSouvenirsId(requestParameters.id, requestParameters.iSouvenirRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TourApi - axios parameter creator
 * @export
 */
export const TourApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteToursId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteToursId', 'id', id)
            const localVarPath = `/tours/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTours: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tours`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getToursId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getToursId', 'id', id)
            const localVarPath = `/tours/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ITourRequestModel} iTourRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTours: async (iTourRequestModel: ITourRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iTourRequestModel' is not null or undefined
            assertParamExists('postTours', 'iTourRequestModel', iTourRequestModel)
            const localVarPath = `/tours`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iTourRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ITourRequestModel} iTourRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putToursId: async (id: number, iTourRequestModel: ITourRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putToursId', 'id', id)
            // verify required parameter 'iTourRequestModel' is not null or undefined
            assertParamExists('putToursId', 'iTourRequestModel', iTourRequestModel)
            const localVarPath = `/tours/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iTourRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TourApi - functional programming interface
 * @export
 */
export const TourApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TourApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteToursId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteToursId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTours(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ITourListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTours(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getToursId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ITourResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getToursId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ITourRequestModel} iTourRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTours(iTourRequestModel: ITourRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ITourResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTours(iTourRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ITourRequestModel} iTourRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putToursId(id: number, iTourRequestModel: ITourRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ITourResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putToursId(id, iTourRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TourApi - factory interface
 * @export
 */
export const TourApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TourApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteToursId(id: number, options?: any): AxiosPromise<number> {
            return localVarFp.deleteToursId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTours(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: any): AxiosPromise<ITourListResponseModel> {
            return localVarFp.getTours(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getToursId(id: number, options?: any): AxiosPromise<ITourResponseModel> {
            return localVarFp.getToursId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ITourRequestModel} iTourRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTours(iTourRequestModel: ITourRequestModel, options?: any): AxiosPromise<ITourResponseModel> {
            return localVarFp.postTours(iTourRequestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ITourRequestModel} iTourRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putToursId(id: number, iTourRequestModel: ITourRequestModel, options?: any): AxiosPromise<ITourResponseModel> {
            return localVarFp.putToursId(id, iTourRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteToursId operation in TourApi.
 * @export
 * @interface TourApiDeleteToursIdRequest
 */
export interface TourApiDeleteToursIdRequest {
    /**
     * 
     * @type {number}
     * @memberof TourApiDeleteToursId
     */
    readonly id: number
}

/**
 * Request parameters for getTours operation in TourApi.
 * @export
 * @interface TourApiGetToursRequest
 */
export interface TourApiGetToursRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof TourApiGetTours
     */
    readonly sort?: string

    /**
     * Retun page/pageSize (default: true)
     * @type {boolean}
     * @memberof TourApiGetTours
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof TourApiGetTours
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof TourApiGetTours
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof TourApiGetTours
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof TourApiGetTours
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof TourApiGetTours
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof TourApiGetTours
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof TourApiGetTours
     */
    readonly filters?: object
}

/**
 * Request parameters for getToursId operation in TourApi.
 * @export
 * @interface TourApiGetToursIdRequest
 */
export interface TourApiGetToursIdRequest {
    /**
     * 
     * @type {number}
     * @memberof TourApiGetToursId
     */
    readonly id: number
}

/**
 * Request parameters for postTours operation in TourApi.
 * @export
 * @interface TourApiPostToursRequest
 */
export interface TourApiPostToursRequest {
    /**
     * 
     * @type {ITourRequestModel}
     * @memberof TourApiPostTours
     */
    readonly iTourRequestModel: ITourRequestModel
}

/**
 * Request parameters for putToursId operation in TourApi.
 * @export
 * @interface TourApiPutToursIdRequest
 */
export interface TourApiPutToursIdRequest {
    /**
     * 
     * @type {number}
     * @memberof TourApiPutToursId
     */
    readonly id: number

    /**
     * 
     * @type {ITourRequestModel}
     * @memberof TourApiPutToursId
     */
    readonly iTourRequestModel: ITourRequestModel
}

/**
 * TourApi - object-oriented interface
 * @export
 * @class TourApi
 * @extends {BaseAPI}
 */
export class TourApi extends BaseAPI {
    /**
     * 
     * @param {TourApiDeleteToursIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourApi
     */
    public deleteToursId(requestParameters: TourApiDeleteToursIdRequest, options?: AxiosRequestConfig) {
        return TourApiFp(this.configuration).deleteToursId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TourApiGetToursRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourApi
     */
    public getTours(requestParameters: TourApiGetToursRequest = {}, options?: AxiosRequestConfig) {
        return TourApiFp(this.configuration).getTours(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TourApiGetToursIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourApi
     */
    public getToursId(requestParameters: TourApiGetToursIdRequest, options?: AxiosRequestConfig) {
        return TourApiFp(this.configuration).getToursId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TourApiPostToursRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourApi
     */
    public postTours(requestParameters: TourApiPostToursRequest, options?: AxiosRequestConfig) {
        return TourApiFp(this.configuration).postTours(requestParameters.iTourRequestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TourApiPutToursIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourApi
     */
    public putToursId(requestParameters: TourApiPutToursIdRequest, options?: AxiosRequestConfig) {
        return TourApiFp(this.configuration).putToursId(requestParameters.id, requestParameters.iTourRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TourGuideServiceApi - axios parameter creator
 * @export
 */
export const TourGuideServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTourGuideServicesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTourGuideServicesId', 'id', id)
            const localVarPath = `/tour-guide-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTourGuideServices: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tour-guide-services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTourGuideServicesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTourGuideServicesId', 'id', id)
            const localVarPath = `/tour-guide-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ITourGuideServiceRequestModel} iTourGuideServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTourGuideServices: async (iTourGuideServiceRequestModel: ITourGuideServiceRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iTourGuideServiceRequestModel' is not null or undefined
            assertParamExists('postTourGuideServices', 'iTourGuideServiceRequestModel', iTourGuideServiceRequestModel)
            const localVarPath = `/tour-guide-services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iTourGuideServiceRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ITourGuideServiceRequestModel} iTourGuideServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTourGuideServicesId: async (id: number, iTourGuideServiceRequestModel: ITourGuideServiceRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putTourGuideServicesId', 'id', id)
            // verify required parameter 'iTourGuideServiceRequestModel' is not null or undefined
            assertParamExists('putTourGuideServicesId', 'iTourGuideServiceRequestModel', iTourGuideServiceRequestModel)
            const localVarPath = `/tour-guide-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iTourGuideServiceRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TourGuideServiceApi - functional programming interface
 * @export
 */
export const TourGuideServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TourGuideServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTourGuideServicesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTourGuideServicesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTourGuideServices(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ITourGuideServiceListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTourGuideServices(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTourGuideServicesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ITourGuideServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTourGuideServicesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ITourGuideServiceRequestModel} iTourGuideServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTourGuideServices(iTourGuideServiceRequestModel: ITourGuideServiceRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ITourGuideServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTourGuideServices(iTourGuideServiceRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ITourGuideServiceRequestModel} iTourGuideServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTourGuideServicesId(id: number, iTourGuideServiceRequestModel: ITourGuideServiceRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ITourGuideServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putTourGuideServicesId(id, iTourGuideServiceRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TourGuideServiceApi - factory interface
 * @export
 */
export const TourGuideServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TourGuideServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTourGuideServicesId(id: number, options?: any): AxiosPromise<number> {
            return localVarFp.deleteTourGuideServicesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTourGuideServices(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: any): AxiosPromise<ITourGuideServiceListResponseModel> {
            return localVarFp.getTourGuideServices(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTourGuideServicesId(id: number, options?: any): AxiosPromise<ITourGuideServiceResponseModel> {
            return localVarFp.getTourGuideServicesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ITourGuideServiceRequestModel} iTourGuideServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTourGuideServices(iTourGuideServiceRequestModel: ITourGuideServiceRequestModel, options?: any): AxiosPromise<ITourGuideServiceResponseModel> {
            return localVarFp.postTourGuideServices(iTourGuideServiceRequestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ITourGuideServiceRequestModel} iTourGuideServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTourGuideServicesId(id: number, iTourGuideServiceRequestModel: ITourGuideServiceRequestModel, options?: any): AxiosPromise<ITourGuideServiceResponseModel> {
            return localVarFp.putTourGuideServicesId(id, iTourGuideServiceRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteTourGuideServicesId operation in TourGuideServiceApi.
 * @export
 * @interface TourGuideServiceApiDeleteTourGuideServicesIdRequest
 */
export interface TourGuideServiceApiDeleteTourGuideServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof TourGuideServiceApiDeleteTourGuideServicesId
     */
    readonly id: number
}

/**
 * Request parameters for getTourGuideServices operation in TourGuideServiceApi.
 * @export
 * @interface TourGuideServiceApiGetTourGuideServicesRequest
 */
export interface TourGuideServiceApiGetTourGuideServicesRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof TourGuideServiceApiGetTourGuideServices
     */
    readonly sort?: string

    /**
     * Retun page/pageSize (default: true)
     * @type {boolean}
     * @memberof TourGuideServiceApiGetTourGuideServices
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof TourGuideServiceApiGetTourGuideServices
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof TourGuideServiceApiGetTourGuideServices
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof TourGuideServiceApiGetTourGuideServices
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof TourGuideServiceApiGetTourGuideServices
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof TourGuideServiceApiGetTourGuideServices
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof TourGuideServiceApiGetTourGuideServices
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof TourGuideServiceApiGetTourGuideServices
     */
    readonly filters?: object
}

/**
 * Request parameters for getTourGuideServicesId operation in TourGuideServiceApi.
 * @export
 * @interface TourGuideServiceApiGetTourGuideServicesIdRequest
 */
export interface TourGuideServiceApiGetTourGuideServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof TourGuideServiceApiGetTourGuideServicesId
     */
    readonly id: number
}

/**
 * Request parameters for postTourGuideServices operation in TourGuideServiceApi.
 * @export
 * @interface TourGuideServiceApiPostTourGuideServicesRequest
 */
export interface TourGuideServiceApiPostTourGuideServicesRequest {
    /**
     * 
     * @type {ITourGuideServiceRequestModel}
     * @memberof TourGuideServiceApiPostTourGuideServices
     */
    readonly iTourGuideServiceRequestModel: ITourGuideServiceRequestModel
}

/**
 * Request parameters for putTourGuideServicesId operation in TourGuideServiceApi.
 * @export
 * @interface TourGuideServiceApiPutTourGuideServicesIdRequest
 */
export interface TourGuideServiceApiPutTourGuideServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof TourGuideServiceApiPutTourGuideServicesId
     */
    readonly id: number

    /**
     * 
     * @type {ITourGuideServiceRequestModel}
     * @memberof TourGuideServiceApiPutTourGuideServicesId
     */
    readonly iTourGuideServiceRequestModel: ITourGuideServiceRequestModel
}

/**
 * TourGuideServiceApi - object-oriented interface
 * @export
 * @class TourGuideServiceApi
 * @extends {BaseAPI}
 */
export class TourGuideServiceApi extends BaseAPI {
    /**
     * 
     * @param {TourGuideServiceApiDeleteTourGuideServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourGuideServiceApi
     */
    public deleteTourGuideServicesId(requestParameters: TourGuideServiceApiDeleteTourGuideServicesIdRequest, options?: AxiosRequestConfig) {
        return TourGuideServiceApiFp(this.configuration).deleteTourGuideServicesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TourGuideServiceApiGetTourGuideServicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourGuideServiceApi
     */
    public getTourGuideServices(requestParameters: TourGuideServiceApiGetTourGuideServicesRequest = {}, options?: AxiosRequestConfig) {
        return TourGuideServiceApiFp(this.configuration).getTourGuideServices(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TourGuideServiceApiGetTourGuideServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourGuideServiceApi
     */
    public getTourGuideServicesId(requestParameters: TourGuideServiceApiGetTourGuideServicesIdRequest, options?: AxiosRequestConfig) {
        return TourGuideServiceApiFp(this.configuration).getTourGuideServicesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TourGuideServiceApiPostTourGuideServicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourGuideServiceApi
     */
    public postTourGuideServices(requestParameters: TourGuideServiceApiPostTourGuideServicesRequest, options?: AxiosRequestConfig) {
        return TourGuideServiceApiFp(this.configuration).postTourGuideServices(requestParameters.iTourGuideServiceRequestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TourGuideServiceApiPutTourGuideServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourGuideServiceApi
     */
    public putTourGuideServicesId(requestParameters: TourGuideServiceApiPutTourGuideServicesIdRequest, options?: AxiosRequestConfig) {
        return TourGuideServiceApiFp(this.configuration).putTourGuideServicesId(requestParameters.id, requestParameters.iTourGuideServiceRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TourGuideServiceInfoApi - axios parameter creator
 * @export
 */
export const TourGuideServiceInfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTourGuideServiceInfo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tour-guide-service-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTourGuideServiceInfo: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tour-guide-service-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ITourGuideServiceInfoRequestModel} iTourGuideServiceInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTourGuideServiceInfo: async (iTourGuideServiceInfoRequestModel: ITourGuideServiceInfoRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iTourGuideServiceInfoRequestModel' is not null or undefined
            assertParamExists('putTourGuideServiceInfo', 'iTourGuideServiceInfoRequestModel', iTourGuideServiceInfoRequestModel)
            const localVarPath = `/tour-guide-service-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iTourGuideServiceInfoRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TourGuideServiceInfoApi - functional programming interface
 * @export
 */
export const TourGuideServiceInfoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TourGuideServiceInfoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTourGuideServiceInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTourGuideServiceInfo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTourGuideServiceInfo(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ITourGuideServiceInfoListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTourGuideServiceInfo(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ITourGuideServiceInfoRequestModel} iTourGuideServiceInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTourGuideServiceInfo(iTourGuideServiceInfoRequestModel: ITourGuideServiceInfoRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ITourGuideServiceInfoResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putTourGuideServiceInfo(iTourGuideServiceInfoRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TourGuideServiceInfoApi - factory interface
 * @export
 */
export const TourGuideServiceInfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TourGuideServiceInfoApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTourGuideServiceInfo(options?: any): AxiosPromise<number> {
            return localVarFp.deleteTourGuideServiceInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTourGuideServiceInfo(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: any): AxiosPromise<ITourGuideServiceInfoListResponseModel> {
            return localVarFp.getTourGuideServiceInfo(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ITourGuideServiceInfoRequestModel} iTourGuideServiceInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTourGuideServiceInfo(iTourGuideServiceInfoRequestModel: ITourGuideServiceInfoRequestModel, options?: any): AxiosPromise<ITourGuideServiceInfoResponseModel> {
            return localVarFp.putTourGuideServiceInfo(iTourGuideServiceInfoRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getTourGuideServiceInfo operation in TourGuideServiceInfoApi.
 * @export
 * @interface TourGuideServiceInfoApiGetTourGuideServiceInfoRequest
 */
export interface TourGuideServiceInfoApiGetTourGuideServiceInfoRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof TourGuideServiceInfoApiGetTourGuideServiceInfo
     */
    readonly sort?: string

    /**
     * Retun page/pageSize (default: true)
     * @type {boolean}
     * @memberof TourGuideServiceInfoApiGetTourGuideServiceInfo
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof TourGuideServiceInfoApiGetTourGuideServiceInfo
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof TourGuideServiceInfoApiGetTourGuideServiceInfo
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof TourGuideServiceInfoApiGetTourGuideServiceInfo
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof TourGuideServiceInfoApiGetTourGuideServiceInfo
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof TourGuideServiceInfoApiGetTourGuideServiceInfo
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof TourGuideServiceInfoApiGetTourGuideServiceInfo
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof TourGuideServiceInfoApiGetTourGuideServiceInfo
     */
    readonly filters?: object
}

/**
 * Request parameters for putTourGuideServiceInfo operation in TourGuideServiceInfoApi.
 * @export
 * @interface TourGuideServiceInfoApiPutTourGuideServiceInfoRequest
 */
export interface TourGuideServiceInfoApiPutTourGuideServiceInfoRequest {
    /**
     * 
     * @type {ITourGuideServiceInfoRequestModel}
     * @memberof TourGuideServiceInfoApiPutTourGuideServiceInfo
     */
    readonly iTourGuideServiceInfoRequestModel: ITourGuideServiceInfoRequestModel
}

/**
 * TourGuideServiceInfoApi - object-oriented interface
 * @export
 * @class TourGuideServiceInfoApi
 * @extends {BaseAPI}
 */
export class TourGuideServiceInfoApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourGuideServiceInfoApi
     */
    public deleteTourGuideServiceInfo(options?: AxiosRequestConfig) {
        return TourGuideServiceInfoApiFp(this.configuration).deleteTourGuideServiceInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TourGuideServiceInfoApiGetTourGuideServiceInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourGuideServiceInfoApi
     */
    public getTourGuideServiceInfo(requestParameters: TourGuideServiceInfoApiGetTourGuideServiceInfoRequest = {}, options?: AxiosRequestConfig) {
        return TourGuideServiceInfoApiFp(this.configuration).getTourGuideServiceInfo(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TourGuideServiceInfoApiPutTourGuideServiceInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourGuideServiceInfoApi
     */
    public putTourGuideServiceInfo(requestParameters: TourGuideServiceInfoApiPutTourGuideServiceInfoRequest, options?: AxiosRequestConfig) {
        return TourGuideServiceInfoApiFp(this.configuration).putTourGuideServiceInfo(requestParameters.iTourGuideServiceInfoRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TourInfoApi - axios parameter creator
 * @export
 */
export const TourInfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTourInfo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tour-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTourInfo: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tour-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ITourInfoRequestModel} iTourInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTourInfo: async (iTourInfoRequestModel: ITourInfoRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iTourInfoRequestModel' is not null or undefined
            assertParamExists('putTourInfo', 'iTourInfoRequestModel', iTourInfoRequestModel)
            const localVarPath = `/tour-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iTourInfoRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TourInfoApi - functional programming interface
 * @export
 */
export const TourInfoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TourInfoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTourInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTourInfo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTourInfo(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ITourInfoListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTourInfo(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ITourInfoRequestModel} iTourInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTourInfo(iTourInfoRequestModel: ITourInfoRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ITourInfoResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putTourInfo(iTourInfoRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TourInfoApi - factory interface
 * @export
 */
export const TourInfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TourInfoApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTourInfo(options?: any): AxiosPromise<number> {
            return localVarFp.deleteTourInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTourInfo(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: any): AxiosPromise<ITourInfoListResponseModel> {
            return localVarFp.getTourInfo(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ITourInfoRequestModel} iTourInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTourInfo(iTourInfoRequestModel: ITourInfoRequestModel, options?: any): AxiosPromise<ITourInfoResponseModel> {
            return localVarFp.putTourInfo(iTourInfoRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getTourInfo operation in TourInfoApi.
 * @export
 * @interface TourInfoApiGetTourInfoRequest
 */
export interface TourInfoApiGetTourInfoRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof TourInfoApiGetTourInfo
     */
    readonly sort?: string

    /**
     * Retun page/pageSize (default: true)
     * @type {boolean}
     * @memberof TourInfoApiGetTourInfo
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof TourInfoApiGetTourInfo
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof TourInfoApiGetTourInfo
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof TourInfoApiGetTourInfo
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof TourInfoApiGetTourInfo
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof TourInfoApiGetTourInfo
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof TourInfoApiGetTourInfo
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof TourInfoApiGetTourInfo
     */
    readonly filters?: object
}

/**
 * Request parameters for putTourInfo operation in TourInfoApi.
 * @export
 * @interface TourInfoApiPutTourInfoRequest
 */
export interface TourInfoApiPutTourInfoRequest {
    /**
     * 
     * @type {ITourInfoRequestModel}
     * @memberof TourInfoApiPutTourInfo
     */
    readonly iTourInfoRequestModel: ITourInfoRequestModel
}

/**
 * TourInfoApi - object-oriented interface
 * @export
 * @class TourInfoApi
 * @extends {BaseAPI}
 */
export class TourInfoApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourInfoApi
     */
    public deleteTourInfo(options?: AxiosRequestConfig) {
        return TourInfoApiFp(this.configuration).deleteTourInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TourInfoApiGetTourInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourInfoApi
     */
    public getTourInfo(requestParameters: TourInfoApiGetTourInfoRequest = {}, options?: AxiosRequestConfig) {
        return TourInfoApiFp(this.configuration).getTourInfo(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TourInfoApiPutTourInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TourInfoApi
     */
    public putTourInfo(requestParameters: TourInfoApiPutTourInfoRequest, options?: AxiosRequestConfig) {
        return TourInfoApiFp(this.configuration).putTourInfo(requestParameters.iTourInfoRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TrainServiceApi - axios parameter creator
 * @export
 */
export const TrainServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTrainServicesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTrainServicesId', 'id', id)
            const localVarPath = `/train-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrainServices: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/train-services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrainServicesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTrainServicesId', 'id', id)
            const localVarPath = `/train-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ITrainServiceRequestModel} iTrainServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTrainServices: async (iTrainServiceRequestModel: ITrainServiceRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iTrainServiceRequestModel' is not null or undefined
            assertParamExists('postTrainServices', 'iTrainServiceRequestModel', iTrainServiceRequestModel)
            const localVarPath = `/train-services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iTrainServiceRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ITrainServiceRequestModel} iTrainServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTrainServicesId: async (id: number, iTrainServiceRequestModel: ITrainServiceRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putTrainServicesId', 'id', id)
            // verify required parameter 'iTrainServiceRequestModel' is not null or undefined
            assertParamExists('putTrainServicesId', 'iTrainServiceRequestModel', iTrainServiceRequestModel)
            const localVarPath = `/train-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iTrainServiceRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TrainServiceApi - functional programming interface
 * @export
 */
export const TrainServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TrainServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTrainServicesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTrainServicesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrainServices(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ITrainServiceListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTrainServices(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrainServicesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ITrainServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTrainServicesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ITrainServiceRequestModel} iTrainServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTrainServices(iTrainServiceRequestModel: ITrainServiceRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ITrainServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTrainServices(iTrainServiceRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ITrainServiceRequestModel} iTrainServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTrainServicesId(id: number, iTrainServiceRequestModel: ITrainServiceRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ITrainServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putTrainServicesId(id, iTrainServiceRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TrainServiceApi - factory interface
 * @export
 */
export const TrainServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TrainServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTrainServicesId(id: number, options?: any): AxiosPromise<number> {
            return localVarFp.deleteTrainServicesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrainServices(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: any): AxiosPromise<ITrainServiceListResponseModel> {
            return localVarFp.getTrainServices(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrainServicesId(id: number, options?: any): AxiosPromise<ITrainServiceResponseModel> {
            return localVarFp.getTrainServicesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ITrainServiceRequestModel} iTrainServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTrainServices(iTrainServiceRequestModel: ITrainServiceRequestModel, options?: any): AxiosPromise<ITrainServiceResponseModel> {
            return localVarFp.postTrainServices(iTrainServiceRequestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ITrainServiceRequestModel} iTrainServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTrainServicesId(id: number, iTrainServiceRequestModel: ITrainServiceRequestModel, options?: any): AxiosPromise<ITrainServiceResponseModel> {
            return localVarFp.putTrainServicesId(id, iTrainServiceRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteTrainServicesId operation in TrainServiceApi.
 * @export
 * @interface TrainServiceApiDeleteTrainServicesIdRequest
 */
export interface TrainServiceApiDeleteTrainServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof TrainServiceApiDeleteTrainServicesId
     */
    readonly id: number
}

/**
 * Request parameters for getTrainServices operation in TrainServiceApi.
 * @export
 * @interface TrainServiceApiGetTrainServicesRequest
 */
export interface TrainServiceApiGetTrainServicesRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof TrainServiceApiGetTrainServices
     */
    readonly sort?: string

    /**
     * Retun page/pageSize (default: true)
     * @type {boolean}
     * @memberof TrainServiceApiGetTrainServices
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof TrainServiceApiGetTrainServices
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof TrainServiceApiGetTrainServices
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof TrainServiceApiGetTrainServices
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof TrainServiceApiGetTrainServices
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof TrainServiceApiGetTrainServices
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof TrainServiceApiGetTrainServices
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof TrainServiceApiGetTrainServices
     */
    readonly filters?: object
}

/**
 * Request parameters for getTrainServicesId operation in TrainServiceApi.
 * @export
 * @interface TrainServiceApiGetTrainServicesIdRequest
 */
export interface TrainServiceApiGetTrainServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof TrainServiceApiGetTrainServicesId
     */
    readonly id: number
}

/**
 * Request parameters for postTrainServices operation in TrainServiceApi.
 * @export
 * @interface TrainServiceApiPostTrainServicesRequest
 */
export interface TrainServiceApiPostTrainServicesRequest {
    /**
     * 
     * @type {ITrainServiceRequestModel}
     * @memberof TrainServiceApiPostTrainServices
     */
    readonly iTrainServiceRequestModel: ITrainServiceRequestModel
}

/**
 * Request parameters for putTrainServicesId operation in TrainServiceApi.
 * @export
 * @interface TrainServiceApiPutTrainServicesIdRequest
 */
export interface TrainServiceApiPutTrainServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof TrainServiceApiPutTrainServicesId
     */
    readonly id: number

    /**
     * 
     * @type {ITrainServiceRequestModel}
     * @memberof TrainServiceApiPutTrainServicesId
     */
    readonly iTrainServiceRequestModel: ITrainServiceRequestModel
}

/**
 * TrainServiceApi - object-oriented interface
 * @export
 * @class TrainServiceApi
 * @extends {BaseAPI}
 */
export class TrainServiceApi extends BaseAPI {
    /**
     * 
     * @param {TrainServiceApiDeleteTrainServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainServiceApi
     */
    public deleteTrainServicesId(requestParameters: TrainServiceApiDeleteTrainServicesIdRequest, options?: AxiosRequestConfig) {
        return TrainServiceApiFp(this.configuration).deleteTrainServicesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TrainServiceApiGetTrainServicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainServiceApi
     */
    public getTrainServices(requestParameters: TrainServiceApiGetTrainServicesRequest = {}, options?: AxiosRequestConfig) {
        return TrainServiceApiFp(this.configuration).getTrainServices(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TrainServiceApiGetTrainServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainServiceApi
     */
    public getTrainServicesId(requestParameters: TrainServiceApiGetTrainServicesIdRequest, options?: AxiosRequestConfig) {
        return TrainServiceApiFp(this.configuration).getTrainServicesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TrainServiceApiPostTrainServicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainServiceApi
     */
    public postTrainServices(requestParameters: TrainServiceApiPostTrainServicesRequest, options?: AxiosRequestConfig) {
        return TrainServiceApiFp(this.configuration).postTrainServices(requestParameters.iTrainServiceRequestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TrainServiceApiPutTrainServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainServiceApi
     */
    public putTrainServicesId(requestParameters: TrainServiceApiPutTrainServicesIdRequest, options?: AxiosRequestConfig) {
        return TrainServiceApiFp(this.configuration).putTrainServicesId(requestParameters.id, requestParameters.iTrainServiceRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TrainServiceInfoApi - axios parameter creator
 * @export
 */
export const TrainServiceInfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTrainServiceInfo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/train-service-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrainServiceInfo: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/train-service-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ITrainServiceInfoRequestModel} iTrainServiceInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTrainServiceInfo: async (iTrainServiceInfoRequestModel: ITrainServiceInfoRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iTrainServiceInfoRequestModel' is not null or undefined
            assertParamExists('putTrainServiceInfo', 'iTrainServiceInfoRequestModel', iTrainServiceInfoRequestModel)
            const localVarPath = `/train-service-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iTrainServiceInfoRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TrainServiceInfoApi - functional programming interface
 * @export
 */
export const TrainServiceInfoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TrainServiceInfoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTrainServiceInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTrainServiceInfo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrainServiceInfo(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ITrainServiceInfoListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTrainServiceInfo(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ITrainServiceInfoRequestModel} iTrainServiceInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTrainServiceInfo(iTrainServiceInfoRequestModel: ITrainServiceInfoRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ITrainServiceInfoResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putTrainServiceInfo(iTrainServiceInfoRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TrainServiceInfoApi - factory interface
 * @export
 */
export const TrainServiceInfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TrainServiceInfoApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTrainServiceInfo(options?: any): AxiosPromise<number> {
            return localVarFp.deleteTrainServiceInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrainServiceInfo(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: any): AxiosPromise<ITrainServiceInfoListResponseModel> {
            return localVarFp.getTrainServiceInfo(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ITrainServiceInfoRequestModel} iTrainServiceInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTrainServiceInfo(iTrainServiceInfoRequestModel: ITrainServiceInfoRequestModel, options?: any): AxiosPromise<ITrainServiceInfoResponseModel> {
            return localVarFp.putTrainServiceInfo(iTrainServiceInfoRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getTrainServiceInfo operation in TrainServiceInfoApi.
 * @export
 * @interface TrainServiceInfoApiGetTrainServiceInfoRequest
 */
export interface TrainServiceInfoApiGetTrainServiceInfoRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof TrainServiceInfoApiGetTrainServiceInfo
     */
    readonly sort?: string

    /**
     * Retun page/pageSize (default: true)
     * @type {boolean}
     * @memberof TrainServiceInfoApiGetTrainServiceInfo
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof TrainServiceInfoApiGetTrainServiceInfo
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof TrainServiceInfoApiGetTrainServiceInfo
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof TrainServiceInfoApiGetTrainServiceInfo
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof TrainServiceInfoApiGetTrainServiceInfo
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof TrainServiceInfoApiGetTrainServiceInfo
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof TrainServiceInfoApiGetTrainServiceInfo
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof TrainServiceInfoApiGetTrainServiceInfo
     */
    readonly filters?: object
}

/**
 * Request parameters for putTrainServiceInfo operation in TrainServiceInfoApi.
 * @export
 * @interface TrainServiceInfoApiPutTrainServiceInfoRequest
 */
export interface TrainServiceInfoApiPutTrainServiceInfoRequest {
    /**
     * 
     * @type {ITrainServiceInfoRequestModel}
     * @memberof TrainServiceInfoApiPutTrainServiceInfo
     */
    readonly iTrainServiceInfoRequestModel: ITrainServiceInfoRequestModel
}

/**
 * TrainServiceInfoApi - object-oriented interface
 * @export
 * @class TrainServiceInfoApi
 * @extends {BaseAPI}
 */
export class TrainServiceInfoApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainServiceInfoApi
     */
    public deleteTrainServiceInfo(options?: AxiosRequestConfig) {
        return TrainServiceInfoApiFp(this.configuration).deleteTrainServiceInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TrainServiceInfoApiGetTrainServiceInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainServiceInfoApi
     */
    public getTrainServiceInfo(requestParameters: TrainServiceInfoApiGetTrainServiceInfoRequest = {}, options?: AxiosRequestConfig) {
        return TrainServiceInfoApiFp(this.configuration).getTrainServiceInfo(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TrainServiceInfoApiPutTrainServiceInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainServiceInfoApi
     */
    public putTrainServiceInfo(requestParameters: TrainServiceInfoApiPutTrainServiceInfoRequest, options?: AxiosRequestConfig) {
        return TrainServiceInfoApiFp(this.configuration).putTrainServiceInfo(requestParameters.iTrainServiceInfoRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TranslatingAndInterpretingServiceInfoApi - axios parameter creator
 * @export
 */
export const TranslatingAndInterpretingServiceInfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTranslatingAndInterpretingServiceInfo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/translating-and-interpreting-service-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTranslatingAndInterpretingServiceInfo: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/translating-and-interpreting-service-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ITranslatingAndInterpretingServiceInfoRequestModel} iTranslatingAndInterpretingServiceInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTranslatingAndInterpretingServiceInfo: async (iTranslatingAndInterpretingServiceInfoRequestModel: ITranslatingAndInterpretingServiceInfoRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iTranslatingAndInterpretingServiceInfoRequestModel' is not null or undefined
            assertParamExists('putTranslatingAndInterpretingServiceInfo', 'iTranslatingAndInterpretingServiceInfoRequestModel', iTranslatingAndInterpretingServiceInfoRequestModel)
            const localVarPath = `/translating-and-interpreting-service-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iTranslatingAndInterpretingServiceInfoRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TranslatingAndInterpretingServiceInfoApi - functional programming interface
 * @export
 */
export const TranslatingAndInterpretingServiceInfoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TranslatingAndInterpretingServiceInfoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTranslatingAndInterpretingServiceInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTranslatingAndInterpretingServiceInfo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTranslatingAndInterpretingServiceInfo(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ITranslatingAndInterpretingServiceInfoListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTranslatingAndInterpretingServiceInfo(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ITranslatingAndInterpretingServiceInfoRequestModel} iTranslatingAndInterpretingServiceInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTranslatingAndInterpretingServiceInfo(iTranslatingAndInterpretingServiceInfoRequestModel: ITranslatingAndInterpretingServiceInfoRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ITranslatingAndInterpretingServiceInfoResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putTranslatingAndInterpretingServiceInfo(iTranslatingAndInterpretingServiceInfoRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TranslatingAndInterpretingServiceInfoApi - factory interface
 * @export
 */
export const TranslatingAndInterpretingServiceInfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TranslatingAndInterpretingServiceInfoApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTranslatingAndInterpretingServiceInfo(options?: any): AxiosPromise<number> {
            return localVarFp.deleteTranslatingAndInterpretingServiceInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTranslatingAndInterpretingServiceInfo(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: any): AxiosPromise<ITranslatingAndInterpretingServiceInfoListResponseModel> {
            return localVarFp.getTranslatingAndInterpretingServiceInfo(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ITranslatingAndInterpretingServiceInfoRequestModel} iTranslatingAndInterpretingServiceInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTranslatingAndInterpretingServiceInfo(iTranslatingAndInterpretingServiceInfoRequestModel: ITranslatingAndInterpretingServiceInfoRequestModel, options?: any): AxiosPromise<ITranslatingAndInterpretingServiceInfoResponseModel> {
            return localVarFp.putTranslatingAndInterpretingServiceInfo(iTranslatingAndInterpretingServiceInfoRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getTranslatingAndInterpretingServiceInfo operation in TranslatingAndInterpretingServiceInfoApi.
 * @export
 * @interface TranslatingAndInterpretingServiceInfoApiGetTranslatingAndInterpretingServiceInfoRequest
 */
export interface TranslatingAndInterpretingServiceInfoApiGetTranslatingAndInterpretingServiceInfoRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof TranslatingAndInterpretingServiceInfoApiGetTranslatingAndInterpretingServiceInfo
     */
    readonly sort?: string

    /**
     * Retun page/pageSize (default: true)
     * @type {boolean}
     * @memberof TranslatingAndInterpretingServiceInfoApiGetTranslatingAndInterpretingServiceInfo
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof TranslatingAndInterpretingServiceInfoApiGetTranslatingAndInterpretingServiceInfo
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof TranslatingAndInterpretingServiceInfoApiGetTranslatingAndInterpretingServiceInfo
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof TranslatingAndInterpretingServiceInfoApiGetTranslatingAndInterpretingServiceInfo
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof TranslatingAndInterpretingServiceInfoApiGetTranslatingAndInterpretingServiceInfo
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof TranslatingAndInterpretingServiceInfoApiGetTranslatingAndInterpretingServiceInfo
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof TranslatingAndInterpretingServiceInfoApiGetTranslatingAndInterpretingServiceInfo
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof TranslatingAndInterpretingServiceInfoApiGetTranslatingAndInterpretingServiceInfo
     */
    readonly filters?: object
}

/**
 * Request parameters for putTranslatingAndInterpretingServiceInfo operation in TranslatingAndInterpretingServiceInfoApi.
 * @export
 * @interface TranslatingAndInterpretingServiceInfoApiPutTranslatingAndInterpretingServiceInfoRequest
 */
export interface TranslatingAndInterpretingServiceInfoApiPutTranslatingAndInterpretingServiceInfoRequest {
    /**
     * 
     * @type {ITranslatingAndInterpretingServiceInfoRequestModel}
     * @memberof TranslatingAndInterpretingServiceInfoApiPutTranslatingAndInterpretingServiceInfo
     */
    readonly iTranslatingAndInterpretingServiceInfoRequestModel: ITranslatingAndInterpretingServiceInfoRequestModel
}

/**
 * TranslatingAndInterpretingServiceInfoApi - object-oriented interface
 * @export
 * @class TranslatingAndInterpretingServiceInfoApi
 * @extends {BaseAPI}
 */
export class TranslatingAndInterpretingServiceInfoApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranslatingAndInterpretingServiceInfoApi
     */
    public deleteTranslatingAndInterpretingServiceInfo(options?: AxiosRequestConfig) {
        return TranslatingAndInterpretingServiceInfoApiFp(this.configuration).deleteTranslatingAndInterpretingServiceInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TranslatingAndInterpretingServiceInfoApiGetTranslatingAndInterpretingServiceInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranslatingAndInterpretingServiceInfoApi
     */
    public getTranslatingAndInterpretingServiceInfo(requestParameters: TranslatingAndInterpretingServiceInfoApiGetTranslatingAndInterpretingServiceInfoRequest = {}, options?: AxiosRequestConfig) {
        return TranslatingAndInterpretingServiceInfoApiFp(this.configuration).getTranslatingAndInterpretingServiceInfo(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TranslatingAndInterpretingServiceInfoApiPutTranslatingAndInterpretingServiceInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranslatingAndInterpretingServiceInfoApi
     */
    public putTranslatingAndInterpretingServiceInfo(requestParameters: TranslatingAndInterpretingServiceInfoApiPutTranslatingAndInterpretingServiceInfoRequest, options?: AxiosRequestConfig) {
        return TranslatingAndInterpretingServiceInfoApiFp(this.configuration).putTranslatingAndInterpretingServiceInfo(requestParameters.iTranslatingAndInterpretingServiceInfoRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TranslatingInterpretingServiceApi - axios parameter creator
 * @export
 */
export const TranslatingInterpretingServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTranslatingInterpretingServicesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTranslatingInterpretingServicesId', 'id', id)
            const localVarPath = `/translating-interpreting-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTranslatingInterpretingServices: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/translating-interpreting-services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTranslatingInterpretingServicesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTranslatingInterpretingServicesId', 'id', id)
            const localVarPath = `/translating-interpreting-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ITranslatingInterpretingServiceRequestModel} iTranslatingInterpretingServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTranslatingInterpretingServices: async (iTranslatingInterpretingServiceRequestModel: ITranslatingInterpretingServiceRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iTranslatingInterpretingServiceRequestModel' is not null or undefined
            assertParamExists('postTranslatingInterpretingServices', 'iTranslatingInterpretingServiceRequestModel', iTranslatingInterpretingServiceRequestModel)
            const localVarPath = `/translating-interpreting-services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iTranslatingInterpretingServiceRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ITranslatingInterpretingServiceRequestModel} iTranslatingInterpretingServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTranslatingInterpretingServicesId: async (id: number, iTranslatingInterpretingServiceRequestModel: ITranslatingInterpretingServiceRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putTranslatingInterpretingServicesId', 'id', id)
            // verify required parameter 'iTranslatingInterpretingServiceRequestModel' is not null or undefined
            assertParamExists('putTranslatingInterpretingServicesId', 'iTranslatingInterpretingServiceRequestModel', iTranslatingInterpretingServiceRequestModel)
            const localVarPath = `/translating-interpreting-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iTranslatingInterpretingServiceRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TranslatingInterpretingServiceApi - functional programming interface
 * @export
 */
export const TranslatingInterpretingServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TranslatingInterpretingServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTranslatingInterpretingServicesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTranslatingInterpretingServicesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTranslatingInterpretingServices(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ITranslatingInterpretingServiceListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTranslatingInterpretingServices(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTranslatingInterpretingServicesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ITranslatingInterpretingServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTranslatingInterpretingServicesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ITranslatingInterpretingServiceRequestModel} iTranslatingInterpretingServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTranslatingInterpretingServices(iTranslatingInterpretingServiceRequestModel: ITranslatingInterpretingServiceRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ITranslatingInterpretingServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTranslatingInterpretingServices(iTranslatingInterpretingServiceRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ITranslatingInterpretingServiceRequestModel} iTranslatingInterpretingServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTranslatingInterpretingServicesId(id: number, iTranslatingInterpretingServiceRequestModel: ITranslatingInterpretingServiceRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ITranslatingInterpretingServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putTranslatingInterpretingServicesId(id, iTranslatingInterpretingServiceRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TranslatingInterpretingServiceApi - factory interface
 * @export
 */
export const TranslatingInterpretingServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TranslatingInterpretingServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTranslatingInterpretingServicesId(id: number, options?: any): AxiosPromise<number> {
            return localVarFp.deleteTranslatingInterpretingServicesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTranslatingInterpretingServices(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: any): AxiosPromise<ITranslatingInterpretingServiceListResponseModel> {
            return localVarFp.getTranslatingInterpretingServices(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTranslatingInterpretingServicesId(id: number, options?: any): AxiosPromise<ITranslatingInterpretingServiceResponseModel> {
            return localVarFp.getTranslatingInterpretingServicesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ITranslatingInterpretingServiceRequestModel} iTranslatingInterpretingServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTranslatingInterpretingServices(iTranslatingInterpretingServiceRequestModel: ITranslatingInterpretingServiceRequestModel, options?: any): AxiosPromise<ITranslatingInterpretingServiceResponseModel> {
            return localVarFp.postTranslatingInterpretingServices(iTranslatingInterpretingServiceRequestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ITranslatingInterpretingServiceRequestModel} iTranslatingInterpretingServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTranslatingInterpretingServicesId(id: number, iTranslatingInterpretingServiceRequestModel: ITranslatingInterpretingServiceRequestModel, options?: any): AxiosPromise<ITranslatingInterpretingServiceResponseModel> {
            return localVarFp.putTranslatingInterpretingServicesId(id, iTranslatingInterpretingServiceRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteTranslatingInterpretingServicesId operation in TranslatingInterpretingServiceApi.
 * @export
 * @interface TranslatingInterpretingServiceApiDeleteTranslatingInterpretingServicesIdRequest
 */
export interface TranslatingInterpretingServiceApiDeleteTranslatingInterpretingServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof TranslatingInterpretingServiceApiDeleteTranslatingInterpretingServicesId
     */
    readonly id: number
}

/**
 * Request parameters for getTranslatingInterpretingServices operation in TranslatingInterpretingServiceApi.
 * @export
 * @interface TranslatingInterpretingServiceApiGetTranslatingInterpretingServicesRequest
 */
export interface TranslatingInterpretingServiceApiGetTranslatingInterpretingServicesRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof TranslatingInterpretingServiceApiGetTranslatingInterpretingServices
     */
    readonly sort?: string

    /**
     * Retun page/pageSize (default: true)
     * @type {boolean}
     * @memberof TranslatingInterpretingServiceApiGetTranslatingInterpretingServices
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof TranslatingInterpretingServiceApiGetTranslatingInterpretingServices
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof TranslatingInterpretingServiceApiGetTranslatingInterpretingServices
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof TranslatingInterpretingServiceApiGetTranslatingInterpretingServices
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof TranslatingInterpretingServiceApiGetTranslatingInterpretingServices
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof TranslatingInterpretingServiceApiGetTranslatingInterpretingServices
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof TranslatingInterpretingServiceApiGetTranslatingInterpretingServices
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof TranslatingInterpretingServiceApiGetTranslatingInterpretingServices
     */
    readonly filters?: object
}

/**
 * Request parameters for getTranslatingInterpretingServicesId operation in TranslatingInterpretingServiceApi.
 * @export
 * @interface TranslatingInterpretingServiceApiGetTranslatingInterpretingServicesIdRequest
 */
export interface TranslatingInterpretingServiceApiGetTranslatingInterpretingServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof TranslatingInterpretingServiceApiGetTranslatingInterpretingServicesId
     */
    readonly id: number
}

/**
 * Request parameters for postTranslatingInterpretingServices operation in TranslatingInterpretingServiceApi.
 * @export
 * @interface TranslatingInterpretingServiceApiPostTranslatingInterpretingServicesRequest
 */
export interface TranslatingInterpretingServiceApiPostTranslatingInterpretingServicesRequest {
    /**
     * 
     * @type {ITranslatingInterpretingServiceRequestModel}
     * @memberof TranslatingInterpretingServiceApiPostTranslatingInterpretingServices
     */
    readonly iTranslatingInterpretingServiceRequestModel: ITranslatingInterpretingServiceRequestModel
}

/**
 * Request parameters for putTranslatingInterpretingServicesId operation in TranslatingInterpretingServiceApi.
 * @export
 * @interface TranslatingInterpretingServiceApiPutTranslatingInterpretingServicesIdRequest
 */
export interface TranslatingInterpretingServiceApiPutTranslatingInterpretingServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof TranslatingInterpretingServiceApiPutTranslatingInterpretingServicesId
     */
    readonly id: number

    /**
     * 
     * @type {ITranslatingInterpretingServiceRequestModel}
     * @memberof TranslatingInterpretingServiceApiPutTranslatingInterpretingServicesId
     */
    readonly iTranslatingInterpretingServiceRequestModel: ITranslatingInterpretingServiceRequestModel
}

/**
 * TranslatingInterpretingServiceApi - object-oriented interface
 * @export
 * @class TranslatingInterpretingServiceApi
 * @extends {BaseAPI}
 */
export class TranslatingInterpretingServiceApi extends BaseAPI {
    /**
     * 
     * @param {TranslatingInterpretingServiceApiDeleteTranslatingInterpretingServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranslatingInterpretingServiceApi
     */
    public deleteTranslatingInterpretingServicesId(requestParameters: TranslatingInterpretingServiceApiDeleteTranslatingInterpretingServicesIdRequest, options?: AxiosRequestConfig) {
        return TranslatingInterpretingServiceApiFp(this.configuration).deleteTranslatingInterpretingServicesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TranslatingInterpretingServiceApiGetTranslatingInterpretingServicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranslatingInterpretingServiceApi
     */
    public getTranslatingInterpretingServices(requestParameters: TranslatingInterpretingServiceApiGetTranslatingInterpretingServicesRequest = {}, options?: AxiosRequestConfig) {
        return TranslatingInterpretingServiceApiFp(this.configuration).getTranslatingInterpretingServices(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TranslatingInterpretingServiceApiGetTranslatingInterpretingServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranslatingInterpretingServiceApi
     */
    public getTranslatingInterpretingServicesId(requestParameters: TranslatingInterpretingServiceApiGetTranslatingInterpretingServicesIdRequest, options?: AxiosRequestConfig) {
        return TranslatingInterpretingServiceApiFp(this.configuration).getTranslatingInterpretingServicesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TranslatingInterpretingServiceApiPostTranslatingInterpretingServicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranslatingInterpretingServiceApi
     */
    public postTranslatingInterpretingServices(requestParameters: TranslatingInterpretingServiceApiPostTranslatingInterpretingServicesRequest, options?: AxiosRequestConfig) {
        return TranslatingInterpretingServiceApiFp(this.configuration).postTranslatingInterpretingServices(requestParameters.iTranslatingInterpretingServiceRequestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TranslatingInterpretingServiceApiPutTranslatingInterpretingServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TranslatingInterpretingServiceApi
     */
    public putTranslatingInterpretingServicesId(requestParameters: TranslatingInterpretingServiceApiPutTranslatingInterpretingServicesIdRequest, options?: AxiosRequestConfig) {
        return TranslatingInterpretingServiceApiFp(this.configuration).putTranslatingInterpretingServicesId(requestParameters.id, requestParameters.iTranslatingInterpretingServiceRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TravelInsuranceServiceApi - axios parameter creator
 * @export
 */
export const TravelInsuranceServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTravelInsuranceServicesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTravelInsuranceServicesId', 'id', id)
            const localVarPath = `/travel-insurance-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTravelInsuranceServices: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/travel-insurance-services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTravelInsuranceServicesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTravelInsuranceServicesId', 'id', id)
            const localVarPath = `/travel-insurance-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ITravelInsuranceServiceRequestModel} iTravelInsuranceServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTravelInsuranceServices: async (iTravelInsuranceServiceRequestModel: ITravelInsuranceServiceRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iTravelInsuranceServiceRequestModel' is not null or undefined
            assertParamExists('postTravelInsuranceServices', 'iTravelInsuranceServiceRequestModel', iTravelInsuranceServiceRequestModel)
            const localVarPath = `/travel-insurance-services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iTravelInsuranceServiceRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ITravelInsuranceServiceRequestModel} iTravelInsuranceServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTravelInsuranceServicesId: async (id: number, iTravelInsuranceServiceRequestModel: ITravelInsuranceServiceRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putTravelInsuranceServicesId', 'id', id)
            // verify required parameter 'iTravelInsuranceServiceRequestModel' is not null or undefined
            assertParamExists('putTravelInsuranceServicesId', 'iTravelInsuranceServiceRequestModel', iTravelInsuranceServiceRequestModel)
            const localVarPath = `/travel-insurance-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iTravelInsuranceServiceRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TravelInsuranceServiceApi - functional programming interface
 * @export
 */
export const TravelInsuranceServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TravelInsuranceServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTravelInsuranceServicesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTravelInsuranceServicesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTravelInsuranceServices(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ITravelInsuranceServiceListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTravelInsuranceServices(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTravelInsuranceServicesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ITravelInsuranceServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTravelInsuranceServicesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ITravelInsuranceServiceRequestModel} iTravelInsuranceServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTravelInsuranceServices(iTravelInsuranceServiceRequestModel: ITravelInsuranceServiceRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ITravelInsuranceServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTravelInsuranceServices(iTravelInsuranceServiceRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ITravelInsuranceServiceRequestModel} iTravelInsuranceServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTravelInsuranceServicesId(id: number, iTravelInsuranceServiceRequestModel: ITravelInsuranceServiceRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ITravelInsuranceServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putTravelInsuranceServicesId(id, iTravelInsuranceServiceRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TravelInsuranceServiceApi - factory interface
 * @export
 */
export const TravelInsuranceServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TravelInsuranceServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTravelInsuranceServicesId(id: number, options?: any): AxiosPromise<number> {
            return localVarFp.deleteTravelInsuranceServicesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTravelInsuranceServices(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: any): AxiosPromise<ITravelInsuranceServiceListResponseModel> {
            return localVarFp.getTravelInsuranceServices(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTravelInsuranceServicesId(id: number, options?: any): AxiosPromise<ITravelInsuranceServiceResponseModel> {
            return localVarFp.getTravelInsuranceServicesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ITravelInsuranceServiceRequestModel} iTravelInsuranceServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTravelInsuranceServices(iTravelInsuranceServiceRequestModel: ITravelInsuranceServiceRequestModel, options?: any): AxiosPromise<ITravelInsuranceServiceResponseModel> {
            return localVarFp.postTravelInsuranceServices(iTravelInsuranceServiceRequestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {ITravelInsuranceServiceRequestModel} iTravelInsuranceServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTravelInsuranceServicesId(id: number, iTravelInsuranceServiceRequestModel: ITravelInsuranceServiceRequestModel, options?: any): AxiosPromise<ITravelInsuranceServiceResponseModel> {
            return localVarFp.putTravelInsuranceServicesId(id, iTravelInsuranceServiceRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteTravelInsuranceServicesId operation in TravelInsuranceServiceApi.
 * @export
 * @interface TravelInsuranceServiceApiDeleteTravelInsuranceServicesIdRequest
 */
export interface TravelInsuranceServiceApiDeleteTravelInsuranceServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof TravelInsuranceServiceApiDeleteTravelInsuranceServicesId
     */
    readonly id: number
}

/**
 * Request parameters for getTravelInsuranceServices operation in TravelInsuranceServiceApi.
 * @export
 * @interface TravelInsuranceServiceApiGetTravelInsuranceServicesRequest
 */
export interface TravelInsuranceServiceApiGetTravelInsuranceServicesRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof TravelInsuranceServiceApiGetTravelInsuranceServices
     */
    readonly sort?: string

    /**
     * Retun page/pageSize (default: true)
     * @type {boolean}
     * @memberof TravelInsuranceServiceApiGetTravelInsuranceServices
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof TravelInsuranceServiceApiGetTravelInsuranceServices
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof TravelInsuranceServiceApiGetTravelInsuranceServices
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof TravelInsuranceServiceApiGetTravelInsuranceServices
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof TravelInsuranceServiceApiGetTravelInsuranceServices
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof TravelInsuranceServiceApiGetTravelInsuranceServices
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof TravelInsuranceServiceApiGetTravelInsuranceServices
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof TravelInsuranceServiceApiGetTravelInsuranceServices
     */
    readonly filters?: object
}

/**
 * Request parameters for getTravelInsuranceServicesId operation in TravelInsuranceServiceApi.
 * @export
 * @interface TravelInsuranceServiceApiGetTravelInsuranceServicesIdRequest
 */
export interface TravelInsuranceServiceApiGetTravelInsuranceServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof TravelInsuranceServiceApiGetTravelInsuranceServicesId
     */
    readonly id: number
}

/**
 * Request parameters for postTravelInsuranceServices operation in TravelInsuranceServiceApi.
 * @export
 * @interface TravelInsuranceServiceApiPostTravelInsuranceServicesRequest
 */
export interface TravelInsuranceServiceApiPostTravelInsuranceServicesRequest {
    /**
     * 
     * @type {ITravelInsuranceServiceRequestModel}
     * @memberof TravelInsuranceServiceApiPostTravelInsuranceServices
     */
    readonly iTravelInsuranceServiceRequestModel: ITravelInsuranceServiceRequestModel
}

/**
 * Request parameters for putTravelInsuranceServicesId operation in TravelInsuranceServiceApi.
 * @export
 * @interface TravelInsuranceServiceApiPutTravelInsuranceServicesIdRequest
 */
export interface TravelInsuranceServiceApiPutTravelInsuranceServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof TravelInsuranceServiceApiPutTravelInsuranceServicesId
     */
    readonly id: number

    /**
     * 
     * @type {ITravelInsuranceServiceRequestModel}
     * @memberof TravelInsuranceServiceApiPutTravelInsuranceServicesId
     */
    readonly iTravelInsuranceServiceRequestModel: ITravelInsuranceServiceRequestModel
}

/**
 * TravelInsuranceServiceApi - object-oriented interface
 * @export
 * @class TravelInsuranceServiceApi
 * @extends {BaseAPI}
 */
export class TravelInsuranceServiceApi extends BaseAPI {
    /**
     * 
     * @param {TravelInsuranceServiceApiDeleteTravelInsuranceServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelInsuranceServiceApi
     */
    public deleteTravelInsuranceServicesId(requestParameters: TravelInsuranceServiceApiDeleteTravelInsuranceServicesIdRequest, options?: AxiosRequestConfig) {
        return TravelInsuranceServiceApiFp(this.configuration).deleteTravelInsuranceServicesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TravelInsuranceServiceApiGetTravelInsuranceServicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelInsuranceServiceApi
     */
    public getTravelInsuranceServices(requestParameters: TravelInsuranceServiceApiGetTravelInsuranceServicesRequest = {}, options?: AxiosRequestConfig) {
        return TravelInsuranceServiceApiFp(this.configuration).getTravelInsuranceServices(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TravelInsuranceServiceApiGetTravelInsuranceServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelInsuranceServiceApi
     */
    public getTravelInsuranceServicesId(requestParameters: TravelInsuranceServiceApiGetTravelInsuranceServicesIdRequest, options?: AxiosRequestConfig) {
        return TravelInsuranceServiceApiFp(this.configuration).getTravelInsuranceServicesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TravelInsuranceServiceApiPostTravelInsuranceServicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelInsuranceServiceApi
     */
    public postTravelInsuranceServices(requestParameters: TravelInsuranceServiceApiPostTravelInsuranceServicesRequest, options?: AxiosRequestConfig) {
        return TravelInsuranceServiceApiFp(this.configuration).postTravelInsuranceServices(requestParameters.iTravelInsuranceServiceRequestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TravelInsuranceServiceApiPutTravelInsuranceServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelInsuranceServiceApi
     */
    public putTravelInsuranceServicesId(requestParameters: TravelInsuranceServiceApiPutTravelInsuranceServicesIdRequest, options?: AxiosRequestConfig) {
        return TravelInsuranceServiceApiFp(this.configuration).putTravelInsuranceServicesId(requestParameters.id, requestParameters.iTravelInsuranceServiceRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TravelInsuranceServiceInfoApi - axios parameter creator
 * @export
 */
export const TravelInsuranceServiceInfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTravelInsuranceServiceInfo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/travel-insurance-service-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTravelInsuranceServiceInfo: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/travel-insurance-service-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ITravelInsuranceServiceInfoRequestModel} iTravelInsuranceServiceInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTravelInsuranceServiceInfo: async (iTravelInsuranceServiceInfoRequestModel: ITravelInsuranceServiceInfoRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iTravelInsuranceServiceInfoRequestModel' is not null or undefined
            assertParamExists('putTravelInsuranceServiceInfo', 'iTravelInsuranceServiceInfoRequestModel', iTravelInsuranceServiceInfoRequestModel)
            const localVarPath = `/travel-insurance-service-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iTravelInsuranceServiceInfoRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TravelInsuranceServiceInfoApi - functional programming interface
 * @export
 */
export const TravelInsuranceServiceInfoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TravelInsuranceServiceInfoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTravelInsuranceServiceInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTravelInsuranceServiceInfo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTravelInsuranceServiceInfo(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ITravelInsuranceServiceInfoListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTravelInsuranceServiceInfo(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ITravelInsuranceServiceInfoRequestModel} iTravelInsuranceServiceInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTravelInsuranceServiceInfo(iTravelInsuranceServiceInfoRequestModel: ITravelInsuranceServiceInfoRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ITravelInsuranceServiceInfoResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putTravelInsuranceServiceInfo(iTravelInsuranceServiceInfoRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TravelInsuranceServiceInfoApi - factory interface
 * @export
 */
export const TravelInsuranceServiceInfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TravelInsuranceServiceInfoApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTravelInsuranceServiceInfo(options?: any): AxiosPromise<number> {
            return localVarFp.deleteTravelInsuranceServiceInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTravelInsuranceServiceInfo(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: any): AxiosPromise<ITravelInsuranceServiceInfoListResponseModel> {
            return localVarFp.getTravelInsuranceServiceInfo(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ITravelInsuranceServiceInfoRequestModel} iTravelInsuranceServiceInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTravelInsuranceServiceInfo(iTravelInsuranceServiceInfoRequestModel: ITravelInsuranceServiceInfoRequestModel, options?: any): AxiosPromise<ITravelInsuranceServiceInfoResponseModel> {
            return localVarFp.putTravelInsuranceServiceInfo(iTravelInsuranceServiceInfoRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getTravelInsuranceServiceInfo operation in TravelInsuranceServiceInfoApi.
 * @export
 * @interface TravelInsuranceServiceInfoApiGetTravelInsuranceServiceInfoRequest
 */
export interface TravelInsuranceServiceInfoApiGetTravelInsuranceServiceInfoRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof TravelInsuranceServiceInfoApiGetTravelInsuranceServiceInfo
     */
    readonly sort?: string

    /**
     * Retun page/pageSize (default: true)
     * @type {boolean}
     * @memberof TravelInsuranceServiceInfoApiGetTravelInsuranceServiceInfo
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof TravelInsuranceServiceInfoApiGetTravelInsuranceServiceInfo
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof TravelInsuranceServiceInfoApiGetTravelInsuranceServiceInfo
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof TravelInsuranceServiceInfoApiGetTravelInsuranceServiceInfo
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof TravelInsuranceServiceInfoApiGetTravelInsuranceServiceInfo
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof TravelInsuranceServiceInfoApiGetTravelInsuranceServiceInfo
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof TravelInsuranceServiceInfoApiGetTravelInsuranceServiceInfo
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof TravelInsuranceServiceInfoApiGetTravelInsuranceServiceInfo
     */
    readonly filters?: object
}

/**
 * Request parameters for putTravelInsuranceServiceInfo operation in TravelInsuranceServiceInfoApi.
 * @export
 * @interface TravelInsuranceServiceInfoApiPutTravelInsuranceServiceInfoRequest
 */
export interface TravelInsuranceServiceInfoApiPutTravelInsuranceServiceInfoRequest {
    /**
     * 
     * @type {ITravelInsuranceServiceInfoRequestModel}
     * @memberof TravelInsuranceServiceInfoApiPutTravelInsuranceServiceInfo
     */
    readonly iTravelInsuranceServiceInfoRequestModel: ITravelInsuranceServiceInfoRequestModel
}

/**
 * TravelInsuranceServiceInfoApi - object-oriented interface
 * @export
 * @class TravelInsuranceServiceInfoApi
 * @extends {BaseAPI}
 */
export class TravelInsuranceServiceInfoApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelInsuranceServiceInfoApi
     */
    public deleteTravelInsuranceServiceInfo(options?: AxiosRequestConfig) {
        return TravelInsuranceServiceInfoApiFp(this.configuration).deleteTravelInsuranceServiceInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TravelInsuranceServiceInfoApiGetTravelInsuranceServiceInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelInsuranceServiceInfoApi
     */
    public getTravelInsuranceServiceInfo(requestParameters: TravelInsuranceServiceInfoApiGetTravelInsuranceServiceInfoRequest = {}, options?: AxiosRequestConfig) {
        return TravelInsuranceServiceInfoApiFp(this.configuration).getTravelInsuranceServiceInfo(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TravelInsuranceServiceInfoApiPutTravelInsuranceServiceInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelInsuranceServiceInfoApi
     */
    public putTravelInsuranceServiceInfo(requestParameters: TravelInsuranceServiceInfoApiPutTravelInsuranceServiceInfoRequest, options?: AxiosRequestConfig) {
        return TravelInsuranceServiceInfoApiFp(this.configuration).putTravelInsuranceServiceInfo(requestParameters.iTravelInsuranceServiceInfoRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UnescoApi - axios parameter creator
 * @export
 */
export const UnescoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUnescosId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUnescosId', 'id', id)
            const localVarPath = `/unescos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnescos: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/unescos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnescosId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUnescosId', 'id', id)
            const localVarPath = `/unescos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IUnescoRequestModel} iUnescoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUnescos: async (iUnescoRequestModel: IUnescoRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iUnescoRequestModel' is not null or undefined
            assertParamExists('postUnescos', 'iUnescoRequestModel', iUnescoRequestModel)
            const localVarPath = `/unescos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iUnescoRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {IUnescoRequestModel} iUnescoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUnescosId: async (id: number, iUnescoRequestModel: IUnescoRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putUnescosId', 'id', id)
            // verify required parameter 'iUnescoRequestModel' is not null or undefined
            assertParamExists('putUnescosId', 'iUnescoRequestModel', iUnescoRequestModel)
            const localVarPath = `/unescos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iUnescoRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UnescoApi - functional programming interface
 * @export
 */
export const UnescoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UnescoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUnescosId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUnescosId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUnescos(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IUnescoListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUnescos(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUnescosId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IUnescoResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUnescosId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IUnescoRequestModel} iUnescoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUnescos(iUnescoRequestModel: IUnescoRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IUnescoResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUnescos(iUnescoRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {IUnescoRequestModel} iUnescoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUnescosId(id: number, iUnescoRequestModel: IUnescoRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IUnescoResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putUnescosId(id, iUnescoRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UnescoApi - factory interface
 * @export
 */
export const UnescoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UnescoApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUnescosId(id: number, options?: any): AxiosPromise<number> {
            return localVarFp.deleteUnescosId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnescos(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: any): AxiosPromise<IUnescoListResponseModel> {
            return localVarFp.getUnescos(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnescosId(id: number, options?: any): AxiosPromise<IUnescoResponseModel> {
            return localVarFp.getUnescosId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IUnescoRequestModel} iUnescoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUnescos(iUnescoRequestModel: IUnescoRequestModel, options?: any): AxiosPromise<IUnescoResponseModel> {
            return localVarFp.postUnescos(iUnescoRequestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {IUnescoRequestModel} iUnescoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUnescosId(id: number, iUnescoRequestModel: IUnescoRequestModel, options?: any): AxiosPromise<IUnescoResponseModel> {
            return localVarFp.putUnescosId(id, iUnescoRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteUnescosId operation in UnescoApi.
 * @export
 * @interface UnescoApiDeleteUnescosIdRequest
 */
export interface UnescoApiDeleteUnescosIdRequest {
    /**
     * 
     * @type {number}
     * @memberof UnescoApiDeleteUnescosId
     */
    readonly id: number
}

/**
 * Request parameters for getUnescos operation in UnescoApi.
 * @export
 * @interface UnescoApiGetUnescosRequest
 */
export interface UnescoApiGetUnescosRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof UnescoApiGetUnescos
     */
    readonly sort?: string

    /**
     * Retun page/pageSize (default: true)
     * @type {boolean}
     * @memberof UnescoApiGetUnescos
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof UnescoApiGetUnescos
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof UnescoApiGetUnescos
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof UnescoApiGetUnescos
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof UnescoApiGetUnescos
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof UnescoApiGetUnescos
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof UnescoApiGetUnescos
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof UnescoApiGetUnescos
     */
    readonly filters?: object
}

/**
 * Request parameters for getUnescosId operation in UnescoApi.
 * @export
 * @interface UnescoApiGetUnescosIdRequest
 */
export interface UnescoApiGetUnescosIdRequest {
    /**
     * 
     * @type {number}
     * @memberof UnescoApiGetUnescosId
     */
    readonly id: number
}

/**
 * Request parameters for postUnescos operation in UnescoApi.
 * @export
 * @interface UnescoApiPostUnescosRequest
 */
export interface UnescoApiPostUnescosRequest {
    /**
     * 
     * @type {IUnescoRequestModel}
     * @memberof UnescoApiPostUnescos
     */
    readonly iUnescoRequestModel: IUnescoRequestModel
}

/**
 * Request parameters for putUnescosId operation in UnescoApi.
 * @export
 * @interface UnescoApiPutUnescosIdRequest
 */
export interface UnescoApiPutUnescosIdRequest {
    /**
     * 
     * @type {number}
     * @memberof UnescoApiPutUnescosId
     */
    readonly id: number

    /**
     * 
     * @type {IUnescoRequestModel}
     * @memberof UnescoApiPutUnescosId
     */
    readonly iUnescoRequestModel: IUnescoRequestModel
}

/**
 * UnescoApi - object-oriented interface
 * @export
 * @class UnescoApi
 * @extends {BaseAPI}
 */
export class UnescoApi extends BaseAPI {
    /**
     * 
     * @param {UnescoApiDeleteUnescosIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnescoApi
     */
    public deleteUnescosId(requestParameters: UnescoApiDeleteUnescosIdRequest, options?: AxiosRequestConfig) {
        return UnescoApiFp(this.configuration).deleteUnescosId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UnescoApiGetUnescosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnescoApi
     */
    public getUnescos(requestParameters: UnescoApiGetUnescosRequest = {}, options?: AxiosRequestConfig) {
        return UnescoApiFp(this.configuration).getUnescos(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UnescoApiGetUnescosIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnescoApi
     */
    public getUnescosId(requestParameters: UnescoApiGetUnescosIdRequest, options?: AxiosRequestConfig) {
        return UnescoApiFp(this.configuration).getUnescosId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UnescoApiPostUnescosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnescoApi
     */
    public postUnescos(requestParameters: UnescoApiPostUnescosRequest, options?: AxiosRequestConfig) {
        return UnescoApiFp(this.configuration).postUnescos(requestParameters.iUnescoRequestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UnescoApiPutUnescosIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnescoApi
     */
    public putUnescosId(requestParameters: UnescoApiPutUnescosIdRequest, options?: AxiosRequestConfig) {
        return UnescoApiFp(this.configuration).putUnescosId(requestParameters.id, requestParameters.iUnescoRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UnescoInfoApi - axios parameter creator
 * @export
 */
export const UnescoInfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUnescoInfo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/unesco-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnescoInfo: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/unesco-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IUnescoInfoRequestModel} iUnescoInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUnescoInfo: async (iUnescoInfoRequestModel: IUnescoInfoRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iUnescoInfoRequestModel' is not null or undefined
            assertParamExists('putUnescoInfo', 'iUnescoInfoRequestModel', iUnescoInfoRequestModel)
            const localVarPath = `/unesco-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iUnescoInfoRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UnescoInfoApi - functional programming interface
 * @export
 */
export const UnescoInfoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UnescoInfoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUnescoInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUnescoInfo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUnescoInfo(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IUnescoInfoListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUnescoInfo(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IUnescoInfoRequestModel} iUnescoInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUnescoInfo(iUnescoInfoRequestModel: IUnescoInfoRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IUnescoInfoResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putUnescoInfo(iUnescoInfoRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UnescoInfoApi - factory interface
 * @export
 */
export const UnescoInfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UnescoInfoApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUnescoInfo(options?: any): AxiosPromise<number> {
            return localVarFp.deleteUnescoInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnescoInfo(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: any): AxiosPromise<IUnescoInfoListResponseModel> {
            return localVarFp.getUnescoInfo(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IUnescoInfoRequestModel} iUnescoInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUnescoInfo(iUnescoInfoRequestModel: IUnescoInfoRequestModel, options?: any): AxiosPromise<IUnescoInfoResponseModel> {
            return localVarFp.putUnescoInfo(iUnescoInfoRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getUnescoInfo operation in UnescoInfoApi.
 * @export
 * @interface UnescoInfoApiGetUnescoInfoRequest
 */
export interface UnescoInfoApiGetUnescoInfoRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof UnescoInfoApiGetUnescoInfo
     */
    readonly sort?: string

    /**
     * Retun page/pageSize (default: true)
     * @type {boolean}
     * @memberof UnescoInfoApiGetUnescoInfo
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof UnescoInfoApiGetUnescoInfo
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof UnescoInfoApiGetUnescoInfo
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof UnescoInfoApiGetUnescoInfo
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof UnescoInfoApiGetUnescoInfo
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof UnescoInfoApiGetUnescoInfo
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof UnescoInfoApiGetUnescoInfo
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof UnescoInfoApiGetUnescoInfo
     */
    readonly filters?: object
}

/**
 * Request parameters for putUnescoInfo operation in UnescoInfoApi.
 * @export
 * @interface UnescoInfoApiPutUnescoInfoRequest
 */
export interface UnescoInfoApiPutUnescoInfoRequest {
    /**
     * 
     * @type {IUnescoInfoRequestModel}
     * @memberof UnescoInfoApiPutUnescoInfo
     */
    readonly iUnescoInfoRequestModel: IUnescoInfoRequestModel
}

/**
 * UnescoInfoApi - object-oriented interface
 * @export
 * @class UnescoInfoApi
 * @extends {BaseAPI}
 */
export class UnescoInfoApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnescoInfoApi
     */
    public deleteUnescoInfo(options?: AxiosRequestConfig) {
        return UnescoInfoApiFp(this.configuration).deleteUnescoInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UnescoInfoApiGetUnescoInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnescoInfoApi
     */
    public getUnescoInfo(requestParameters: UnescoInfoApiGetUnescoInfoRequest = {}, options?: AxiosRequestConfig) {
        return UnescoInfoApiFp(this.configuration).getUnescoInfo(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UnescoInfoApiPutUnescoInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnescoInfoApi
     */
    public putUnescoInfo(requestParameters: UnescoInfoApiPutUnescoInfoRequest, options?: AxiosRequestConfig) {
        return UnescoInfoApiFp(this.configuration).putUnescoInfo(requestParameters.iUnescoInfoRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UploadFileApi - axios parameter creator
 * @export
 */
export const UploadFileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUploadFilesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUploadFilesId', 'id', id)
            const localVarPath = `/upload/files/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUploadFiles: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/upload/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUploadFilesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUploadFilesId', 'id', id)
            const localVarPath = `/upload/files/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UploadFileApi - functional programming interface
 * @export
 */
export const UploadFileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UploadFileApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUploadFilesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUploadFilesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUploadFiles(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IUploadFileListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUploadFiles(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUploadFilesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IUploadFileResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUploadFilesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UploadFileApi - factory interface
 * @export
 */
export const UploadFileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UploadFileApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUploadFilesId(id: number, options?: any): AxiosPromise<number> {
            return localVarFp.deleteUploadFilesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUploadFiles(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: any): AxiosPromise<IUploadFileListResponseModel> {
            return localVarFp.getUploadFiles(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUploadFilesId(id: number, options?: any): AxiosPromise<IUploadFileResponseModel> {
            return localVarFp.getUploadFilesId(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteUploadFilesId operation in UploadFileApi.
 * @export
 * @interface UploadFileApiDeleteUploadFilesIdRequest
 */
export interface UploadFileApiDeleteUploadFilesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof UploadFileApiDeleteUploadFilesId
     */
    readonly id: number
}

/**
 * Request parameters for getUploadFiles operation in UploadFileApi.
 * @export
 * @interface UploadFileApiGetUploadFilesRequest
 */
export interface UploadFileApiGetUploadFilesRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof UploadFileApiGetUploadFiles
     */
    readonly sort?: string

    /**
     * Retun page/pageSize (default: true)
     * @type {boolean}
     * @memberof UploadFileApiGetUploadFiles
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof UploadFileApiGetUploadFiles
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof UploadFileApiGetUploadFiles
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof UploadFileApiGetUploadFiles
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof UploadFileApiGetUploadFiles
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof UploadFileApiGetUploadFiles
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof UploadFileApiGetUploadFiles
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof UploadFileApiGetUploadFiles
     */
    readonly filters?: object
}

/**
 * Request parameters for getUploadFilesId operation in UploadFileApi.
 * @export
 * @interface UploadFileApiGetUploadFilesIdRequest
 */
export interface UploadFileApiGetUploadFilesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof UploadFileApiGetUploadFilesId
     */
    readonly id: number
}

/**
 * UploadFileApi - object-oriented interface
 * @export
 * @class UploadFileApi
 * @extends {BaseAPI}
 */
export class UploadFileApi extends BaseAPI {
    /**
     * 
     * @param {UploadFileApiDeleteUploadFilesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadFileApi
     */
    public deleteUploadFilesId(requestParameters: UploadFileApiDeleteUploadFilesIdRequest, options?: AxiosRequestConfig) {
        return UploadFileApiFp(this.configuration).deleteUploadFilesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UploadFileApiGetUploadFilesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadFileApi
     */
    public getUploadFiles(requestParameters: UploadFileApiGetUploadFilesRequest = {}, options?: AxiosRequestConfig) {
        return UploadFileApiFp(this.configuration).getUploadFiles(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UploadFileApiGetUploadFilesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadFileApi
     */
    public getUploadFilesId(requestParameters: UploadFileApiGetUploadFilesIdRequest, options?: AxiosRequestConfig) {
        return UploadFileApiFp(this.configuration).getUploadFilesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UseFullInformationApi - axios parameter creator
 * @export
 */
export const UseFullInformationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUseFullInformationsId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUseFullInformationsId', 'id', id)
            const localVarPath = `/use-full-informations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUseFullInformations: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/use-full-informations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUseFullInformationsId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUseFullInformationsId', 'id', id)
            const localVarPath = `/use-full-informations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IUseFullInformationRequestModel} iUseFullInformationRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUseFullInformations: async (iUseFullInformationRequestModel: IUseFullInformationRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iUseFullInformationRequestModel' is not null or undefined
            assertParamExists('postUseFullInformations', 'iUseFullInformationRequestModel', iUseFullInformationRequestModel)
            const localVarPath = `/use-full-informations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iUseFullInformationRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {IUseFullInformationRequestModel} iUseFullInformationRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUseFullInformationsId: async (id: number, iUseFullInformationRequestModel: IUseFullInformationRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putUseFullInformationsId', 'id', id)
            // verify required parameter 'iUseFullInformationRequestModel' is not null or undefined
            assertParamExists('putUseFullInformationsId', 'iUseFullInformationRequestModel', iUseFullInformationRequestModel)
            const localVarPath = `/use-full-informations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iUseFullInformationRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UseFullInformationApi - functional programming interface
 * @export
 */
export const UseFullInformationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UseFullInformationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUseFullInformationsId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUseFullInformationsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUseFullInformations(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IUseFullInformationListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUseFullInformations(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUseFullInformationsId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IUseFullInformationResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUseFullInformationsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IUseFullInformationRequestModel} iUseFullInformationRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUseFullInformations(iUseFullInformationRequestModel: IUseFullInformationRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IUseFullInformationResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUseFullInformations(iUseFullInformationRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {IUseFullInformationRequestModel} iUseFullInformationRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUseFullInformationsId(id: number, iUseFullInformationRequestModel: IUseFullInformationRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IUseFullInformationResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putUseFullInformationsId(id, iUseFullInformationRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UseFullInformationApi - factory interface
 * @export
 */
export const UseFullInformationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UseFullInformationApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUseFullInformationsId(id: number, options?: any): AxiosPromise<number> {
            return localVarFp.deleteUseFullInformationsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUseFullInformations(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: any): AxiosPromise<IUseFullInformationListResponseModel> {
            return localVarFp.getUseFullInformations(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUseFullInformationsId(id: number, options?: any): AxiosPromise<IUseFullInformationResponseModel> {
            return localVarFp.getUseFullInformationsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IUseFullInformationRequestModel} iUseFullInformationRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUseFullInformations(iUseFullInformationRequestModel: IUseFullInformationRequestModel, options?: any): AxiosPromise<IUseFullInformationResponseModel> {
            return localVarFp.postUseFullInformations(iUseFullInformationRequestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {IUseFullInformationRequestModel} iUseFullInformationRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUseFullInformationsId(id: number, iUseFullInformationRequestModel: IUseFullInformationRequestModel, options?: any): AxiosPromise<IUseFullInformationResponseModel> {
            return localVarFp.putUseFullInformationsId(id, iUseFullInformationRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteUseFullInformationsId operation in UseFullInformationApi.
 * @export
 * @interface UseFullInformationApiDeleteUseFullInformationsIdRequest
 */
export interface UseFullInformationApiDeleteUseFullInformationsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof UseFullInformationApiDeleteUseFullInformationsId
     */
    readonly id: number
}

/**
 * Request parameters for getUseFullInformations operation in UseFullInformationApi.
 * @export
 * @interface UseFullInformationApiGetUseFullInformationsRequest
 */
export interface UseFullInformationApiGetUseFullInformationsRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof UseFullInformationApiGetUseFullInformations
     */
    readonly sort?: string

    /**
     * Retun page/pageSize (default: true)
     * @type {boolean}
     * @memberof UseFullInformationApiGetUseFullInformations
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof UseFullInformationApiGetUseFullInformations
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof UseFullInformationApiGetUseFullInformations
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof UseFullInformationApiGetUseFullInformations
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof UseFullInformationApiGetUseFullInformations
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof UseFullInformationApiGetUseFullInformations
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof UseFullInformationApiGetUseFullInformations
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof UseFullInformationApiGetUseFullInformations
     */
    readonly filters?: object
}

/**
 * Request parameters for getUseFullInformationsId operation in UseFullInformationApi.
 * @export
 * @interface UseFullInformationApiGetUseFullInformationsIdRequest
 */
export interface UseFullInformationApiGetUseFullInformationsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof UseFullInformationApiGetUseFullInformationsId
     */
    readonly id: number
}

/**
 * Request parameters for postUseFullInformations operation in UseFullInformationApi.
 * @export
 * @interface UseFullInformationApiPostUseFullInformationsRequest
 */
export interface UseFullInformationApiPostUseFullInformationsRequest {
    /**
     * 
     * @type {IUseFullInformationRequestModel}
     * @memberof UseFullInformationApiPostUseFullInformations
     */
    readonly iUseFullInformationRequestModel: IUseFullInformationRequestModel
}

/**
 * Request parameters for putUseFullInformationsId operation in UseFullInformationApi.
 * @export
 * @interface UseFullInformationApiPutUseFullInformationsIdRequest
 */
export interface UseFullInformationApiPutUseFullInformationsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof UseFullInformationApiPutUseFullInformationsId
     */
    readonly id: number

    /**
     * 
     * @type {IUseFullInformationRequestModel}
     * @memberof UseFullInformationApiPutUseFullInformationsId
     */
    readonly iUseFullInformationRequestModel: IUseFullInformationRequestModel
}

/**
 * UseFullInformationApi - object-oriented interface
 * @export
 * @class UseFullInformationApi
 * @extends {BaseAPI}
 */
export class UseFullInformationApi extends BaseAPI {
    /**
     * 
     * @param {UseFullInformationApiDeleteUseFullInformationsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UseFullInformationApi
     */
    public deleteUseFullInformationsId(requestParameters: UseFullInformationApiDeleteUseFullInformationsIdRequest, options?: AxiosRequestConfig) {
        return UseFullInformationApiFp(this.configuration).deleteUseFullInformationsId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UseFullInformationApiGetUseFullInformationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UseFullInformationApi
     */
    public getUseFullInformations(requestParameters: UseFullInformationApiGetUseFullInformationsRequest = {}, options?: AxiosRequestConfig) {
        return UseFullInformationApiFp(this.configuration).getUseFullInformations(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UseFullInformationApiGetUseFullInformationsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UseFullInformationApi
     */
    public getUseFullInformationsId(requestParameters: UseFullInformationApiGetUseFullInformationsIdRequest, options?: AxiosRequestConfig) {
        return UseFullInformationApiFp(this.configuration).getUseFullInformationsId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UseFullInformationApiPostUseFullInformationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UseFullInformationApi
     */
    public postUseFullInformations(requestParameters: UseFullInformationApiPostUseFullInformationsRequest, options?: AxiosRequestConfig) {
        return UseFullInformationApiFp(this.configuration).postUseFullInformations(requestParameters.iUseFullInformationRequestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UseFullInformationApiPutUseFullInformationsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UseFullInformationApi
     */
    public putUseFullInformationsId(requestParameters: UseFullInformationApiPutUseFullInformationsIdRequest, options?: AxiosRequestConfig) {
        return UseFullInformationApiFp(this.configuration).putUseFullInformationsId(requestParameters.id, requestParameters.iUseFullInformationRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UseFullInformationInfoApi - axios parameter creator
 * @export
 */
export const UseFullInformationInfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUseFullInformationInfo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/use-full-information-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUseFullInformationInfo: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/use-full-information-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IUseFullInformationInfoRequestModel} iUseFullInformationInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUseFullInformationInfo: async (iUseFullInformationInfoRequestModel: IUseFullInformationInfoRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iUseFullInformationInfoRequestModel' is not null or undefined
            assertParamExists('putUseFullInformationInfo', 'iUseFullInformationInfoRequestModel', iUseFullInformationInfoRequestModel)
            const localVarPath = `/use-full-information-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iUseFullInformationInfoRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UseFullInformationInfoApi - functional programming interface
 * @export
 */
export const UseFullInformationInfoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UseFullInformationInfoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUseFullInformationInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUseFullInformationInfo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUseFullInformationInfo(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IUseFullInformationInfoListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUseFullInformationInfo(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IUseFullInformationInfoRequestModel} iUseFullInformationInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUseFullInformationInfo(iUseFullInformationInfoRequestModel: IUseFullInformationInfoRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IUseFullInformationInfoResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putUseFullInformationInfo(iUseFullInformationInfoRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UseFullInformationInfoApi - factory interface
 * @export
 */
export const UseFullInformationInfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UseFullInformationInfoApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUseFullInformationInfo(options?: any): AxiosPromise<number> {
            return localVarFp.deleteUseFullInformationInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUseFullInformationInfo(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: any): AxiosPromise<IUseFullInformationInfoListResponseModel> {
            return localVarFp.getUseFullInformationInfo(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IUseFullInformationInfoRequestModel} iUseFullInformationInfoRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUseFullInformationInfo(iUseFullInformationInfoRequestModel: IUseFullInformationInfoRequestModel, options?: any): AxiosPromise<IUseFullInformationInfoResponseModel> {
            return localVarFp.putUseFullInformationInfo(iUseFullInformationInfoRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getUseFullInformationInfo operation in UseFullInformationInfoApi.
 * @export
 * @interface UseFullInformationInfoApiGetUseFullInformationInfoRequest
 */
export interface UseFullInformationInfoApiGetUseFullInformationInfoRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof UseFullInformationInfoApiGetUseFullInformationInfo
     */
    readonly sort?: string

    /**
     * Retun page/pageSize (default: true)
     * @type {boolean}
     * @memberof UseFullInformationInfoApiGetUseFullInformationInfo
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof UseFullInformationInfoApiGetUseFullInformationInfo
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof UseFullInformationInfoApiGetUseFullInformationInfo
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof UseFullInformationInfoApiGetUseFullInformationInfo
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof UseFullInformationInfoApiGetUseFullInformationInfo
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof UseFullInformationInfoApiGetUseFullInformationInfo
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof UseFullInformationInfoApiGetUseFullInformationInfo
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof UseFullInformationInfoApiGetUseFullInformationInfo
     */
    readonly filters?: object
}

/**
 * Request parameters for putUseFullInformationInfo operation in UseFullInformationInfoApi.
 * @export
 * @interface UseFullInformationInfoApiPutUseFullInformationInfoRequest
 */
export interface UseFullInformationInfoApiPutUseFullInformationInfoRequest {
    /**
     * 
     * @type {IUseFullInformationInfoRequestModel}
     * @memberof UseFullInformationInfoApiPutUseFullInformationInfo
     */
    readonly iUseFullInformationInfoRequestModel: IUseFullInformationInfoRequestModel
}

/**
 * UseFullInformationInfoApi - object-oriented interface
 * @export
 * @class UseFullInformationInfoApi
 * @extends {BaseAPI}
 */
export class UseFullInformationInfoApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UseFullInformationInfoApi
     */
    public deleteUseFullInformationInfo(options?: AxiosRequestConfig) {
        return UseFullInformationInfoApiFp(this.configuration).deleteUseFullInformationInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UseFullInformationInfoApiGetUseFullInformationInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UseFullInformationInfoApi
     */
    public getUseFullInformationInfo(requestParameters: UseFullInformationInfoApiGetUseFullInformationInfoRequest = {}, options?: AxiosRequestConfig) {
        return UseFullInformationInfoApiFp(this.configuration).getUseFullInformationInfo(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UseFullInformationInfoApiPutUseFullInformationInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UseFullInformationInfoApi
     */
    public putUseFullInformationInfo(requestParameters: UseFullInformationInfoApiPutUseFullInformationInfoRequest, options?: AxiosRequestConfig) {
        return UseFullInformationInfoApiFp(this.configuration).putUseFullInformationInfo(requestParameters.iUseFullInformationInfoRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * VipDomesticAirportServiceApi - axios parameter creator
 * @export
 */
export const VipDomesticAirportServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVipDomesticAirportServicesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteVipDomesticAirportServicesId', 'id', id)
            const localVarPath = `/vip-domestic-airport-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVipDomesticAirportServices: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vip-domestic-airport-services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVipDomesticAirportServicesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getVipDomesticAirportServicesId', 'id', id)
            const localVarPath = `/vip-domestic-airport-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IVipDomesticAirportServiceRequestModel} iVipDomesticAirportServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postVipDomesticAirportServices: async (iVipDomesticAirportServiceRequestModel: IVipDomesticAirportServiceRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iVipDomesticAirportServiceRequestModel' is not null or undefined
            assertParamExists('postVipDomesticAirportServices', 'iVipDomesticAirportServiceRequestModel', iVipDomesticAirportServiceRequestModel)
            const localVarPath = `/vip-domestic-airport-services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iVipDomesticAirportServiceRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {IVipDomesticAirportServiceRequestModel} iVipDomesticAirportServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putVipDomesticAirportServicesId: async (id: number, iVipDomesticAirportServiceRequestModel: IVipDomesticAirportServiceRequestModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putVipDomesticAirportServicesId', 'id', id)
            // verify required parameter 'iVipDomesticAirportServiceRequestModel' is not null or undefined
            assertParamExists('putVipDomesticAirportServicesId', 'iVipDomesticAirportServiceRequestModel', iVipDomesticAirportServiceRequestModel)
            const localVarPath = `/vip-domestic-airport-services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iVipDomesticAirportServiceRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VipDomesticAirportServiceApi - functional programming interface
 * @export
 */
export const VipDomesticAirportServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VipDomesticAirportServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVipDomesticAirportServicesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteVipDomesticAirportServicesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVipDomesticAirportServices(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IVipDomesticAirportServiceListResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVipDomesticAirportServices(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVipDomesticAirportServicesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IVipDomesticAirportServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVipDomesticAirportServicesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IVipDomesticAirportServiceRequestModel} iVipDomesticAirportServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postVipDomesticAirportServices(iVipDomesticAirportServiceRequestModel: IVipDomesticAirportServiceRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IVipDomesticAirportServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postVipDomesticAirportServices(iVipDomesticAirportServiceRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {IVipDomesticAirportServiceRequestModel} iVipDomesticAirportServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putVipDomesticAirportServicesId(id: number, iVipDomesticAirportServiceRequestModel: IVipDomesticAirportServiceRequestModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IVipDomesticAirportServiceResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putVipDomesticAirportServicesId(id, iVipDomesticAirportServiceRequestModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VipDomesticAirportServiceApi - factory interface
 * @export
 */
export const VipDomesticAirportServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VipDomesticAirportServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVipDomesticAirportServicesId(id: number, options?: any): AxiosPromise<number> {
            return localVarFp.deleteVipDomesticAirportServicesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Retun page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVipDomesticAirportServices(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, options?: any): AxiosPromise<IVipDomesticAirportServiceListResponseModel> {
            return localVarFp.getVipDomesticAirportServices(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVipDomesticAirportServicesId(id: number, options?: any): AxiosPromise<IVipDomesticAirportServiceResponseModel> {
            return localVarFp.getVipDomesticAirportServicesId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IVipDomesticAirportServiceRequestModel} iVipDomesticAirportServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postVipDomesticAirportServices(iVipDomesticAirportServiceRequestModel: IVipDomesticAirportServiceRequestModel, options?: any): AxiosPromise<IVipDomesticAirportServiceResponseModel> {
            return localVarFp.postVipDomesticAirportServices(iVipDomesticAirportServiceRequestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {IVipDomesticAirportServiceRequestModel} iVipDomesticAirportServiceRequestModel 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putVipDomesticAirportServicesId(id: number, iVipDomesticAirportServiceRequestModel: IVipDomesticAirportServiceRequestModel, options?: any): AxiosPromise<IVipDomesticAirportServiceResponseModel> {
            return localVarFp.putVipDomesticAirportServicesId(id, iVipDomesticAirportServiceRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteVipDomesticAirportServicesId operation in VipDomesticAirportServiceApi.
 * @export
 * @interface VipDomesticAirportServiceApiDeleteVipDomesticAirportServicesIdRequest
 */
export interface VipDomesticAirportServiceApiDeleteVipDomesticAirportServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof VipDomesticAirportServiceApiDeleteVipDomesticAirportServicesId
     */
    readonly id: number
}

/**
 * Request parameters for getVipDomesticAirportServices operation in VipDomesticAirportServiceApi.
 * @export
 * @interface VipDomesticAirportServiceApiGetVipDomesticAirportServicesRequest
 */
export interface VipDomesticAirportServiceApiGetVipDomesticAirportServicesRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof VipDomesticAirportServiceApiGetVipDomesticAirportServices
     */
    readonly sort?: string

    /**
     * Retun page/pageSize (default: true)
     * @type {boolean}
     * @memberof VipDomesticAirportServiceApiGetVipDomesticAirportServices
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof VipDomesticAirportServiceApiGetVipDomesticAirportServices
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof VipDomesticAirportServiceApiGetVipDomesticAirportServices
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof VipDomesticAirportServiceApiGetVipDomesticAirportServices
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof VipDomesticAirportServiceApiGetVipDomesticAirportServices
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof VipDomesticAirportServiceApiGetVipDomesticAirportServices
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof VipDomesticAirportServiceApiGetVipDomesticAirportServices
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof VipDomesticAirportServiceApiGetVipDomesticAirportServices
     */
    readonly filters?: object
}

/**
 * Request parameters for getVipDomesticAirportServicesId operation in VipDomesticAirportServiceApi.
 * @export
 * @interface VipDomesticAirportServiceApiGetVipDomesticAirportServicesIdRequest
 */
export interface VipDomesticAirportServiceApiGetVipDomesticAirportServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof VipDomesticAirportServiceApiGetVipDomesticAirportServicesId
     */
    readonly id: number
}

/**
 * Request parameters for postVipDomesticAirportServices operation in VipDomesticAirportServiceApi.
 * @export
 * @interface VipDomesticAirportServiceApiPostVipDomesticAirportServicesRequest
 */
export interface VipDomesticAirportServiceApiPostVipDomesticAirportServicesRequest {
    /**
     * 
     * @type {IVipDomesticAirportServiceRequestModel}
     * @memberof VipDomesticAirportServiceApiPostVipDomesticAirportServices
     */
    readonly iVipDomesticAirportServiceRequestModel: IVipDomesticAirportServiceRequestModel
}

/**
 * Request parameters for putVipDomesticAirportServicesId operation in VipDomesticAirportServiceApi.
 * @export
 * @interface VipDomesticAirportServiceApiPutVipDomesticAirportServicesIdRequest
 */
export interface VipDomesticAirportServiceApiPutVipDomesticAirportServicesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof VipDomesticAirportServiceApiPutVipDomesticAirportServicesId
     */
    readonly id: number

    /**
     * 
     * @type {IVipDomesticAirportServiceRequestModel}
     * @memberof VipDomesticAirportServiceApiPutVipDomesticAirportServicesId
     */
    readonly iVipDomesticAirportServiceRequestModel: IVipDomesticAirportServiceRequestModel
}

/**
 * VipDomesticAirportServiceApi - object-oriented interface
 * @export
 * @class VipDomesticAirportServiceApi
 * @extends {BaseAPI}
 */
export class VipDomesticAirportServiceApi extends BaseAPI {
    /**
     * 
     * @param {VipDomesticAirportServiceApiDeleteVipDomesticAirportServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VipDomesticAirportServiceApi
     */
    public deleteVipDomesticAirportServicesId(requestParameters: VipDomesticAirportServiceApiDeleteVipDomesticAirportServicesIdRequest, options?: AxiosRequestConfig) {
        return VipDomesticAirportServiceApiFp(this.configuration).deleteVipDomesticAirportServicesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VipDomesticAirportServiceApiGetVipDomesticAirportServicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VipDomesticAirportServiceApi
     */
    public getVipDomesticAirportServices(requestParameters: VipDomesticAirportServiceApiGetVipDomesticAirportServicesRequest = {}, options?: AxiosRequestConfig) {
        return VipDomesticAirportServiceApiFp(this.configuration).getVipDomesticAirportServices(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VipDomesticAirportServiceApiGetVipDomesticAirportServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VipDomesticAirportServiceApi
     */
    public getVipDomesticAirportServicesId(requestParameters: VipDomesticAirportServiceApiGetVipDomesticAirportServicesIdRequest, options?: AxiosRequestConfig) {
        return VipDomesticAirportServiceApiFp(this.configuration).getVipDomesticAirportServicesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VipDomesticAirportServiceApiPostVipDomesticAirportServicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VipDomesticAirportServiceApi
     */
    public postVipDomesticAirportServices(requestParameters: VipDomesticAirportServiceApiPostVipDomesticAirportServicesRequest, options?: AxiosRequestConfig) {
        return VipDomesticAirportServiceApiFp(this.configuration).postVipDomesticAirportServices(requestParameters.iVipDomesticAirportServiceRequestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {VipDomesticAirportServiceApiPutVipDomesticAirportServicesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VipDomesticAirportServiceApi
     */
    public putVipDomesticAirportServicesId(requestParameters: VipDomesticAirportServiceApiPutVipDomesticAirportServicesIdRequest, options?: AxiosRequestConfig) {
        return VipDomesticAirportServiceApiFp(this.configuration).putVipDomesticAirportServicesId(requestParameters.id, requestParameters.iVipDomesticAirportServiceRequestModel, options).then((request) => request(this.axios, this.basePath));
    }
}


