/* tslint:disable */
/* eslint-disable */
/**
 * DOCUMENTATION
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact-email@something.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from "./configuration";

// Some imports not used depending on template conditions
// @ts-ignore
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";

export const BASE_PATH = "http://127.0.0.1:8082/api".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
  csv: ",",
  ssv: " ",
  tsv: "\t",
  pipes: "|",
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
  url: string;
  options: AxiosRequestConfig;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
  protected configuration: Configuration | undefined;

  constructor(
    configuration?: Configuration,
    protected basePath: string = BASE_PATH,
    protected axios: AxiosInstance = globalAxios
  ) {
    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath || this.basePath;
    }

    this.axios.interceptors.request.use((config) => {

      // config.headers?.delete('user-agent')
      // config.headers?.delete('User-Agent')

      // config.headers = {
      //   ...config.headers,
      //   "User-Agent": "axios",
      //   "user-agent": "axios",
      // };
      // config.headers?.head?.set("User-Agent", "axios");
      // config.headers?.head?.set("user-agent", "axios");

      if (config.method === "get") {
        if (config.url?.includes("populate=deep")) {
          // return config;
        } else {
          if (config.url?.includes("?")) {
            config.url = config.url + "&populate=deep";
          } else {
            config.url = config.url + "?populate=deep";
          }
        }

        const params = (config.params as string) || "";
        if (params && params?.startsWith("filters")) {
          config.params = "";
          config.url = config.url + "&" + params;
        }
      }
      return config;
    });
  }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
  name: "RequiredError" = "RequiredError";
  constructor(public field: string, msg?: string) {
    super(msg);
  }
}
